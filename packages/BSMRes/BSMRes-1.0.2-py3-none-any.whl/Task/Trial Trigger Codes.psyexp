<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.2.4">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': ''}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="False" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="packaged" valType="str" updates="None" name="JS libs"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="False" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="False" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="False" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="2022.2.4" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="Trial Trigger Codes" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="data" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="Task">
      <JoystickComponent name="joystick">
        <Param val="" valType="list" updates="constant" name="allowedButtons"/>
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="0" valType="int" updates="constant" name="deviceNumber"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="joystick" valType="code" updates="None" name="name"/>
        <Param val="every frame" valType="str" updates="None" name="saveJoystickState"/>
        <Param val="name" valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="time (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="experiment" valType="str" updates="constant" name="timeRelativeTo"/>
      </JoystickComponent>
      <CodeComponent name="Task_Code">
        <Param val="import pygame, sys&amp;#10;from pygame.locals import *&amp;#10;import random&amp;#10;import math&amp;#10;import os&amp;#10;import csv&amp;#10;import time&amp;#10;from psychopy.core import CountdownTimer&amp;#10;global Trial" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import psychopy.gui&amp;#10;&amp;#10;gui = psychopy.gui.Dlg()&amp;#10;gui.addField(&quot;Participant Number&quot;)&amp;#10;gui.show()&amp;#10;global participantno&amp;#10;participantno = gui.data[0]&amp;#10;&amp;#10;import sys&amp;#10;from pygame.locals import *&amp;#10;import random&amp;#10;import time&amp;#10;import math&amp;#10;import csv&amp;#10;from pygame.sprite import Group, Sprite, spritecollide, groupcollide&amp;#10;import pandas as pd&amp;#10;from scipy import stats&amp;#10;import timer&amp;#10;import decimal&amp;#10;import pygame&amp;#10;import pandas as pd&amp;#10;from time import sleep&amp;#10;import scipy&amp;#10;import numpy&amp;#10;import shutil&amp;#10;import subprocess" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="global GC_SPEED&amp;#10;GC_SPEED = 3.05&amp;#10;pygame.init()&amp;#10;pygame.joystick.init&amp;#10;COLLISION_SCORE = 0&amp;#10;COLLISION_SCORE2 = COLLISION_SCORE/20&amp;#10;COLLISIONSCORECONV = repr(COLLISION_SCORE2)&amp;#10;Average_Score = COLLISION_SCORE2/20&amp;#10;Average_Score_Output = repr(Average_Score)&amp;#10;&amp;#10;pygame.joystick.get_count()&amp;#10;&amp;#10;#participantno = input(&quot;Participant Number &quot;)&amp;#10;&amp;#10;global directory&amp;#10;directory = participantno&amp;#10;&amp;#10;global directoryname&amp;#10;directoryname  = &quot;E:/MRes Data/Participant &quot; + str(directory)&amp;#10;os.makedirs(directoryname)&amp;#10;&amp;#10;with open('E:\MRes Data/Participant ' + directory + '/Participant Statistics.csv', 'a+') as file:&amp;#10;                      #file.write('\n')&amp;#10;                      file.write(&quot;Trial Type&quot; + ',' + &quot;Score&quot;)&amp;#10;&amp;#10;shutil.copyfile(&quot;E:\Consent Form.docx&quot;, &quot;E:\MRes Data\Participant &quot; + directory + &quot;/Participant &quot; + directory + &quot; - Consent Form.docx&quot;)&amp;#10;&amp;#10;joystick = pygame.joystick.Joystick(0)&amp;#10;joystick.init()&amp;#10;pygame.event.get()&amp;#10;joysticktimer = pygame.time.get_ticks()&amp;#10;&amp;#10;with open('E:\MRes Data/Participant ' + directory + '/Calibration Score.csv', 'a+') as file:&amp;#10;                      file.write(',' + 'Average')&amp;#10;                      file.write('\n')&amp;#10;                      &amp;#10;with open('E:\MRes Data/Participant ' + directory + '/Reaction Time.csv', 'a+') as file:&amp;#10;    file.write(',' + &quot;Type&quot; + ',' + &quot;Reaction Time&quot;)&amp;#10;    file.write('\n')&amp;#10;&amp;#10;def Total_Score():&amp;#10;    import pandas as pd&amp;#10;    scoredf = pd.read_csv('E:\MRes Data/Participant ' + directory + '/Participant Statistics.csv')&amp;#10;    totalscore = scoredf['Score'].sum()&amp;#10;    print ('Total Score:', + totalscore)&amp;#10;    with open('Participant Scores.csv', 'a+') as file:&amp;#10;                  file.write('\n')&amp;#10;                  file.write('\n')&amp;#10;                  file.write(&quot;Total Score&quot; + ',' + str(totalscore))&amp;#10;&amp;#10;def Stats_CSV():&amp;#10;    statsdf = pd.read_csv('E:\MRes Data/Participant ' + directory + '/Participant Statistics.csv')&amp;#10;    Score_Mean = statsdf['Score'].sum()&amp;#10;    Breakdown_Score = statsdf.groupby(['Trial Type']).sum()&amp;#10;    &amp;#10;    with open('E:\MRes Data/Participant ' + directory + '/Statistical Analyses.csv', 'a+') as file:&amp;#10;                      #file.write('\n')&amp;#10;                      file.write(&quot;Combined Score&quot; + ',' + str(Score_Mean))&amp;#10;                      file.write('\n')&amp;#10;                      file.write('\n')&amp;#10;                      file.write(&quot;Trial Scores&quot; + ',' + str(Breakdown_Score))&amp;#10;                                            &amp;#10;def Trial_Analyses():&amp;#10;        trialdf = pd.read_csv('E:\MRes Data/Participant ' + directory + '/Participant Statistics.csv')&amp;#10;        trialdf.groupby(&quot;Trial Type&quot;)['Score'].describe()&amp;#10;        LC = trialdf[(trialdf['Trial Type'] == 'Low Conflict Trial')]&amp;#10;        GC = trialdf[(trialdf['Trial Type'] == 'High Conflict Trial')]&amp;#10;        Calibration_Analysis = trialdf[(trialdf['Trial Type'] == 'Calibration Trial')]&amp;#10;&amp;#10;        ttest = stats.ttest_ind(GC['Score'], LC['Score']).pvalue&amp;#10;        ttest2 = stats.ttest_ind(GC['Score'], Calibration_Analysis['Score']).pvalue&amp;#10;        ttest3 = stats.ttest_ind(Calibration_Analysis['Score'], LC['Score']).pvalue&amp;#10;&amp;#10;        with open('E:\MRes Data/Participant ' + directory + '/Statistical Analyses.csv', 'a+') as file:&amp;#10;            file.write('\n')&amp;#10;            file.write(&quot;Goal Conflict - Low Conflict&quot; + ',' + str(ttest))&amp;#10;            file.write('\n')&amp;#10;            file.write(&quot;Goal Conflict - Calibration&quot; + ',' + str(ttest2))&amp;#10;            file.write('\n')&amp;#10;            file.write(&quot;Low Conflict - Calibration&quot; + ',' + str(ttest3))&amp;#10;            &amp;#10;def GC():&amp;#10;      os.environ['SDL_VIDEO_CENTERED'] = '1'&amp;#10;      pygame.init()&amp;#10;      SCREEN_WIDTH, SCREEN_HEIGHT = pygame.display.Info().current_w, pygame.display.Info().current_h&amp;#10;      pygame.joystick.init&amp;#10;      pygame.init()&amp;#10;      pygame.font.init&amp;#10;&amp;#10;      size = [SCREEN_WIDTH,SCREEN_HEIGHT-50]&amp;#10;      #SCREEN_WIDTH = 1000&amp;#10;      #SCREEN_HEIGHT = 1000&amp;#10;      BLACK = (0, 0, 0)&amp;#10;      WHITE = (255, 255, 255)&amp;#10;      GREEN = (0, 255, 0)&amp;#10;      RED = (255, 0, 0)&amp;#10;      screen = pygame.display.set_mode(size, pygame.RESIZABLE)&amp;#10;&amp;#10;      #Calibration_SPEED = (input('Enter multiplier value'))&amp;#10;       &amp;#10;      pygame.display.set_caption(&quot;Task&quot;)&amp;#10;       &amp;#10;      # Loop until the user clicks the close button.&amp;#10;      done = False&amp;#10;       &amp;#10;      clock = pygame.time.Clock()&amp;#10;       &amp;#10;      # Starting position of the silhouette&amp;#10;      rect_x = 50&amp;#10;      rect_y = 50&amp;#10;       &amp;#10;      # Speed and direction of rectangle&amp;#10;      rect_change_x = 5&amp;#10;      rect_change_y = 5&amp;#10;       &amp;#10;      # font&amp;#10;      pygame.font.init&amp;#10;      font = pygame.font.Font(None, 32)&amp;#10;&amp;#10;      pygame.display.flip()&amp;#10;      screen.fill(BLACK)&amp;#10;&amp;#10;      # Draw the rectangle&amp;#10;      pygame.draw.rect(screen, RED, [rect_x, rect_y, 50, 50])&amp;#10;&amp;#10;      # Move the rectangle starting point&amp;#10;      rect_x += rect_change_x&amp;#10;      rect_y += rect_change_y&amp;#10;&amp;#10;      #Setting up FPS &amp;#10;      FPS = 60&amp;#10;      FramePerSec = pygame.time.Clock()&amp;#10;&amp;#10;      global GC_SPEED&amp;#10;      &amp;#10;      #Other Variables for use in the program&amp;#10;      #SCREEN_WIDTH = 1000&amp;#10;      #SCREEN_HEIGHT = 1000&amp;#10;      SPEED = GC_SPEED*1.05&amp;#10;      #SCORE = 0&amp;#10;      COLLISION_SCORE = 0&amp;#10;&amp;#10;      #Setting up Fonts&amp;#10;      font = pygame.font.SysFont(&quot;Verdana&quot;, 40)&amp;#10;      font_small = pygame.font.SysFont(&quot;Verdana&quot;, 20)&amp;#10;&amp;#10;      background = pygame.image.load(&quot;E:\Task Development\Stimuli/trial.jpeg&quot;)&amp;#10;&amp;#10;      #delay after the instruction screen&amp;#10;      pygame.time.wait(1000)&amp;#10;&amp;#10;      timer = pygame.time.get_ticks()&amp;#10;      timer2 = timer + 3000&amp;#10;&amp;#10;      #TASK GAME WINDOW SIZE&amp;#10;      DISPLAYSURF = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT), pygame.RESIZABLE)&amp;#10;      DISPLAYSURF.fill(WHITE)&amp;#10;      pygame.display.set_caption(&quot;EEG Task&quot;)&amp;#10;      pygame.mixer.init()&amp;#10;      SCORE = 0&amp;#10;      &amp;#10;      class Enemy(pygame.sprite.Sprite):&amp;#10;            def __init__(self):&amp;#10;              super().__init__() &amp;#10;              self.image = pygame.image.load(&quot;E:\Task Development\Stimuli/reddot.png&quot;)&amp;#10;              self.rect = self.image.get_rect()&amp;#10;      &amp;#10;              speedcalc = random.randint(1,3)&amp;#10;              if speedcalc == 1:&amp;#10;                  gcspeed = 0&amp;#10;              if speedcalc == 2:&amp;#10;                  gcspeed = 20&amp;#10;              if speedcalc == 3:&amp;#10;                  gcspeed = 70&amp;#10;&amp;#10;              print (speedcalc , &quot;(GC)&quot;)&amp;#10;          &amp;#10;              self.rect.center = ((SCREEN_WIDTH/2), gcspeed)&amp;#10;            def move(self):&amp;#10;              global SCORE&amp;#10;              self.rect.move_ip(0,SPEED*1.2)&amp;#10;              if (self.rect.bottom &gt; SCREEN_HEIGHT-10):&amp;#10;                  SCORE += 1&amp;#10;                  pygame.mixer.Sound(&quot;E:\Task Development\Stimuli/spawn.wav&quot;).play()&amp;#10;                  self.rect.top = 0&amp;#10;                  self.rect.center = ((SCREEN_WIDTH/2), -SCREEN_HEIGHT)&amp;#10;              global COLLISION_SCORE&amp;#10;&amp;#10;      class Enemy2(pygame.sprite.Sprite):&amp;#10;            def __init__(self):&amp;#10;              super().__init__() &amp;#10;              self.image = pygame.image.load(&quot;E:\Task Development\Stimuli/reddot.png&quot;)&amp;#10;              self.rect = self.image.get_rect()&amp;#10;              self.rect.center = ((SCREEN_WIDTH/2), 0)&amp;#10;            def move(self):&amp;#10;              global SCORE&amp;#10;              self.rect.move_ip(0,(-SPEED*0.6))&amp;#10;              SCORE = 0&amp;#10;              if (self.rect.top &lt; 10):&amp;#10;                  SCORE += 1&amp;#10;                  pygame.mixer.Sound(&quot;E:\Task Development\Stimuli/spawn.wav&quot;).play()&amp;#10;                  self.rect.top = 0&amp;#10;                  self.rect.center = ((SCREEN_WIDTH/2), SCREEN_HEIGHT)&amp;#10;              global COLLISION_SCORE&amp;#10;&amp;#10;      class Player(pygame.sprite.Sprite):&amp;#10;          def __init__(self):&amp;#10;&amp;#10;              super().__init__()&amp;#10;       &amp;#10;              # Variables to hold the height and width of the block&amp;#10;              width = 10&amp;#10;              height = 15&amp;#10;       &amp;#10;              # silhouette image&amp;#10;              self.image = pygame.image.load(&quot;E:\Task Development/Stimuli/greendot.png&quot;)&amp;#10;              &amp;#10;       &amp;#10;              # Fetch the rectangle object that has the dimensions of the image&amp;#10;              self.rect = self.image.get_rect()&amp;#10;       &amp;#10;              # Set initial position of silhouette&amp;#10;              self.rect.x = SCREEN_WIDTH/2-80&amp;#10;              self.rect.y = SCREEN_HEIGHT/2              &amp;#10;&amp;#10;              # joystick count&amp;#10;              self.joystick_count = pygame.joystick.get_count()&amp;#10;              if self.joystick_count == 0:&amp;#10;                  # No joysticks!&amp;#10;                  print(&quot;Check joystick connection&quot;)&amp;#10;              else:&amp;#10;                  # Use joystick #0 and initialize it&amp;#10;                  self.my_joystick = pygame.joystick.Joystick(0)&amp;#10;                  self.my_joystick.init()&amp;#10;       &amp;#10;          def move(self):&amp;#10;              &amp;#10;              if self.joystick_count != 0:&amp;#10;       &amp;#10;                  # joystick pos&amp;#10;                  horiz_axis_pos = self.my_joystick.get_axis(0)&amp;#10;                  vert_axis_pos = self.my_joystick.get_axis(1)&amp;#10;       &amp;#10;                  # Move x and y, * speed &amp;#10;                  self.rect.x = self.rect.x+int(horiz_axis_pos*int(0))&amp;#10;                  self.rect.y = self.rect.y+int(vert_axis_pos*int(Calibration_SPEED))&amp;#10;                  #self.rect.y = self.rect.y+int(vert_axis_pos*int(0))                  &amp;#10;&amp;#10;      #Setting up Sprites        &amp;#10;      P1 = Player()&amp;#10;      E1 = Enemy()&amp;#10;      E2 = Enemy2()&amp;#10;&amp;#10;      #Creating Sprite Groups&amp;#10;      enemies = pygame.sprite.Group()&amp;#10;      enemies.add(E1)&amp;#10;      enemies.add(E2)&amp;#10;      all_sprites = pygame.sprite.Group()&amp;#10;      all_sprites.add(P1)&amp;#10;      all_sprites.add(E1)&amp;#10;      all_sprites.add(E2)&amp;#10;&amp;#10;      #Adding a new User event (speed up)&amp;#10;      INC_SPEED = pygame.USEREVENT + 1&amp;#10;      pygame.time.set_timer(INC_SPEED, 1000)&amp;#10;&amp;#10;      for entity in all_sprites:&amp;#10;        entity.move()&amp;#10;        DISPLAYSURF.blit(entity.image, entity.rect)&amp;#10;&amp;#10;      #Game Loop&amp;#10;      for line in range(4,5):&amp;#10;                dev.activate_line(lines = line)&amp;#10;                &amp;#10;      COLLISION_SCORE2 = COLLISION_SCORE/20&amp;#10;      Game_Running = True&amp;#10;      starterRT = time.time()&amp;#10;      counter = 0&amp;#10;             &amp;#10;      while Game_Running:&amp;#10;                #Cycles through all events occuring      &amp;#10;                pygame.init()&amp;#10;                for event in pygame.event.get():&amp;#10;&amp;#10;                    if event.type == QUIT:                                               &amp;#10;                        pygame.display.quit()&amp;#10;                        #win.flip()&amp;#10;                pygame.event.pump()&amp;#10;                joystick = pygame.joystick.Joystick(0)&amp;#10;                &amp;#10;                yaxis = joystick.get_axis(1)&amp;#10;             &amp;#10;                while yaxis &gt; 0.2 or yaxis &lt; -0.2:&amp;#10;                    finishedRT = time.time()  &amp;#10;                    ReactionTime = finishedRT - starterRT&amp;#10;                    counter = counter + 1                    &amp;#10;                    break    &amp;#10;                &amp;#10;                if counter == 2:                    &amp;#10;                    data = {'Type':['GC Trial'], 'Reaction Time': [ReactionTime]}&amp;#10;                    Reactiondf = pd.DataFrame(data)&amp;#10;                    #print (&quot;Counter value: &quot; + str(counter))&amp;#10;                    with open('E:\MRes Data/Participant ' + directory + '/Calibration Score.csv', 'a+') as file:&amp;#10;                      file.write('\n')&amp;#10;                      file.write(&quot;GC&quot; + ',' + str(yaxis))&amp;#10;                    #print (Reactiondf)&amp;#10;                    Reactiondf.to_csv('E:\MRes Data/Participant ' + directory + '/Reaction Time.csv', mode='a', header=False)&amp;#10;&amp;#10;                pygame.event.pump()&amp;#10;                DISPLAYSURF.blit(background, (0,0))&amp;#10;                scores = font_small.render(str(SCORE), True, WHITE)&amp;#10;                DISPLAYSURF.blit(scores, (10,10))&amp;#10;&amp;#10;                #COLLISION_SCORE2 = COLLISION_SCORE/20&amp;#10;                &amp;#10;                cscores = font_small.render(str(COLLISION_SCORE2), True, WHITE)&amp;#10;                DISPLAYSURF.blit(cscores, (SCREEN_WIDTH-60, 10))&amp;#10;&amp;#10;                #Moves and Re-draws all Sprites&amp;#10;                for entity in all_sprites:&amp;#10;                    entity.move()&amp;#10;                    DISPLAYSURF.blit(entity.image, entity.rect)&amp;#10;                    &amp;#10;                #To be run if collision happens&amp;#10;                if pygame.sprite.spritecollideany(P1, enemies):&amp;#10;                    pygame.mixer.Sound(&quot;E:\Task Development\Stimuli/scream.wav&quot;).play()&amp;#10;                    COLLISION_SCORE = 1  &amp;#10;                     &amp;#10;                timer = pygame.time.get_ticks()&amp;#10;                if timer &gt; timer2:&amp;#10;                    pygame.init()     &amp;#10;&amp;#10;                    for line in range(4,5):&amp;#10;                        dev.activate_line(lines = line)&amp;#10;                    &amp;#10;                    #pygame.display.quit()&amp;#10;                    for entity in all_sprites:&amp;#10;                            entity.kill()&amp;#10;                    DISPLAYSURF.blit(background, (0,0))&amp;#10;                    pygame.display.update()&amp;#10;                    if COLLISION_SCORE == 1:&amp;#10;                       negativefeedback = pygame.image.load(&quot;E:\Task Development\Stimuli/redcross.png&quot;)&amp;#10;                       negrect = negativefeedback.get_rect(center = screen.get_rect().center)&amp;#10;                       DISPLAYSURF.blit(negativefeedback, negrect)&amp;#10;                       &amp;#10;                    else:&amp;#10;                       positivefeedback = pygame.image.load(&quot;E:\Task Development\Stimuli/greentick.png&quot;)&amp;#10;                       posrect = positivefeedback.get_rect(center = screen.get_rect().center)&amp;#10;                       DISPLAYSURF.blit(positivefeedback, posrect)&amp;#10;                       &amp;#10;                    pygame.time.wait(1000)&amp;#10;                    pygame.display.update()&amp;#10;&amp;#10;                    interval = pygame.image.load(&quot;E:\Task Development\Stimuli/interval.png&quot;)&amp;#10;                    intervaldimensions = interval.get_rect(center = screen.get_rect().center)&amp;#10;                    DISPLAYSURF.blit(interval, intervaldimensions)&amp;#10;                    &amp;#10;                    pygame.time.wait(1000)&amp;#10;                    pygame.display.update()&amp;#10;                    &amp;#10;                    with open('E:\MRes Data/Participant ' + directory + '/Participant Statistics.csv', 'a+') as file:&amp;#10;                      file.write('\n')&amp;#10;                      file.write(&quot;High Conflict Trial&quot; + ',' + str(COLLISION_SCORE))&amp;#10;                    &amp;#10;                    #Reactiondf.to_csv('E:\MRes Data/Participant ' + directory + '/Reaction Time.csv', mode='a', header=False)&amp;#10;                      &amp;#10;                    Game_Running = False&amp;#10;&amp;#10;                    pygame.display.flip()&amp;#10;                    pygame.time.wait(1000)&amp;#10;&amp;#10;                pygame.display.update()&amp;#10;                FramePerSec.tick(FPS)&amp;#10;&amp;#10;def LC():&amp;#10;      global GC_SPEED&amp;#10;      os.environ['SDL_VIDEO_CENTERED'] = '1'&amp;#10;      pygame.init()&amp;#10;      SCREEN_WIDTH, SCREEN_HEIGHT = pygame.display.Info().current_w, pygame.display.Info().current_h&amp;#10;      pygame.joystick.init&amp;#10;      &amp;#10;      pygame.init()&amp;#10;&amp;#10;      pygame.font.init&amp;#10;&amp;#10;      size = [SCREEN_WIDTH,SCREEN_HEIGHT-50]&amp;#10;      #SCREEN_WIDTH = 1000&amp;#10;      #SCREEN_HEIGHT = 1000&amp;#10;      BLACK = (0, 0, 0)&amp;#10;      WHITE = (255, 255, 255)&amp;#10;      GREEN = (0, 255, 0)&amp;#10;      RED = (255, 0, 0)&amp;#10;      screen = pygame.display.set_mode(size, pygame.RESIZABLE)&amp;#10;       &amp;#10;      pygame.display.set_caption(&quot;Task&quot;)&amp;#10;       &amp;#10;      # Loop until the user clicks the close button.&amp;#10;      done = False       &amp;#10;      clock = pygame.time.Clock()&amp;#10;       &amp;#10;      # Starting position of the silhouette&amp;#10;      rect_x = 50&amp;#10;      rect_y = 50&amp;#10;       &amp;#10;      # Speed and direction of rectangle&amp;#10;      rect_change_x = 5&amp;#10;      rect_change_y = 5&amp;#10;       &amp;#10;      # font&amp;#10;      pygame.font.init&amp;#10;      font = pygame.font.Font(None, 32)&amp;#10;&amp;#10;      pygame.display.flip()&amp;#10;      screen.fill(BLACK)&amp;#10;&amp;#10;      # Draw the rectangle&amp;#10;      pygame.draw.rect(screen, RED, [rect_x, rect_y, 50, 50])&amp;#10;&amp;#10;      # Move the rectangle starting point&amp;#10;      rect_x += rect_change_x&amp;#10;      rect_y += rect_change_y&amp;#10;&amp;#10;      #Setting up FPS &amp;#10;      FPS = 60&amp;#10;      FramePerSec = pygame.time.Clock()&amp;#10;      #Other Variables for use in the program&amp;#10;      #SCREEN_WIDTH = 1000&amp;#10;      #SCREEN_HEIGHT = 1000&amp;#10;      &amp;#10;      global GC_SPEED&amp;#10;      SPEED = GC_SPEED * 0.59&amp;#10;      #SCORE = 0&amp;#10;      COLLISION_SCORE = 0&amp;#10;&amp;#10;      #Setting up Fonts&amp;#10;      font = pygame.font.SysFont(&quot;Verdana&quot;, 40)&amp;#10;      font_small = pygame.font.SysFont(&quot;Verdana&quot;, 20)&amp;#10;&amp;#10;      background = pygame.image.load(&quot;E:\Task Development\Stimuli/trial.jpeg&quot;)&amp;#10;&amp;#10;      #delay after the instruction screen&amp;#10;      pygame.time.wait(1000)&amp;#10;&amp;#10;      timer = pygame.time.get_ticks()&amp;#10;      timer2 = timer + 3000&amp;#10;&amp;#10;      #TASK GAME WINDOW SIZE&amp;#10;      DISPLAYSURF = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT), pygame.RESIZABLE)&amp;#10;      DISPLAYSURF.fill(WHITE)&amp;#10;      pygame.display.set_caption(&quot;EEG Task&quot;)&amp;#10;      pygame.mixer.init()&amp;#10;      SCORE = 0&amp;#10;      class Enemy(pygame.sprite.Sprite):&amp;#10;            def __init__(self):&amp;#10;              super().__init__() &amp;#10;              self.image = pygame.image.load(&quot;E:\Task Development\Stimuli/reddot.png&quot;)&amp;#10;              self.rect = self.image.get_rect()&amp;#10;              ################################################################################&amp;#10;      &amp;#10;              speedcalc = random.randint(1,3)&amp;#10;              if speedcalc == 1:&amp;#10;                  gcspeed = 0&amp;#10;              if speedcalc == 2:&amp;#10;                  gcspeed = 30&amp;#10;              if speedcalc == 3:&amp;#10;                  gcspeed = 50&amp;#10;&amp;#10;              print (speedcalc , &quot;(LC)&quot;)&amp;#10;          &amp;#10;              self.rect.center = ((SCREEN_WIDTH/2), gcspeed)&amp;#10;            def move(self):&amp;#10;              global SCORE&amp;#10;              self.rect.move_ip(0,SPEED*1.1)&amp;#10;              if (self.rect.bottom &gt; SCREEN_HEIGHT-10):&amp;#10;                  SCORE += 1&amp;#10;                  pygame.mixer.Sound(&quot;E:\Task Development\Stimuli/spawn.wav&quot;).play()&amp;#10;                  self.rect.top = 0&amp;#10;                  self.rect.center = ((SCREEN_WIDTH/2), -SCREEN_HEIGHT)&amp;#10;              global COLLISION_SCORE&amp;#10;&amp;#10;      class Enemy2(pygame.sprite.Sprite):&amp;#10;            def __init__(self):&amp;#10;              super().__init__() &amp;#10;              self.image = pygame.image.load(&quot;E:\Task Development\Stimuli/reddot.png&quot;)&amp;#10;              self.rect = self.image.get_rect()&amp;#10;              self.rect.center = ((SCREEN_WIDTH/2), 0)&amp;#10;            def move(self):&amp;#10;              global SCORE&amp;#10;              self.rect.move_ip(0,((-SPEED)-0.35))&amp;#10;              SCORE = 0&amp;#10;              if (self.rect.top &lt; 10):&amp;#10;                  SCORE += 1&amp;#10;                  pygame.mixer.Sound(&quot;E:\Task Development\Stimuli/spawn.wav&quot;).play()&amp;#10;                  self.rect.top = 0&amp;#10;                  self.rect.center = ((SCREEN_WIDTH/2), SCREEN_HEIGHT)&amp;#10;              global COLLISION_SCORE&amp;#10;&amp;#10;      class Player(pygame.sprite.Sprite):&amp;#10;          def __init__(self):&amp;#10;&amp;#10;              super().__init__()&amp;#10;       &amp;#10;              # Variables to hold the height and width of the block&amp;#10;              width = 10&amp;#10;              height = 15&amp;#10;       &amp;#10;              # silhouette image&amp;#10;              self.image = pygame.image.load(&quot;E:\Task Development/Stimuli/greendot.png&quot;)&amp;#10;              &amp;#10;       &amp;#10;              # Fetch the rectangle object that has the dimensions of the image&amp;#10;              self.rect = self.image.get_rect()&amp;#10;       &amp;#10;              # Set initial position of silhouette&amp;#10;              self.rect.x = SCREEN_WIDTH/2-80&amp;#10;              self.rect.y = SCREEN_HEIGHT/2.5&amp;#10;&amp;#10;              # joystick count&amp;#10;              self.joystick_count = pygame.joystick.get_count()&amp;#10;              if self.joystick_count == 0:&amp;#10;                  # No joysticks!&amp;#10;                  print(&quot;Check joystick connection&quot;)&amp;#10;              else:&amp;#10;                  # Use joystick #0 and initialize it&amp;#10;                  self.my_joystick = pygame.joystick.Joystick(0)&amp;#10;                  self.my_joystick.init()&amp;#10;       &amp;#10;          def move(self):&amp;#10;              &amp;#10;              if self.joystick_count != 0:&amp;#10;       &amp;#10;                  # joystick pos&amp;#10;                  horiz_axis_pos = self.my_joystick.get_axis(0)&amp;#10;                  vert_axis_pos = self.my_joystick.get_axis(1)&amp;#10;       &amp;#10;                  # Move x and y, * speed &amp;#10;                  self.rect.x = self.rect.x+int(horiz_axis_pos*int(0))&amp;#10;                  self.rect.y = self.rect.y+int(vert_axis_pos*int(Calibration_SPEED))&amp;#10;                  #self.rect.y = self.rect.y+int(vert_axis_pos*int(0))&amp;#10;&amp;#10;      #Setting up Sprites        &amp;#10;      P1 = Player()&amp;#10;      E1 = Enemy()&amp;#10;      E2 = Enemy2()&amp;#10;&amp;#10;      #Creating Sprite Groups&amp;#10;      enemies = pygame.sprite.Group()&amp;#10;      enemies.add(E1)&amp;#10;      enemies.add(E2)&amp;#10;      all_sprites = pygame.sprite.Group()&amp;#10;      all_sprites.add(P1)&amp;#10;      all_sprites.add(E1)&amp;#10;      all_sprites.add(E2)&amp;#10;&amp;#10;      #Adding a new User event (speed up)&amp;#10;      INC_SPEED = pygame.USEREVENT + 1&amp;#10;      pygame.time.set_timer(INC_SPEED, 1000)&amp;#10;&amp;#10;      #Game Loop&amp;#10;      for line in range(5,6):&amp;#10;                   dev.activate_line(lines = line)&amp;#10;&amp;#10;      COLLISION_SCORE2 = COLLISION_SCORE/20&amp;#10;&amp;#10;      starterRT = time.time()&amp;#10;      counter = 0&amp;#10;&amp;#10;      Game_Running = True&amp;#10;      while Game_Running:&amp;#10;                #Cycles through all events occuring      &amp;#10;                pygame.init()&amp;#10;                pygame.joystick.init()&amp;#10;                &amp;#10;                for event in pygame.event.get():&amp;#10;                    if event.type == QUIT:                      &amp;#10;                        pygame.display.quit()&amp;#10;&amp;#10;                pygame.event.pump()&amp;#10;                joystick = pygame.joystick.Joystick(0)&amp;#10;                &amp;#10;                yaxis = joystick.get_axis(1)&amp;#10;             &amp;#10;                while yaxis &gt; 0.2 or yaxis &lt; -0.2:&amp;#10;                    finishedRT = time.time()  &amp;#10;                    ReactionTime = finishedRT - starterRT&amp;#10;                    counter = counter + 1                    &amp;#10;                    break    &amp;#10;                &amp;#10;                if counter == 2:&amp;#10;                    &amp;#10;                    data = {'Type':['LC Trial'], 'Reaction Time': [ReactionTime]}&amp;#10;                    Reactiondf = pd.DataFrame(data)&amp;#10;                    #print (&quot;Counter value: &quot; + str(counter))&amp;#10;                    with open('E:\MRes Data/Participant ' + directory + '/Calibration Score.csv', 'a+') as file:&amp;#10;                      file.write('\n')&amp;#10;                      file.write(&quot;LC&quot; + ',' + str(yaxis))&amp;#10;                    #print (Reactiondf)&amp;#10;                    Reactiondf.to_csv('E:\MRes Data/Participant ' + directory + '/Reaction Time.csv', mode='a', header=False)&amp;#10;                 &amp;#10;                pygame.event.pump()&amp;#10;&amp;#10;                DISPLAYSURF.blit(background, (0,0))&amp;#10;                scores = font_small.render(str(SCORE), True, WHITE)&amp;#10;                DISPLAYSURF.blit(scores, (10,10))&amp;#10;&amp;#10;                #COLLISION_SCORE2 = COLLISION_SCORE/20&amp;#10;                &amp;#10;                cscores = font_small.render(str(COLLISION_SCORE2), True, WHITE)&amp;#10;                DISPLAYSURF.blit(cscores, (SCREEN_WIDTH-60, 10))&amp;#10;&amp;#10;                #Moves and Re-draws all Sprites&amp;#10;                for entity in all_sprites:&amp;#10;                    entity.move()&amp;#10;                    DISPLAYSURF.blit(entity.image, entity.rect)&amp;#10;                    &amp;#10;                #To be run if collision happens&amp;#10;                if pygame.sprite.spritecollideany(P1, enemies):&amp;#10;                    pygame.mixer.Sound(&quot;E:\Task Development\Stimuli/scream.wav&quot;).play()&amp;#10;                    COLLISION_SCORE = 1  &amp;#10;                     &amp;#10;                timer = pygame.time.get_ticks()&amp;#10;                if timer &gt; timer2:&amp;#10;                    pygame.init()&amp;#10;                    &amp;#10;                    for line in range(5,6):&amp;#10;                        dev.activate_line(lines = line)&amp;#10;                    &amp;#10;                    #pygame.display.quit()&amp;#10;                    for entity in all_sprites:&amp;#10;                            entity.kill()&amp;#10;                    DISPLAYSURF.blit(background, (0,0))&amp;#10;                    pygame.display.update()&amp;#10;                    if COLLISION_SCORE == 1:&amp;#10;                        &amp;#10;                       negativefeedback = pygame.image.load(&quot;E:\Task Development\Stimuli/redcross.png&quot;)&amp;#10;                       negrect = negativefeedback.get_rect(center = screen.get_rect().center)&amp;#10;                       DISPLAYSURF.blit(negativefeedback, negrect)&amp;#10;                    else:&amp;#10;                        &amp;#10;                       positivefeedback = pygame.image.load(&quot;E:\Task Development\Stimuli/greentick.png&quot;)&amp;#10;                       posrect = positivefeedback.get_rect(center = screen.get_rect().center)&amp;#10;                       DISPLAYSURF.blit(positivefeedback, posrect)                    &amp;#10;                       &amp;#10;                    pygame.time.wait(1000)&amp;#10;                    pygame.display.update()&amp;#10;                    &amp;#10;                    with open('E:\MRes Data/Participant ' + directory + '/Participant Statistics.csv', 'a+') as file:&amp;#10;                      file.write('\n')&amp;#10;                      file.write(&quot;Low Conflict Trial&quot; + ',' + str(COLLISION_SCORE))&amp;#10;                    #Reactiondf.to_csv('E:\MRes Data/Participant ' + directory + '/Reaction Time.csv', mode='a', header=False)&amp;#10;&amp;#10;                    Game_Running = False&amp;#10;&amp;#10;                    pygame.display.flip()&amp;#10;                    pygame.time.wait(1000)&amp;#10;&amp;#10;                pygame.display.update()&amp;#10;                FramePerSec.tick(FPS)&amp;#10;&amp;#10;def CB():&amp;#10;&amp;#10;      os.environ['SDL_VIDEO_CENTERED'] = '1'&amp;#10;      pygame.init()&amp;#10;      SCREEN_WIDTH, SCREEN_HEIGHT = pygame.display.Info().current_w, pygame.display.Info().current_h&amp;#10;      pygame.joystick.init&amp;#10;      &amp;#10;      pygame.init()&amp;#10;&amp;#10;      pygame.font.init&amp;#10;&amp;#10;      size = [SCREEN_WIDTH,SCREEN_HEIGHT-50]&amp;#10;      #SCREEN_WIDTH = 1000&amp;#10;      #SCREEN_HEIGHT = 1000&amp;#10;      BLACK = (0, 0, 0)&amp;#10;      WHITE = (255, 255, 255)&amp;#10;      GREEN = (0, 255, 0)&amp;#10;      RED = (255, 0, 0)&amp;#10;      screen = pygame.display.set_mode(size, pygame.RESIZABLE)&amp;#10;&amp;#10;      pygame.display.set_caption(&quot;Task&quot;)&amp;#10;       &amp;#10;      # Loop until the user clicks the close button.&amp;#10;      done = False&amp;#10;       &amp;#10;      clock = pygame.time.Clock()&amp;#10;       &amp;#10;      # Starting position of the silhouette&amp;#10;      rect_x = 50&amp;#10;      rect_y = 50&amp;#10;       &amp;#10;      # Speed and direction of rectangle&amp;#10;      rect_change_x = 5&amp;#10;      rect_change_y = 5&amp;#10;       &amp;#10;      # font&amp;#10;      pygame.font.init&amp;#10;      font = pygame.font.Font(None, 32)&amp;#10;&amp;#10;      pygame.display.flip()&amp;#10;      screen.fill(BLACK)&amp;#10;&amp;#10;      # Draw the rectangle&amp;#10;      pygame.draw.rect(screen, RED, [rect_x, rect_y, 50, 50])&amp;#10;&amp;#10;      # Move the rectangle starting point&amp;#10;      rect_x += rect_change_x&amp;#10;      rect_y += rect_change_y&amp;#10;&amp;#10;      #Setting up FPS &amp;#10;      FPS = 160&amp;#10;      FramePerSec = pygame.time.Clock()&amp;#10;      #Other Variables for use in the program&amp;#10;      #SCREEN_WIDTH = 1000&amp;#10;      #SCREEN_HEIGHT = 1000&amp;#10;      global GC_SPEED&amp;#10;      SPEED = GC_SPEED-0.25&amp;#10;      #SCORE = 0&amp;#10;      COLLISION_SCORE = 0&amp;#10;&amp;#10;      #Setting up Fonts&amp;#10;      font = pygame.font.SysFont(&quot;Verdana&quot;, 40)&amp;#10;      font_small = pygame.font.SysFont(&quot;Verdana&quot;, 20)&amp;#10;&amp;#10;      background = pygame.image.load(&quot;E:\Task Development\Stimuli/trial.jpeg&quot;)&amp;#10;&amp;#10;      #delay after the instruction screen&amp;#10;      pygame.time.wait(1000)&amp;#10;&amp;#10;      timer = pygame.time.get_ticks()&amp;#10;      timer2 = timer + 3000&amp;#10;&amp;#10;      #TASK GAME WINDOW SIZE&amp;#10;      DISPLAYSURF = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT), pygame.RESIZABLE)&amp;#10;      DISPLAYSURF.fill(WHITE)&amp;#10;      pygame.display.set_caption(&quot;EEG Task&quot;)&amp;#10;      pygame.mixer.init()&amp;#10;      global SCORE&amp;#10;      SCORE = 0&amp;#10;      class Enemy(pygame.sprite.Sprite):&amp;#10;            def __init__(self):&amp;#10;              super().__init__() &amp;#10;              self.image = pygame.image.load(&quot;E:\Task Development\Stimuli/reddot.png&quot;)&amp;#10;              self.rect = self.image.get_rect()&amp;#10;              self.rect.center = ((SCREEN_WIDTH/2), 0)&amp;#10;            def move(self):&amp;#10;              global SCORE&amp;#10;              self.rect.move_ip(0,SPEED)&amp;#10;              if (self.rect.bottom &gt; SCREEN_HEIGHT-10):&amp;#10;                  SCORE += 1&amp;#10;                  pygame.mixer.Sound(&quot;E:\Task Development\Stimuli/spawn.wav&quot;).play()&amp;#10;                  self.rect.move_ip(0,-SPEED)&amp;#10;                  self.rect.top = 0&amp;#10;                  self.rect.center = ((SCREEN_WIDTH/2), -SCREEN_HEIGHT)&amp;#10;              global COLLISION_SCORE&amp;#10;&amp;#10;      class Player(pygame.sprite.Sprite):&amp;#10;          def __init__(self):&amp;#10;&amp;#10;              super().__init__()&amp;#10;       &amp;#10;              # Variables to hold the height and width of the block&amp;#10;              width = 10&amp;#10;              height = 15&amp;#10;       &amp;#10;              # silhouette image&amp;#10;              self.image = pygame.image.load(&quot;E:\Task Development/Stimuli/greendot.png&quot;)&amp;#10;              &amp;#10;       &amp;#10;              # Fetch the rectangle object that has the dimensions of the image&amp;#10;              self.rect = self.image.get_rect()&amp;#10;       &amp;#10;              # Set initial position of silhouette&amp;#10;              self.rect.x = SCREEN_WIDTH/2-80&amp;#10;              self.rect.y = SCREEN_HEIGHT/2-80&amp;#10;&amp;#10;              # joystick count&amp;#10;              self.joystick_count = pygame.joystick.get_count()&amp;#10;              if self.joystick_count == 0:&amp;#10;                  # No joysticks!&amp;#10;                  print(&quot;Check joystick connection&quot;)&amp;#10;              else:&amp;#10;                  # Use joystick #0 and initialize it&amp;#10;                  self.my_joystick = pygame.joystick.Joystick(0)&amp;#10;                  self.my_joystick.init()&amp;#10;       &amp;#10;          def move(self):&amp;#10;              if self.joystick_count != 0:&amp;#10;       &amp;#10;                  # joystick pos&amp;#10;                  horiz_axis_pos = self.my_joystick.get_axis(0)&amp;#10;                  vert_axis_pos = self.my_joystick.get_axis(1)&amp;#10;       &amp;#10;                  # Move x and y, * speed &amp;#10;                  self.rect.x = self.rect.x+int(horiz_axis_pos*int(0))&amp;#10;                  self.rect.y = self.rect.y+int(vert_axis_pos*int(4))&amp;#10;                  #self.rect.y = self.rect.y+int(vert_axis_pos*int(0))&amp;#10;&amp;#10;      #Setting up Sprites        &amp;#10;      P1 = Player()&amp;#10;      E1 = Enemy()&amp;#10;&amp;#10;      #Creating Sprite Groups&amp;#10;      enemies = pygame.sprite.Group()&amp;#10;      enemies.add(E1)&amp;#10;      #enemies.add(E2)&amp;#10;      all_sprites = pygame.sprite.Group()&amp;#10;      all_sprites.add(P1)&amp;#10;      all_sprites.add(E1)&amp;#10;&amp;#10;      #Adding a new User event (speed up)&amp;#10;      INC_SPEED = pygame.USEREVENT + 1&amp;#10;      pygame.time.set_timer(INC_SPEED, 1000)&amp;#10;&amp;#10;      #Game Loop&amp;#10;      for line in range(1,2):&amp;#10;                   dev.activate_line(lines = line)&amp;#10;&amp;#10;      COLLISION_SCORE2 = COLLISION_SCORE/20&amp;#10;      joystick = pygame.joystick.Joystick(0)&amp;#10;      &amp;#10;      starterRT = time.time()&amp;#10;      counter = 0&amp;#10; &amp;#10;      Game_Running = True&amp;#10;      while Game_Running:&amp;#10;                &amp;#10;                pygame.joystick.init()&amp;#10;                joystick = pygame.joystick.Joystick(0)&amp;#10;                yaxis = joystick.get_axis(1)&amp;#10;                   &amp;#10;                for event in pygame.event.get():&amp;#10;&amp;#10;                    if event.type == QUIT:                        &amp;#10;                        pygame.display.quit()                    &amp;#10;                &amp;#10;                pygame.event.pump()&amp;#10;                joystick = pygame.joystick.Joystick(0)&amp;#10;                &amp;#10;                yaxis = joystick.get_axis(1)&amp;#10;             &amp;#10;                while yaxis &gt; 0.2 or yaxis &lt; -0.2:&amp;#10;                    finishedRT = time.time()  &amp;#10;                    ReactionTime = finishedRT - starterRT&amp;#10;                    counter = counter + 1                    &amp;#10;                    break    &amp;#10;                &amp;#10;                if counter == 2:&amp;#10;                    &amp;#10;                    data = {'Type':['Calibration Trial'], 'Reaction Time': [ReactionTime]}&amp;#10;                    Reactiondf = pd.DataFrame(data)&amp;#10;                    Reactiondf.to_csv('E:\MRes Data/Participant ' + directory + '/Reaction Time.csv', mode='a', header=False)&amp;#10;&amp;#10;                    with open('E:\MRes Data/Participant ' + directory + '/Calibration Score.csv', 'a+') as file:&amp;#10;                      file.write('\n')&amp;#10;                      file.write(&quot;Calibration&quot; + ',' + str(yaxis))&amp;#10;&amp;#10;                pygame.event.pump()&amp;#10;                DISPLAYSURF.blit(background, (0,0))&amp;#10;                scores = font_small.render(str(SCORE), True, WHITE)&amp;#10;                DISPLAYSURF.blit(scores, (10,10))&amp;#10;&amp;#10;                #COLLISION_SCORE2 = COLLISION_SCORE/20&amp;#10;                &amp;#10;                cscores = font_small.render(str(COLLISION_SCORE2), True, WHITE)&amp;#10;                DISPLAYSURF.blit(cscores, (SCREEN_WIDTH-60, 10))&amp;#10;&amp;#10;                #Moves and Re-draws all Sprites&amp;#10;                for entity in all_sprites:&amp;#10;                    entity.move()&amp;#10;                    DISPLAYSURF.blit(entity.image, entity.rect)                    &amp;#10;&amp;#10;                #To be run if collision happens&amp;#10;                if pygame.sprite.spritecollideany(P1, enemies):&amp;#10;                   pygame.mixer.Sound(&quot;E:\Task Development\Stimuli/scream.wav&quot;).play()&amp;#10;                   COLLISION_SCORE = 1  &amp;#10;                   &amp;#10;                timer = pygame.time.get_ticks()&amp;#10;                if timer &gt; timer2:   &amp;#10;                    axis2 = joystick.get_axis(1)                   &amp;#10;                    pygame.init()&amp;#10;                                              &amp;#10;                    &amp;#10;                    #pygame.display.quit()&amp;#10;                    for entity in all_sprites:&amp;#10;                            entity.kill()&amp;#10;                    DISPLAYSURF.blit(background, (0,0))&amp;#10;                    pygame.display.update()&amp;#10;                    &amp;#10;                    if COLLISION_SCORE == 1:&amp;#10;                       negativefeedback = pygame.image.load(&quot;E:\Task Development\Stimuli/redcross.png&quot;)&amp;#10;                       negrect = negativefeedback.get_rect(center = screen.get_rect().center)&amp;#10;                       DISPLAYSURF.blit(negativefeedback, negrect)&amp;#10;                    else:&amp;#10;                       positivefeedback = pygame.image.load(&quot;E:\Task Development\Stimuli/greentick.png&quot;)&amp;#10;                       posrect = positivefeedback.get_rect(center = screen.get_rect().center)&amp;#10;                       DISPLAYSURF.blit(positivefeedback, posrect)&amp;#10;                       &amp;#10;                    pygame.time.wait(1000)&amp;#10;                    pygame.display.update()&amp;#10;                    &amp;#10;                    with open('E:\MRes Data/Participant ' + directory + '/Participant Statistics.csv', 'a+') as file:&amp;#10;                      file.write('\n')&amp;#10;                      file.write(&quot;Calibration Trial&quot; + ',' + str(COLLISION_SCORE))&amp;#10;&amp;#10;                    joystick = pygame.joystick.Joystick(0)&amp;#10;                    joystick.init()&amp;#10;                    &amp;#10;                    Game_Running = False&amp;#10;&amp;#10;                    pygame.display.flip()&amp;#10;                    pygame.time.wait(1000)&amp;#10;                    &amp;#10;                pygame.display.update()&amp;#10;                FramePerSec.tick(FPS)&amp;#10;&amp;#10;def CB_Full():&amp;#10;&amp;#10;      os.environ['SDL_VIDEO_CENTERED'] = '1'&amp;#10;      pygame.init()&amp;#10;      SCREEN_WIDTH, SCREEN_HEIGHT = pygame.display.Info().current_w, pygame.display.Info().current_h&amp;#10;      pygame.joystick.init()&amp;#10;&amp;#10;      pygame.font.init&amp;#10;&amp;#10;      size = [SCREEN_WIDTH,SCREEN_HEIGHT-50]&amp;#10;      #SCREEN_WIDTH = 1000&amp;#10;      #SCREEN_HEIGHT = 1000&amp;#10;      BLACK = (0, 0, 0)&amp;#10;      WHITE = (255, 255, 255)&amp;#10;      GREEN = (0, 255, 0)&amp;#10;      RED = (255, 0, 0)&amp;#10;      screen = pygame.display.set_mode(size, pygame.RESIZABLE)&amp;#10;&amp;#10;      pygame.display.set_caption(&quot;Task&quot;)&amp;#10;       &amp;#10;      # Loop until the user clicks the close button.&amp;#10;      done = False&amp;#10;       &amp;#10;      clock = pygame.time.Clock()&amp;#10;       &amp;#10;      # Starting position of the silhouette&amp;#10;      rect_x = 50&amp;#10;      rect_y = 50&amp;#10;       &amp;#10;      # Speed and direction of rectangle&amp;#10;      rect_change_x = 5&amp;#10;      rect_change_y = 5&amp;#10;       &amp;#10;      # font&amp;#10;      pygame.font.init&amp;#10;      font = pygame.font.Font(None, 32)&amp;#10;&amp;#10;      pygame.display.flip()&amp;#10;      screen.fill(BLACK)&amp;#10;&amp;#10;      # Draw the rectangle&amp;#10;      pygame.draw.rect(screen, RED, [rect_x, rect_y, 50, 50])&amp;#10;&amp;#10;      # Move the rectangle starting point&amp;#10;      rect_x += rect_change_x&amp;#10;      rect_y += rect_change_y&amp;#10;&amp;#10;      #Setting up FPS &amp;#10;      FPS = 60&amp;#10;      FramePerSec = pygame.time.Clock()&amp;#10;      #Other Variables for use in the program&amp;#10;      #SCREEN_WIDTH = 1000&amp;#10;      #SCREEN_HEIGHT = 1000&amp;#10;      global GC_SPEED&amp;#10;      SPEED = GC_SPEED/2&amp;#10;      #SCORE = 0&amp;#10;      COLLISION_SCORE = 0&amp;#10;&amp;#10;      #Setting up Fonts&amp;#10;      font = pygame.font.SysFont(&quot;Verdana&quot;, 40)&amp;#10;      font_small = pygame.font.SysFont(&quot;Verdana&quot;, 20)&amp;#10;&amp;#10;      background = pygame.image.load(&quot;E:\Task Development\Stimuli/trial.jpeg&quot;)&amp;#10;&amp;#10;      #delay after the instruction screen&amp;#10;      pygame.time.wait(1000)&amp;#10;&amp;#10;      timer = pygame.time.get_ticks()&amp;#10;      timer2 = timer + 4000&amp;#10;&amp;#10;      #TASK GAME WINDOW SIZE&amp;#10;      DISPLAYSURF = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT), pygame.RESIZABLE)&amp;#10;      DISPLAYSURF.fill(WHITE)&amp;#10;      pygame.display.set_caption(&quot;EEG Task&quot;)&amp;#10;      pygame.mixer.init()&amp;#10;      SCORE = 0&amp;#10;      &amp;#10;      class Enemy(pygame.sprite.Sprite):&amp;#10;            def __init__(self):&amp;#10;              super().__init__() &amp;#10;              self.image = pygame.image.load(&quot;E:\Task Development\Stimuli/reddot.png&quot;)&amp;#10;              self.rect = self.image.get_rect()&amp;#10;              self.rect.center = ((SCREEN_WIDTH/2), 0)&amp;#10;            def move(self):&amp;#10;              global SCORE&amp;#10;              self.rect.move_ip(0,SPEED)&amp;#10;              if (self.rect.bottom &gt; SCREEN_HEIGHT-10):&amp;#10;                  self.rect.move_ip(0,-SPEED)&amp;#10;                  pygame.mixer.Sound(&quot;E:\Task Development\Stimuli/spawn.wav&quot;).play()&amp;#10;                  self.rect.top = 0&amp;#10;                  self.rect.center = ((SCREEN_WIDTH/2), -SCREEN_HEIGHT)&amp;#10;              global COLLISION_SCORE&amp;#10;              #print (&quot;Red Dot Dimensions:&quot; , self.rect)&amp;#10;&amp;#10;      class Enemy2(pygame.sprite.Sprite):&amp;#10;            def __init__(self):&amp;#10;              super().__init__() &amp;#10;              self.image = pygame.image.load(&quot;E:\Task Development\Stimuli/reddot.png&quot;)&amp;#10;              self.rect = self.image.get_rect()&amp;#10;              self.rect.center = ((SCREEN_WIDTH/2), 0)&amp;#10;            def move(self):&amp;#10;              global SCORE&amp;#10;              self.rect.move_ip(0,(-SPEED*0.9))&amp;#10;              SCORE = 0&amp;#10;              if (self.rect.top &lt; 10):&amp;#10;                  SCORE += 1&amp;#10;                  pygame.mixer.Sound(&quot;E:\Task Development\Stimuli/spawn.wav&quot;).play()&amp;#10;                  self.rect.top = 0&amp;#10;                  self.rect.center = ((SCREEN_WIDTH/2), SCREEN_HEIGHT)&amp;#10;              global COLLISION_SCORE&amp;#10;              &amp;#10;      class Player(pygame.sprite.Sprite):&amp;#10;          def __init__(self):&amp;#10;&amp;#10;              super().__init__()&amp;#10;              &amp;#10;              # Variables to hold the height and width of the block&amp;#10;              width = 10&amp;#10;              height = 15&amp;#10;       &amp;#10;              # silhouette image&amp;#10;              self.image = pygame.image.load(&quot;E:\Task Development/Stimuli/greendot.png&quot;)&amp;#10;              &amp;#10;       &amp;#10;              # Fetch the rectangle object that has the dimensions of the image&amp;#10;              self.rect = self.image.get_rect()              &amp;#10;       &amp;#10;              # Set initial position of silhouette&amp;#10;              self.rect.x = SCREEN_WIDTH/2-80&amp;#10;              self.rect.y = SCREEN_HEIGHT/2&amp;#10;&amp;#10;              # joystick count&amp;#10;              self.joystick_count = pygame.joystick.get_count()&amp;#10;              if self.joystick_count == 0:&amp;#10;                  # No joysticks!&amp;#10;                  print(&quot;Check the joystick connection&quot;)&amp;#10;              else:&amp;#10;                  self.my_joystick = pygame.joystick.Joystick(0)&amp;#10;                  self.my_joystick.init()&amp;#10;              #print (&quot;Green Dot Dimensions:&quot; , self.rect)&amp;#10;       &amp;#10;          def move(self):&amp;#10;              if self.joystick_count != 0:&amp;#10;       &amp;#10;                  # joystick pos&amp;#10;                  horiz_axis_pos = self.my_joystick.get_axis(0)&amp;#10;                  vert_axis_pos = self.my_joystick.get_axis(1)&amp;#10;       &amp;#10;                  # Move x and y, * speed &amp;#10;                  self.rect.x = self.rect.x+int(horiz_axis_pos*int(0))&amp;#10;                  self.rect.y = self.rect.y+int(vert_axis_pos*int(4))&amp;#10;                  #self.rect.y = self.rect.y+int(vert_axis_pos*int(0))&amp;#10;&amp;#10;      #Setting up Sprites        &amp;#10;      P1 = Player()&amp;#10;      E1 = Enemy()&amp;#10;      E2 = Enemy2()&amp;#10;&amp;#10;      #Creating Sprite Groups&amp;#10;      enemies = pygame.sprite.Group()&amp;#10;      enemies.add(E1)&amp;#10;      enemies.add(E2)&amp;#10;      all_sprites = pygame.sprite.Group()&amp;#10;      all_sprites.add(P1)&amp;#10;      all_sprites.add(E1)&amp;#10;      all_sprites.add(E2)&amp;#10;&amp;#10;      #Adding a new User event (speed up)&amp;#10;      INC_SPEED = pygame.USEREVENT + 1&amp;#10;      pygame.time.set_timer(INC_SPEED, 1000)&amp;#10;&amp;#10;      #Game Loop&amp;#10;      for line in range(3,4):&amp;#10;        dev.activate_line(lines = line)&amp;#10;&amp;#10;      COLLISION_SCORE2 = COLLISION_SCORE/20&amp;#10;      #COLLISION_SCORE += 1&amp;#10;&amp;#10;      startRT = time.time()&amp;#10;      &amp;#10;      starterRT = time.time()&amp;#10;      counter = 0&amp;#10;      pygame.joystick.init()&amp;#10;&amp;#10;      Game_Running = True&amp;#10;      while Game_Running:          &amp;#10;                &amp;#10;                pygame.event.pump()&amp;#10;                joystick = pygame.joystick.Joystick(0)&amp;#10;                &amp;#10;                yaxis = joystick.get_axis(1)&amp;#10;             &amp;#10;                while yaxis &gt; 0.2 or yaxis &lt; -0.2:&amp;#10;                    finishedRT = time.time()  &amp;#10;                    ReactionTime = finishedRT - starterRT&amp;#10;                    counter = counter + 1                    &amp;#10;                    break    &amp;#10;                &amp;#10;                if counter == 2:&amp;#10;                    &amp;#10;                    data = {'Type':['Calibration Trial'], 'Reaction Time': [ReactionTime]}&amp;#10;                    Reactiondf = pd.DataFrame(data)&amp;#10;                    #print (&quot;Counter value: &quot; + str(counter))&amp;#10;                    with open('E:\MRes Data/Participant ' + directory + '/Calibration Score.csv', 'a+') as file:&amp;#10;                      file.write('\n')&amp;#10;                      file.write(&quot;Calibration (2 Stim)&quot; + ',' + str(yaxis))&amp;#10;                    #print (Reactiondf)&amp;#10;                    Reactiondf.to_csv('E:\MRes Data/Participant ' + directory + '/Reaction Time.csv', mode='a', header=False)&amp;#10;&amp;#10;&amp;#10;                #Cycles through all events occuring      &amp;#10;                startRT = time.time()&amp;#10;                for event in pygame.event.get():&amp;#10;&amp;#10;                    if event.type == QUIT:&amp;#10;                        pygame.display.quit()&amp;#10;                    &amp;#10;                DISPLAYSURF.blit(background, (0,0))&amp;#10;                scores = font_small.render(str(SCORE), True, WHITE)&amp;#10;                DISPLAYSURF.blit(scores, (10,10))&amp;#10;                &amp;#10;                cscores = font_small.render(str(COLLISION_SCORE2), True, WHITE)&amp;#10;                DISPLAYSURF.blit(cscores, (SCREEN_WIDTH-60, 10))&amp;#10;&amp;#10;                #Moves and Re-draws all Sprites&amp;#10;                for entity in all_sprites:&amp;#10;                    entity.move()&amp;#10;                    DISPLAYSURF.blit(entity.image, entity.rect)                    &amp;#10;&amp;#10;                #To be run if collision happens&amp;#10;                if pygame.sprite.spritecollideany(P1, enemies):&amp;#10;                   #pygame.mixer.Sound(&quot;E:\Task Development\Stimuli/scream.wav&quot;).play()&amp;#10;                   COLLISION_SCORE = 1&amp;#10;&amp;#10;                timer = pygame.time.get_ticks()&amp;#10;                if timer &gt; timer2:&amp;#10;                    pygame.init()               &amp;#10;                    print (COLLISION_SCORE)&amp;#10;                    &amp;#10;                    for entity in all_sprites:&amp;#10;                            entity.kill()&amp;#10;                    DISPLAYSURF.blit(background, (0,0))&amp;#10;                    pygame.display.update()&amp;#10;                    &amp;#10;                    if COLLISION_SCORE == 1:&amp;#10;                       negativefeedback = pygame.image.load(&quot;E:\Task Development\Stimuli/redcross.png&quot;)&amp;#10;                       negrect = negativefeedback.get_rect(center = screen.get_rect().center)&amp;#10;                       DISPLAYSURF.blit(negativefeedback, negrect)&amp;#10;                    else:&amp;#10;                       positivefeedback = pygame.image.load(&quot;E:\Task Development\Stimuli/greentick.png&quot;)&amp;#10;                       posrect = positivefeedback.get_rect(center = screen.get_rect().center)&amp;#10;                       DISPLAYSURF.blit(positivefeedback, posrect)&amp;#10;                       &amp;#10;                    pygame.time.wait(1000)&amp;#10;                    pygame.display.update()                    &amp;#10;&amp;#10;                    with open('E:\MRes Data/Participant ' + directory + '/Participant Statistics.csv', 'a+') as file:&amp;#10;                      file.write('\n')&amp;#10;                      file.write(&quot;Calibration Trial (2 Stim)&quot; + ',' + str(COLLISION_SCORE))&amp;#10;                      &amp;#10;                    joystick = pygame.joystick.Joystick(0)&amp;#10;                    joystick.init()                    &amp;#10;                      &amp;#10;                    Game_Running = False                   &amp;#10;                    &amp;#10;                    pygame.display.flip()&amp;#10;                    pygame.time.wait(1000)&amp;#10;&amp;#10;                pygame.display.update()&amp;#10;                FramePerSec.tick(FPS)&amp;#10;                &amp;#10;def CB_last():&amp;#10;&amp;#10;      os.environ['SDL_VIDEO_CENTERED'] = '1'&amp;#10;      pygame.init()&amp;#10;      SCREEN_WIDTH, SCREEN_HEIGHT = pygame.display.Info().current_w, pygame.display.Info().current_h&amp;#10;      pygame.joystick.init&amp;#10;      &amp;#10;      pygame.init()&amp;#10;&amp;#10;      pygame.font.init&amp;#10;&amp;#10;      size = [SCREEN_WIDTH,SCREEN_HEIGHT-50]&amp;#10;      #SCREEN_WIDTH = 1000&amp;#10;      #SCREEN_HEIGHT = 1000&amp;#10;      BLACK = (0, 0, 0)&amp;#10;      WHITE = (255, 255, 255)&amp;#10;      GREEN = (0, 255, 0)&amp;#10;      RED = (255, 0, 0)&amp;#10;      screen = pygame.display.set_mode(size, pygame.RESIZABLE)&amp;#10;&amp;#10;      pygame.display.set_caption(&quot;Task&quot;)&amp;#10;       &amp;#10;      # Loop until the user clicks the close button.&amp;#10;      done = False&amp;#10;       &amp;#10;      clock = pygame.time.Clock()&amp;#10;       &amp;#10;      # Starting position of the silhouette&amp;#10;      rect_x = 50&amp;#10;      rect_y = 50&amp;#10;       &amp;#10;      # Speed and direction of rectangle&amp;#10;      rect_change_x = 5&amp;#10;      rect_change_y = 5&amp;#10;       &amp;#10;      # font&amp;#10;      pygame.font.init&amp;#10;      font = pygame.font.Font(None, 32)&amp;#10;&amp;#10;      pygame.display.flip()&amp;#10;      screen.fill(BLACK)&amp;#10;&amp;#10;      # Draw the rectangle&amp;#10;      pygame.draw.rect(screen, RED, [rect_x, rect_y, 50, 50])&amp;#10;&amp;#10;      # Move the rectangle starting point&amp;#10;      rect_x += rect_change_x&amp;#10;      rect_y += rect_change_y&amp;#10;&amp;#10;      #Setting up FPS &amp;#10;      FPS = 160&amp;#10;      FramePerSec = pygame.time.Clock()&amp;#10;      #Other Variables for use in the program&amp;#10;      #SCREEN_WIDTH = 1000&amp;#10;      #SCREEN_HEIGHT = 1000&amp;#10;      global GC_SPEED&amp;#10;      SPEED = GC_SPEED-0.25&amp;#10;      #SCORE = 0&amp;#10;      COLLISION_SCORE = 0&amp;#10;&amp;#10;      #Setting up Fonts&amp;#10;      font = pygame.font.SysFont(&quot;Verdana&quot;, 40)&amp;#10;      font_small = pygame.font.SysFont(&quot;Verdana&quot;, 20)&amp;#10;&amp;#10;      background = pygame.image.load(&quot;E:\Task Development\Stimuli/trial.jpeg&quot;)&amp;#10;&amp;#10;      #delay after the instruction screen&amp;#10;      pygame.time.wait(1000)&amp;#10;&amp;#10;      timer = pygame.time.get_ticks()&amp;#10;      timer2 = timer + 3000&amp;#10;&amp;#10;      #TASK GAME WINDOW SIZE&amp;#10;      DISPLAYSURF = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT), pygame.RESIZABLE)&amp;#10;      DISPLAYSURF.fill(WHITE)&amp;#10;      pygame.display.set_caption(&quot;EEG Task&quot;)&amp;#10;      pygame.mixer.init()&amp;#10;      global SCORE&amp;#10;      SCORE = 0&amp;#10;      class Enemy(pygame.sprite.Sprite):&amp;#10;            def __init__(self):&amp;#10;              super().__init__() &amp;#10;              self.image = pygame.image.load(&quot;E:\Task Development\Stimuli/reddot.png&quot;)&amp;#10;              self.rect = self.image.get_rect()&amp;#10;              self.rect.center = ((SCREEN_WIDTH/2), 0)&amp;#10;            def move(self):&amp;#10;              global SCORE&amp;#10;              self.rect.move_ip(0,SPEED)&amp;#10;              if (self.rect.bottom &gt; SCREEN_HEIGHT-10):&amp;#10;                  SCORE += 1&amp;#10;                  pygame.mixer.Sound(&quot;E:\Task Development\Stimuli/spawn.wav&quot;).play()&amp;#10;                  self.rect.move_ip(0,-SPEED)&amp;#10;                  self.rect.top = 0&amp;#10;                  self.rect.center = ((SCREEN_WIDTH/2), -SCREEN_HEIGHT)&amp;#10;              global COLLISION_SCORE&amp;#10;&amp;#10;      class Player(pygame.sprite.Sprite):&amp;#10;          def __init__(self):&amp;#10;&amp;#10;              super().__init__()&amp;#10;       &amp;#10;              # Variables to hold the height and width of the block&amp;#10;              width = 10&amp;#10;              height = 15&amp;#10;       &amp;#10;              # silhouette image&amp;#10;              self.image = pygame.image.load(&quot;E:\Task Development/Stimuli/greendot.png&quot;)&amp;#10;              &amp;#10;       &amp;#10;              # Fetch the rectangle object that has the dimensions of the image&amp;#10;              self.rect = self.image.get_rect()&amp;#10;       &amp;#10;              # Set initial position of silhouette&amp;#10;              self.rect.x = SCREEN_WIDTH/2-80&amp;#10;              self.rect.y = SCREEN_HEIGHT/2-80&amp;#10;&amp;#10;              # joystick count&amp;#10;              self.joystick_count = pygame.joystick.get_count()&amp;#10;              if self.joystick_count == 0:&amp;#10;                  # No joysticks!&amp;#10;                  print(&quot;Check joystick connection&quot;)&amp;#10;              else:&amp;#10;                  # Use joystick #0 and initialize it&amp;#10;                  self.my_joystick = pygame.joystick.Joystick(0)&amp;#10;                  self.my_joystick.init()&amp;#10;       &amp;#10;          def move(self):&amp;#10;              if self.joystick_count != 0:&amp;#10;       &amp;#10;                  # joystick pos&amp;#10;                  horiz_axis_pos = self.my_joystick.get_axis(0)&amp;#10;                  vert_axis_pos = self.my_joystick.get_axis(1)&amp;#10;       &amp;#10;                  # Move x and y, * speed &amp;#10;                  self.rect.x = self.rect.x+int(horiz_axis_pos*int(0))&amp;#10;                  self.rect.y = self.rect.y+int(vert_axis_pos*int(4))&amp;#10;                  #self.rect.y = self.rect.y+int(vert_axis_pos*int(0))&amp;#10;&amp;#10;      #Setting up Sprites        &amp;#10;      P1 = Player()&amp;#10;      E1 = Enemy()&amp;#10;&amp;#10;&amp;#10;      #Creating Sprite Groups&amp;#10;      enemies = pygame.sprite.Group()&amp;#10;      enemies.add(E1)&amp;#10;      #enemies.add(E2)&amp;#10;      all_sprites = pygame.sprite.Group()&amp;#10;      all_sprites.add(P1)&amp;#10;      all_sprites.add(E1)&amp;#10;&amp;#10;      #Adding a new User event (speed up)&amp;#10;      INC_SPEED = pygame.USEREVENT + 1&amp;#10;      pygame.time.set_timer(INC_SPEED, 1000)&amp;#10;&amp;#10;      #Game Loop&amp;#10;      for line in range(1,2):&amp;#10;                   dev.activate_line(lines = line)&amp;#10;      COLLISION_SCORE2 = COLLISION_SCORE/20&amp;#10;      joystick = pygame.joystick.Joystick(0)&amp;#10;      &amp;#10;      starterRT = time.time()&amp;#10;      counter = 0&amp;#10; &amp;#10;      Game_Running = True&amp;#10;      while Game_Running:&amp;#10;                &amp;#10;                pygame.joystick.init()&amp;#10;                joystick = pygame.joystick.Joystick(0)&amp;#10;                yaxis = joystick.get_axis(1)&amp;#10;                   &amp;#10;                for event in pygame.event.get():&amp;#10;&amp;#10;                    if event.type == QUIT:                        &amp;#10;                        pygame.display.quit()                    &amp;#10;                &amp;#10;                pygame.event.pump()&amp;#10;                joystick = pygame.joystick.Joystick(0)&amp;#10;                &amp;#10;                yaxis = joystick.get_axis(1)&amp;#10;             &amp;#10;                while yaxis &gt; 0.2 or yaxis &lt; -0.2:&amp;#10;                    finishedRT = time.time()  &amp;#10;                    ReactionTime = finishedRT - starterRT&amp;#10;                    counter = counter + 1                    &amp;#10;                    break    &amp;#10;                &amp;#10;                if counter == 2:                    &amp;#10;                    data = {'Type':['Calibration Trial'], 'Reaction Time': [ReactionTime]}&amp;#10;                    Reactiondf = pd.DataFrame(data)&amp;#10;                    #print (&quot;Counter value: &quot; + str(counter))&amp;#10;                    with open('E:\MRes Data/Participant ' + directory + '/Calibration Score.csv', 'a+') as file:&amp;#10;                      file.write('\n')&amp;#10;                      file.write(&quot;Calibration&quot; + ',' + str(yaxis))&amp;#10;                    #print (Reactiondf)&amp;#10;                    Reactiondf.to_csv('E:\MRes Data/Participant ' + directory + '/Reaction Time.csv', mode='a', header=False)&amp;#10;&amp;#10;                pygame.event.pump()&amp;#10;                DISPLAYSURF.blit(background, (0,0))&amp;#10;                scores = font_small.render(str(SCORE), True, WHITE)&amp;#10;                DISPLAYSURF.blit(scores, (10,10))&amp;#10;&amp;#10;                #COLLISION_SCORE2 = COLLISION_SCORE/20&amp;#10;                &amp;#10;                cscores = font_small.render(str(COLLISION_SCORE2), True, WHITE)&amp;#10;                DISPLAYSURF.blit(cscores, (SCREEN_WIDTH-60, 10))&amp;#10;&amp;#10;                #Moves and Re-draws all Sprites&amp;#10;                for entity in all_sprites:&amp;#10;                    entity.move()&amp;#10;                    DISPLAYSURF.blit(entity.image, entity.rect)&amp;#10;                    &amp;#10;&amp;#10;                #To be run if collision happens&amp;#10;                if pygame.sprite.spritecollideany(P1, enemies):&amp;#10;                   pygame.mixer.Sound(&quot;E:\Task Development\Stimuli/scream.wav&quot;).play()&amp;#10;                   COLLISION_SCORE = 1  &amp;#10;                   &amp;#10;                timer = pygame.time.get_ticks()&amp;#10;                if timer &gt; timer2:   &amp;#10;&amp;#10;                    pygame.init()&amp;#10;                        &amp;#10;                    &amp;#10;                    #pygame.display.quit()&amp;#10;                    for entity in all_sprites:&amp;#10;                            entity.kill()&amp;#10;                    DISPLAYSURF.blit(background, (0,0))&amp;#10;                    pygame.display.update()&amp;#10;                    &amp;#10;                    if COLLISION_SCORE == 1:&amp;#10;                       negativefeedback = pygame.image.load(&quot;E:\Task Development\Stimuli/redcross.png&quot;)&amp;#10;                       negrect = negativefeedback.get_rect(center = screen.get_rect().center)&amp;#10;                       DISPLAYSURF.blit(negativefeedback, negrect)&amp;#10;                    else:&amp;#10;                       positivefeedback = pygame.image.load(&quot;E:\Task Development\Stimuli/greentick.png&quot;)&amp;#10;                       posrect = positivefeedback.get_rect(center = screen.get_rect().center)&amp;#10;                       DISPLAYSURF.blit(positivefeedback, posrect)&amp;#10;                       &amp;#10;                    pygame.time.wait(1000)&amp;#10;                    pygame.display.update()&amp;#10;                    &amp;#10;                    with open('E:\MRes Data/Participant ' + directory + '/Participant Statistics.csv', 'a+') as file:&amp;#10;                      file.write('\n')&amp;#10;                      file.write(&quot;Calibration Trial&quot; + ',' + str(COLLISION_SCORE))&amp;#10;&amp;#10;                    joystick = pygame.joystick.Joystick(0)&amp;#10;                    joystick.init()&amp;#10;                    &amp;#10;                    Game_Running = False&amp;#10;                    &amp;#10;                    pygame.display.update()&amp;#10;                    pygame.time.wait(1000)&amp;#10;&amp;#10;                    cbchange = pygame.image.load(&quot;E:\Task Development\Stimuli/cbchange.png&quot;)&amp;#10;                    cbchangedimensions = cbchange.get_rect(center = screen.get_rect().center)&amp;#10;                    screen.fill(WHITE)&amp;#10;                    DISPLAYSURF.blit(cbchange, cbchangedimensions)                   &amp;#10;                    &amp;#10;                    pygame.display.update() &amp;#10;                    pygame.time.wait(5000)&amp;#10;&amp;#10;                    with open('E:\MRes Data/Participant ' + directory + '/Participant Statistics.csv', 'a+') as file:&amp;#10;                      file.write('\n')&amp;#10;                      file.write(&quot;Calibration Trial&quot; + ',' + str(COLLISION_SCORE))&amp;#10;                      &amp;#10;                    joystick = pygame.joystick.Joystick(0)&amp;#10;                    joystick.init()                    &amp;#10;                      &amp;#10;                    Game_Running = False                   &amp;#10;                    &amp;#10;                    pygame.display.flip()&amp;#10;                    pygame.time.wait(1000)&amp;#10;&amp;#10;                pygame.display.update()&amp;#10;                FramePerSec.tick(FPS)&amp;#10;&amp;#10;def Calibration_calculator():&amp;#10;    import pandas as pd&amp;#10;    import math&amp;#10;    import numpy as np&amp;#10;&amp;#10;    df = pd.read_csv('E:\MRes Data/Participant ' + directory + '/Reaction Time.csv')&amp;#10;    CBProcessing = df['Reaction Time'].mean()&amp;#10;    Calibrationaverage = -CBProcessing&amp;#10;    caconv = (Calibrationaverage)&amp;#10;    #print (caconv)&amp;#10;    logsquaredca = 10*np.exp(caconv)&amp;#10;    squared =(logsquaredca*logsquaredca)&amp;#10;    print (&quot;Squared Value:&quot; , squared)&amp;#10;    fivelogca = math.sqrt(squared)+0.5&amp;#10;    print (&quot;Square Root Value:&quot; , fivelogca)&amp;#10;    &amp;#10;    if fivelogca &lt; 2:&amp;#10;        fivelogca = 3&amp;#10;    else:&amp;#10;        fivelogca = math.sqrt(squared)&amp;#10;    &amp;#10;    if fivelogca &gt; 10:&amp;#10;        fivelogca = 10&amp;#10;    else:&amp;#10;        fivelogca = math.sqrt(squared)&amp;#10;    &amp;#10;    print (&quot;Multiplier Value:&quot; , fivelogca)&amp;#10;    global Calibration_SPEED&amp;#10;    Calibration_SPEED = fivelogca&amp;#10;&amp;#10;    with open('E:\MRes Data/Participant ' + directory + '/Calibration Calculation.csv', 'a+') as file:&amp;#10;        file.write(&quot;Calibration Average Score&quot; + ',' + str(Calibrationaverage))&amp;#10;        file.write('\n')&amp;#10;        file.write(&quot;Calibration Conversion Score&quot; + ',' + str(caconv))&amp;#10;        file.write('\n')&amp;#10;        file.write(&quot;Log Conversion&quot; + ',' + str(squared))&amp;#10;        file.write('\n')&amp;#10;        file.write(&quot;Final Calibration Multiplier&quot; + ',' + str(fivelogca))&amp;#10;&amp;#10;        &amp;#10;#128 start of the recording trigger&amp;#10;for line in range(8,9):&amp;#10;    dev.activate_line(lines=line)&amp;#10;&amp;#10;#Calibration = CB_Full(), CB_Full(), CB_Full(), CB_Full()&amp;#10;Calibration = CB(), CB(), CB(), CB(), CB(), CB(), CB(), CB(), CB(), CB(), CB(), CB(), CB(), CB(), CB(), CB_last(), CB_Full(), CB_Full(), CB_Full(), CB_Full(), Calibration_calculator()&amp;#10;condition = random.randint(1,10)&amp;#10;&amp;#10;if condition == 1:&amp;#10;      Order = Calibration, GC(), LC(), GC(), LC(), GC(), GC(),LC(), GC(), GC(), LC(), LC(), GC(), GC(), GC(), LC(), GC(), LC(), GC(), GC(), LC(), GC(), LC(), GC(), LC(), LC(), GC(), GC(), LC(), LC(), LC(), GC(), LC(), GC(), GC(), GC(),LC(), GC(), GC(), LC(), LC(), LC(), GC(), GC(), LC(), GC(), LC(), LC(), LC(), GC(), GC(), LC(), LC(), LC(), LC(),LC(), LC(), GC(), GC(), LC(), GC()&amp;#10;if condition == 2:&amp;#10;      Order = Calibration, GC(), GC(), GC(), LC(), GC(), LC(), GC(), GC(), LC(), LC(), GC(), GC(), LC(), GC(), GC(), GC(), GC(), GC(), GC(), LC(), GC(), LC(), LC(), GC(), LC(), LC(), GC(),LC(), GC(), LC(), LC(), GC(), GC(),LC(), GC(), LC(), GC(), LC(), LC(), LC(), LC(), LC(), LC(), GC(), LC(), LC(), LC(), GC(), GC(), LC(), GC(), GC(), LC(),LC(), LC(), GC(), GC(), LC(), GC(), LC()&amp;#10;if condition == 3:&amp;#10;      Order = Calibration, GC(), GC(), LC(), LC(), LC(), LC(), GC(), LC(), LC(), GC(), GC(), GC(), GC(), LC(), GC(), GC(), LC(), GC(), GC(), GC(), LC(), LC(), LC(),LC(), LC(), LC(), LC(), GC(), LC(), GC(), LC(), GC(), GC(), LC(), LC(), GC(),LC(), GC(), LC(), LC(), GC(), GC(),LC(), LC(), LC(), GC(), GC(), LC(), LC(), GC(), GC(), GC(), GC(), LC(), GC(), GC(), LC(), GC(), GC(), LC()&amp;#10;if condition == 4:&amp;#10;      Order = Calibration, LC(), GC(), GC(),LC(), LC(), LC(), LC(), LC(), LC(), GC(), LC(), GC(), GC(), LC(), GC(), LC(), LC(), LC(), GC(), GC(), LC(),LC(), LC(), GC(), GC(), LC(), GC(), GC(), LC(), GC(), LC(), GC(), GC(), GC(), GC(), LC(), GC(), GC(), GC(), GC(), GC(),LC(), GC(), LC(), LC(), LC(), GC(), LC(), GC(), GC(), LC(), LC(), LC(), LC(), GC(), GC(), LC(), GC(), GC(), LC()&amp;#10;if condition == 5:&amp;#10;      Order = Calibration, GC(), GC(), GC(), LC(), LC(),LC(), LC(), GC(), LC(), GC(), GC(), LC(), GC(), LC(), GC(), GC(), LC(), LC(), GC(), GC(), LC(), GC(), LC(), LC(), GC(), GC(), GC(), GC(), GC(), LC(), LC(), LC(), GC(), LC(), LC(), GC(), GC(), LC(), LC(), LC(), LC(), GC(), GC(), LC(), GC(), GC(),LC(), LC(), GC(), GC(), GC(), LC(), GC(), LC(), LC(), LC(), GC(), LC(), GC(), LC()&amp;#10;if condition == 6:&amp;#10;      Order = Calibration, LC(), GC(), GC(),LC(), GC(), GC(), LC(), LC(), LC(), LC(), GC(), GC(), LC(), LC(), GC(), LC(), LC(), GC(), GC(), GC(), LC(), LC(), GC(), GC(), LC(), LC(), GC(), GC(), LC(), GC(), LC(), LC(),LC(), LC(), LC(), LC(), GC(),LC(), LC(), LC(), LC(), GC(), LC(), GC(), GC(), LC(), GC(), LC(), GC(), GC(), GC(), GC(), GC(), GC(), GC(), LC(), GC(), GC(), LC(), GC()&amp;#10;if condition == 7:&amp;#10;      Order = Calibration, GC(), LC(), LC(), GC(), LC(), GC(), GC(), GC(), GC(), LC(), LC(), GC(), GC(), LC(), GC(), GC(), LC(), GC(), LC(), GC(), GC(), LC(), GC(), LC(), LC(), LC(),LC(), GC(),LC(), LC(), LC(), GC(), GC(), LC(), LC(), LC(), GC(), GC(), LC(), LC(), GC(), GC(),LC(), GC(), GC(), LC(), LC(), GC(), GC(), GC(), GC(), LC(), GC(), GC(), GC(), LC(), LC(), LC(), LC(), LC()&amp;#10;if condition == 8:&amp;#10;      Order = Calibration, GC(), LC(), LC(), GC(), LC(), GC(), LC(), LC(), GC(), GC(), LC(), GC(), GC(), LC(), GC(), LC(), GC(), GC(), LC(), GC(), LC(), LC(), LC(),LC(), GC(),LC(), LC(), LC(), GC(), GC(), LC(), LC(), LC(), GC(), GC(), LC(), LC(), GC(), GC(),LC(), GC(), GC(), LC(), LC(), GC(), GC(), GC(), GC(), GC(), GC(), GC(), LC(), GC(), GC(), GC(), LC(), LC(), LC(), LC(), LC()&amp;#10;if condition == 9:&amp;#10;      Order = Calibration, GC(), LC(), LC(), GC(), LC(), LC(), GC(), LC(), GC(), LC(), LC(), GC(), GC(), GC(), LC(), LC(), LC(), LC(), GC(), LC(), LC(), LC(), GC(), LC(), LC(), LC(), GC(), GC(), GC(), GC(), GC(),LC(), GC(), GC(), LC(), GC(), GC(), GC(), LC(), GC(), LC(), GC(), LC(), GC(), LC(), LC(), GC(), LC(), LC(), GC(), GC(), GC(), GC(), LC(),LC(), LC(), GC(), GC(), GC(),LC()&amp;#10;if condition == 10:&amp;#10;      Order = Calibration, GC(), GC(), LC(), LC(), GC(), GC(), GC(), LC(), LC(), GC(), GC(), GC(), GC(), GC(), LC(), GC(), LC(), GC(), LC(), LC(), LC(), GC(), LC(), LC(), GC(), LC(), LC(), LC(), GC(), LC(), GC(), GC(), LC(), LC(), GC(), GC(), LC(), GC(), LC(), LC(),LC(), LC(), GC(), GC(), LC(), LC(), GC(), GC(), GC(), LC(), LC(), GC(), GC(), LC(), GC(),LC(), GC(), LC(), LC(), GC(),&amp;#10;&amp;#10;#64 closing of recording trigger&amp;#10;for line in range(7,8):&amp;#10;    dev.activate_line(lines = line)&amp;#10;&amp;#10;Stats_CSV()&amp;#10;Trial_Analyses()&amp;#10;subprocess.run([&quot;/MRes Data/Analyses/Transfer Script.cmd&quot;])&amp;#10;&amp;#10;pygame.display.update()&amp;#10;pygame.quit()&amp;#10;sys.exit()" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="Task_Code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Instructions">
      <TextComponent name="Instruction_List">
        <Param val="1.0000, 1.0000, 1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Instruction_List" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="time (s)" valType="str" updates="None" name="stopType"/>
        <Param val="45" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Your job is to move yourself (the green circle) and prevent yourself from being caught by a red ball. You must avoid it as quickly as possible.&amp;#10;&amp;#10;To complete this task, you must move the joystick away from the ball - forwards and backwards.&amp;#10;&amp;#10;Every three seconds, this will repeat and you must continue to avoid the ball. The task will gradually get harder as you progress." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="Trigger_Setup">
        <Param val="import pyxid2&amp;#10;import time&amp;#10;import pygame, sys&amp;#10;from pygame.locals import *&amp;#10;import random, time&amp;#10;import math&amp;#10;import os&amp;#10;import csv&amp;#10;from psychopy.core import CountdownTimer&amp;#10;pygame.init()&amp;#10;pygame.joystick.init()&amp;#10;&amp;#10;devices = pyxid2.get_xid_devices()&amp;#10;&amp;#10;if devices:&amp;#10;    print(devices)&amp;#10;else:&amp;#10;    print(&quot;No XID devices detected&quot;)&amp;#10;    exit()&amp;#10;&amp;#10;dev = devices[1]&amp;#10;dev.set_pulse_duration(200)&amp;#10;print(&quot;Connected &quot;, dev)&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="Trigger_Setup" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="Instructions"/>
    <Routine name="Task"/>
  </Flow>
</PsychoPy2experiment>
