.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.propgrid.PropertyGridPageState:

==========================================================================================================================================
|phoenix_title|  **wx.propgrid.PropertyGridPageState**
==========================================================================================================================================

Contains low-level property page information (properties, column widths, etc.) of a single :ref:`wx.propgrid.PropertyGrid`  or single :ref:`wx.propgrid.PropertyGridPage`.          

Generally you should not use this class directly, but instead member functions in :ref:`wx.propgrid.PropertyGridInterface`, :ref:`wx.propgrid.PropertyGrid`, :ref:`wx.propgrid.PropertyGridPage`, and :ref:`wx.propgrid.PropertyGridManager`. 







.. note:: 

   Currently this class is not implemented in wxPython.  







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>PropertyGridPageState</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.propgrid.PropertyGridPageState_inheritance.png" alt="Inheritance diagram of PropertyGridPageState" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.propgrid.PropertyGridPageState.html" title="wx.propgrid.PropertyGridPageState" alt="" coords="5,5,256,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`wx.propgrid.PropertyGridPage`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.propgrid.PropertyGridPageState.__init__`                              Default constructor.
:meth:`~wx.propgrid.PropertyGridPageState.CheckColumnWidths`                     Makes sure all columns have minimum width.
:meth:`~wx.propgrid.PropertyGridPageState.DoDelete`                              Override this member function to add custom behaviour on property deletion.
:meth:`~wx.propgrid.PropertyGridPageState.DoInsert`                              Override this member function to add custom behaviour on property insertion.
:meth:`~wx.propgrid.PropertyGridPageState.DoSetSplitterPosition`                 This needs to be overridden in grid used the manager so that splitter changes can be propagated to other pages.
:meth:`~wx.propgrid.PropertyGridPageState.EnableCategories`                      
:meth:`~wx.propgrid.PropertyGridPageState.EnsureVirtualHeight`                   Make sure virtual height is up-to-date.
:meth:`~wx.propgrid.PropertyGridPageState.GetActualVirtualHeight`                Returns actual height of contained visible properties.
:meth:`~wx.propgrid.PropertyGridPageState.GetColumnCount`                        
:meth:`~wx.propgrid.PropertyGridPageState.GetColumnFullWidth`                    
:meth:`~wx.propgrid.PropertyGridPageState.GetColumnMinWidth`                     
:meth:`~wx.propgrid.PropertyGridPageState.GetColumnWidth`                        
:meth:`~wx.propgrid.PropertyGridPageState.GetGrid`                               
:meth:`~wx.propgrid.PropertyGridPageState.GetLastItem`                           Returns last item which could be iterated using given flags.
:meth:`~wx.propgrid.PropertyGridPageState.GetPropertyCategory`                   
:meth:`~wx.propgrid.PropertyGridPageState.GetSelection`                          Returns currently selected property.
:meth:`~wx.propgrid.PropertyGridPageState.GetVirtualHeight`                      Returns (precalculated) height of contained visible properties.
:meth:`~wx.propgrid.PropertyGridPageState.GetVirtualWidth`                       Returns combined width of margin and all the columns.
:meth:`~wx.propgrid.PropertyGridPageState.HitTest`                               Returns information about arbitrary position in the grid.
:meth:`~wx.propgrid.PropertyGridPageState.IsDisplayed`                           Returns ``True`` if page is visibly displayed.
:meth:`~wx.propgrid.PropertyGridPageState.IsInNonCatMode`                        
:meth:`~wx.propgrid.PropertyGridPageState.VirtualHeightChanged`                  Called after virtual height needs to be recalculated.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.propgrid.PropertyGridPageState.ActualVirtualHeight`                   See :meth:`~wx.propgrid.PropertyGridPageState.GetActualVirtualHeight`
:attr:`~wx.propgrid.PropertyGridPageState.ColumnCount`                           See :meth:`~wx.propgrid.PropertyGridPageState.GetColumnCount`
:attr:`~wx.propgrid.PropertyGridPageState.Grid`                                  See :meth:`~wx.propgrid.PropertyGridPageState.GetGrid`
:attr:`~wx.propgrid.PropertyGridPageState.LastItem`                              See :meth:`~wx.propgrid.PropertyGridPageState.GetLastItem`
:attr:`~wx.propgrid.PropertyGridPageState.Selection`                             See :meth:`~wx.propgrid.PropertyGridPageState.GetSelection`
:attr:`~wx.propgrid.PropertyGridPageState.VirtualHeight`                         See :meth:`~wx.propgrid.PropertyGridPageState.GetVirtualHeight`
:attr:`~wx.propgrid.PropertyGridPageState.VirtualWidth`                          See :meth:`~wx.propgrid.PropertyGridPageState.GetVirtualWidth`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.propgrid.PropertyGridPageState(object)

   **Possible constructors**::

       PropertyGridPageState()
       
   
   Contains low-level property page information (properties, column
   widths, etc.) of a single PropertyGrid or single PropertyGridPage.



   .. method:: __init__(self)

      Default constructor.                   





   .. method:: CheckColumnWidths(self, widthChange=0)

      Makes sure all columns have minimum width.                  


      :param `widthChange`: 
      :type `widthChange`: int







   .. method:: DoDelete(self, item, doDelete=True)

      Override this member function to add custom behaviour on property deletion.                  


      :param `item`: 
      :type `item`: wx.propgrid.PGProperty
      :param `doDelete`: 
      :type `doDelete`: bool







   .. method:: DoInsert(self, parent, index, property)

      Override this member function to add custom behaviour on property insertion.                  


      :param `parent`: 
      :type `parent`: wx.propgrid.PGProperty
      :param `index`: 
      :type `index`: int
      :param `property`: 
      :type `property`: wx.propgrid.PGProperty




      :rtype: :ref:`wx.propgrid.PGProperty`








   .. method:: DoSetSplitterPosition(self, pos, splitterColumn=0, flags=0)

      This needs to be overridden in grid used the manager so that splitter changes can be propagated to other pages.                  


      :param `pos`: 
      :type `pos`: int
      :param `splitterColumn`: 
      :type `splitterColumn`: int
      :param `flags`: 
      :type `flags`: int







   .. method:: EnableCategories(self, enable)




      :param `enable`: 
      :type `enable`: bool




      :rtype: `bool`








   .. method:: EnsureVirtualHeight(self)

      Make sure virtual height is up-to-date.                   





   .. method:: GetActualVirtualHeight(self)

      Returns actual height of contained visible properties.                  

                

      :rtype: `int`







      .. note:: 

         Mostly used for internal diagnostic purposes.   








   .. method:: GetColumnCount(self)



      :rtype: `int`








   .. method:: GetColumnFullWidth(self, p, col)




      :param `p`: 
      :type `p`: wx.propgrid.PGProperty
      :param `col`: 
      :type `col`: int




      :rtype: `int`








   .. method:: GetColumnMinWidth(self, column)




      :param `column`: 
      :type `column`: int




      :rtype: `int`








   .. method:: GetColumnWidth(self, column)




      :param `column`: 
      :type `column`: int




      :rtype: `int`








   .. method:: GetGrid(self)



      :rtype: :ref:`wx.propgrid.PropertyGrid`








   .. method:: GetLastItem(self, flags=PG_ITERATE_DEFAULT)

      Returns last item which could be iterated using given flags.                  




      :param `flags`: :ref:`PropertyGridIterator Flags <propertygriditerator flags>`    
      :type `flags`: int






      :rtype: :ref:`wx.propgrid.PGProperty`



                  





   .. method:: GetPropertyCategory(self, p)




      :param `p`: 
      :type `p`: wx.propgrid.PGProperty




      :rtype: :ref:`wx.propgrid.PropertyCategory`








   .. method:: GetSelection(self)

      Returns currently selected property.                  

      :rtype: :ref:`wx.propgrid.PGProperty`








   .. method:: GetVirtualHeight(self)

      Returns (precalculated) height of contained visible properties.                  

      :rtype: `int`








   .. method:: GetVirtualWidth(self)

      Returns combined width of margin and all the columns.                  

      :rtype: `int`








   .. method:: HitTest(self, pt)

      Returns information about arbitrary position in the grid.                  




      :param `pt`: Logical coordinates in the virtual grid space. Use :meth:`wx.Scrolled.CalcUnscrolledPosition`   if you need to translate a scrolled position into a logical one.   
      :type `pt`: wx.Point






      :rtype: :ref:`wx.propgrid.PropertyGridHitTestResult`



                  





   .. method:: IsDisplayed(self)

      Returns ``True`` if page is visibly displayed.                  

      :rtype: `bool`








   .. method:: IsInNonCatMode(self)



      :rtype: `bool`








   .. method:: VirtualHeightChanged(self)

      Called after virtual height needs to be recalculated.                   





   .. attribute:: ActualVirtualHeight

      See :meth:`~wx.propgrid.PropertyGridPageState.GetActualVirtualHeight`


   .. attribute:: ColumnCount

      See :meth:`~wx.propgrid.PropertyGridPageState.GetColumnCount`


   .. attribute:: Grid

      See :meth:`~wx.propgrid.PropertyGridPageState.GetGrid`


   .. attribute:: LastItem

      See :meth:`~wx.propgrid.PropertyGridPageState.GetLastItem`


   .. attribute:: Selection

      See :meth:`~wx.propgrid.PropertyGridPageState.GetSelection`


   .. attribute:: VirtualHeight

      See :meth:`~wx.propgrid.PropertyGridPageState.GetVirtualHeight`


   .. attribute:: VirtualWidth

      See :meth:`~wx.propgrid.PropertyGridPageState.GetVirtualWidth`

