.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.FileDialogCustomControl:

==========================================================================================================================================
|phoenix_title|  **wx.FileDialogCustomControl**
==========================================================================================================================================

The base class for all :ref:`wx.FileDialog`  custom controls.          

Unlike normal controls, inheriting from :ref:`wx.Window`, custom controls in :ref:`wx.FileDialog`  are not actual windows, but they do provide some window-like operations, and can be disabled or hidden, just as the windows are. 

Also, similarly to the normal windows, objects of this and derived classes belong to wxWidgets and must `not`  be deleted by the application code. 

Unlike windows, custom controls cannot be created directly, but can only be returned from :ref:`wx.FileDialogCustomize`  functions that are specifically provided for creating them. 

         



.. versionadded:: 4.1/wxWidgets-3.1.7  
     







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>FileDialogCustomControl</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.FileDialogCustomControl_inheritance.png" alt="Inheritance diagram of FileDialogCustomControl" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.FileDialogCustomControl.html" title="wx.FileDialogCustomControl" alt="" coords="5,160,212,189"/> <area shape="rect" id="node2" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node3" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node4" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`wx.FileDialogButton`, :ref:`wx.FileDialogCheckBox`, :ref:`wx.FileDialogChoice`, :ref:`wx.FileDialogRadioButton`, :ref:`wx.FileDialogStaticText`, :ref:`wx.FileDialogTextCtrl`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.FileDialogCustomControl.Disable`                                      Disable this control.
:meth:`~wx.FileDialogCustomControl.Enable`                                       Enable or disable this control.
:meth:`~wx.FileDialogCustomControl.Hide`                                         Hide this control.
:meth:`~wx.FileDialogCustomControl.Show`                                         Show or hide this control.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.FileDialogCustomControl(EvtHandler)

   The base class for all FileDialog custom controls.



   .. method:: Disable(self)

      Disable this control.                  

      This is equivalent to  ``Enable(false)`` .                    





   .. method:: Enable(self, enable=True)

      Enable or disable this control.                  


      :param `enable`: 
      :type `enable`: bool







   .. method:: Hide(self)

      Hide this control.                  

      This is equivalent to  ``Show(false)`` .                    





   .. method:: Show(self, show=True)

      Show or hide this control.                  


      :param `show`: 
      :type `show`: bool






