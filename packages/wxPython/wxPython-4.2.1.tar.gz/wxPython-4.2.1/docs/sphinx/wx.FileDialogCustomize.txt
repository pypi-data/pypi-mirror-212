.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2020 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.FileDialogCustomize:

==========================================================================================================================================
|phoenix_title|  **wx.FileDialogCustomize**
==========================================================================================================================================

Used with :ref:`wx.FileDialogCustomizeHook`  to add custom controls to :ref:`wx.FileDialog`.          

An object of this class is passed to :meth:`wx.FileDialogCustomizeHook.AddCustomControls`   to allow it to actually add controls to the dialog. 

The pointers returned by the functions of this class belong to wxWidgets and should `not`  be deleted by the application, just as Window-derived objects (even if these controls do not inherit from :ref:`wx.Window`). These pointers become invalid when :meth:`wx.FileDialog.ShowModal`   returns, and the dialog containing them is destroyed, and the latest point at which they can be still used is when :meth:`wx.FileDialogCustomizeHook.TransferDataFromCustomControls`   is called. 





         



.. versionadded:: 4.1/wxWidgets-3.1.7  
     







.. seealso:: :ref:`wx.FileDialog`  







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>FileDialogCustomize</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.FileDialogCustomize_inheritance.png" alt="Inheritance diagram of FileDialogCustomize" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.FileDialogCustomize.html" title="wx.FileDialogCustomize" alt="" coords="5,5,184,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.FileDialogCustomize.AddButton`                                        Add a button with the specified label.
:meth:`~wx.FileDialogCustomize.AddCheckBox`                                      Add a checkbox with the specified label.
:meth:`~wx.FileDialogCustomize.AddChoice`                                        Add a read-only combobox with the specified contents.
:meth:`~wx.FileDialogCustomize.AddRadioButton`                                   Add a radio button with the specified label.
:meth:`~wx.FileDialogCustomize.AddStaticText`                                    Add a static text with the given contents.
:meth:`~wx.FileDialogCustomize.AddTextCtrl`                                      Add a text control with an optional label preceding it.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.FileDialogCustomize(object)

   Used with FileDialogCustomizeHook to add custom controls to
   FileDialog.



   .. method:: AddButton(self, label)

      Add a button with the specified label.                  


      :param `label`: 
      :type `label`: string




      :rtype: :ref:`wx.FileDialogButton`








   .. method:: AddCheckBox(self, label)

      Add a checkbox with the specified label.                  


      :param `label`: 
      :type `label`: string




      :rtype: :ref:`wx.FileDialogCheckBox`








   .. method:: AddChoice(self, strings)

      Add a read-only combobox with the specified contents.                  

      The combobox doesn't have any initial selection, i.e. :meth:`wx.FileDialogChoice.GetSelection`   returns  ``NOT_FOUND`` , if some item must be selected, use  :meth:`wx.FileDialogChoice.SetSelection`   explicitly to do it. 




      :param `strings`: A non-NULL pointer to an array of  `n`  strings.   
      :type `strings`: list of strings








      :rtype: :ref:`wx.FileDialogChoice`



                  





   .. method:: AddRadioButton(self, label)

      Add a radio button with the specified label.                  

      The first radio button added will be initially checked. All the radio buttons added immediately after it will become part of the same radio group and will not be checked, but checking any one of them later will uncheck the first button and all the other ones. 

      If two consecutive but distinct radio groups are required, :meth:`AddStaticText`   with an empty label can be used to separate them.                  


      :param `label`: 
      :type `label`: string




      :rtype: :ref:`wx.FileDialogRadioButton`








   .. method:: AddStaticText(self, label)

      Add a static text with the given contents.                  

      The contents of the static text can be updated later, i.e. it doesn't need to be actually static.                  


      :param `label`: 
      :type `label`: string




      :rtype: :ref:`wx.FileDialogStaticText`








   .. method:: AddTextCtrl(self, label="")

      Add a text control with an optional label preceding it.                  

      Unlike all the other functions for adding controls, the `label`  parameter here doesn't specify the contents of the text control itself, but rather the label appearing before it. Unlike static controls added by :meth:`AddStaticText` , this label is guaranteed to be immediately adjacent to it. 

      If `label`  is empty, no label is created.                  


      :param `label`: 
      :type `label`: string




      :rtype: :ref:`wx.FileDialogTextCtrl`







