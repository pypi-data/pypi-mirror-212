# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.42.0-01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CrowdApiXO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "enabled": "bool",
        "realm_active": "bool",
        "application_name": "str",
        "application_password": "str",
        "url": "str",
        "use_trust_store_for_url": "bool",
        "timeout": "int",
    }

    attribute_map = {
        "enabled": "enabled",
        "realm_active": "realmActive",
        "application_name": "applicationName",
        "application_password": "applicationPassword",
        "url": "url",
        "use_trust_store_for_url": "useTrustStoreForUrl",
        "timeout": "timeout",
    }

    def __init__(
        self,
        enabled=None,
        realm_active=None,
        application_name=None,
        application_password=None,
        url=None,
        use_trust_store_for_url=None,
        timeout=None,
    ):  # noqa: E501
        """CrowdApiXO - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self._realm_active = None
        self._application_name = None
        self._application_password = None
        self._url = None
        self._use_trust_store_for_url = None
        self._timeout = None
        self.discriminator = None
        self.enabled = enabled
        self.realm_active = realm_active
        if application_name is not None:
            self.application_name = application_name
        if application_password is not None:
            self.application_password = application_password
        if url is not None:
            self.url = url
        if use_trust_store_for_url is not None:
            self.use_trust_store_for_url = use_trust_store_for_url
        if timeout is not None:
            self.timeout = timeout

    @property
    def enabled(self):
        """Gets the enabled of this CrowdApiXO.  # noqa: E501


        :return: The enabled of this CrowdApiXO.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CrowdApiXO.


        :param enabled: The enabled of this CrowdApiXO.  # noqa: E501
        :type: bool
        """
        if enabled is None:
            raise ValueError(
                "Invalid value for `enabled`, must not be `None`"
            )  # noqa: E501

        self._enabled = enabled

    @property
    def realm_active(self):
        """Gets the realm_active of this CrowdApiXO.  # noqa: E501


        :return: The realm_active of this CrowdApiXO.  # noqa: E501
        :rtype: bool
        """
        return self._realm_active

    @realm_active.setter
    def realm_active(self, realm_active):
        """Sets the realm_active of this CrowdApiXO.


        :param realm_active: The realm_active of this CrowdApiXO.  # noqa: E501
        :type: bool
        """
        if realm_active is None:
            raise ValueError(
                "Invalid value for `realm_active`, must not be `None`"
            )  # noqa: E501

        self._realm_active = realm_active

    @property
    def application_name(self):
        """Gets the application_name of this CrowdApiXO.  # noqa: E501


        :return: The application_name of this CrowdApiXO.  # noqa: E501
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this CrowdApiXO.


        :param application_name: The application_name of this CrowdApiXO.  # noqa: E501
        :type: str
        """

        self._application_name = application_name

    @property
    def application_password(self):
        """Gets the application_password of this CrowdApiXO.  # noqa: E501


        :return: The application_password of this CrowdApiXO.  # noqa: E501
        :rtype: str
        """
        return self._application_password

    @application_password.setter
    def application_password(self, application_password):
        """Sets the application_password of this CrowdApiXO.


        :param application_password: The application_password of this CrowdApiXO.  # noqa: E501
        :type: str
        """

        self._application_password = application_password

    @property
    def url(self):
        """Gets the url of this CrowdApiXO.  # noqa: E501


        :return: The url of this CrowdApiXO.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CrowdApiXO.


        :param url: The url of this CrowdApiXO.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def use_trust_store_for_url(self):
        """Gets the use_trust_store_for_url of this CrowdApiXO.  # noqa: E501


        :return: The use_trust_store_for_url of this CrowdApiXO.  # noqa: E501
        :rtype: bool
        """
        return self._use_trust_store_for_url

    @use_trust_store_for_url.setter
    def use_trust_store_for_url(self, use_trust_store_for_url):
        """Sets the use_trust_store_for_url of this CrowdApiXO.


        :param use_trust_store_for_url: The use_trust_store_for_url of this CrowdApiXO.  # noqa: E501
        :type: bool
        """

        self._use_trust_store_for_url = use_trust_store_for_url

    @property
    def timeout(self):
        """Gets the timeout of this CrowdApiXO.  # noqa: E501


        :return: The timeout of this CrowdApiXO.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this CrowdApiXO.


        :param timeout: The timeout of this CrowdApiXO.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CrowdApiXO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrowdApiXO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
