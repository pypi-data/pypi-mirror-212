# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.42.0-01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class GroupBlobStoreApiModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "soft_quota": "BlobStoreApiSoftQuota",
        "members": "list[str]",
        "fill_policy": "str",
    }

    attribute_map = {
        "soft_quota": "softQuota",
        "members": "members",
        "fill_policy": "fillPolicy",
    }

    def __init__(self, soft_quota=None, members=None, fill_policy=None):  # noqa: E501
        """GroupBlobStoreApiModel - a model defined in Swagger"""  # noqa: E501
        self._soft_quota = None
        self._members = None
        self._fill_policy = None
        self.discriminator = None
        if soft_quota is not None:
            self.soft_quota = soft_quota
        if members is not None:
            self.members = members
        if fill_policy is not None:
            self.fill_policy = fill_policy

    @property
    def soft_quota(self):
        """Gets the soft_quota of this GroupBlobStoreApiModel.  # noqa: E501


        :return: The soft_quota of this GroupBlobStoreApiModel.  # noqa: E501
        :rtype: BlobStoreApiSoftQuota
        """
        return self._soft_quota

    @soft_quota.setter
    def soft_quota(self, soft_quota):
        """Sets the soft_quota of this GroupBlobStoreApiModel.


        :param soft_quota: The soft_quota of this GroupBlobStoreApiModel.  # noqa: E501
        :type: BlobStoreApiSoftQuota
        """

        self._soft_quota = soft_quota

    @property
    def members(self):
        """Gets the members of this GroupBlobStoreApiModel.  # noqa: E501

        List of the names of blob stores that are members of this group  # noqa: E501

        :return: The members of this GroupBlobStoreApiModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this GroupBlobStoreApiModel.

        List of the names of blob stores that are members of this group  # noqa: E501

        :param members: The members of this GroupBlobStoreApiModel.  # noqa: E501
        :type: list[str]
        """

        self._members = members

    @property
    def fill_policy(self):
        """Gets the fill_policy of this GroupBlobStoreApiModel.  # noqa: E501


        :return: The fill_policy of this GroupBlobStoreApiModel.  # noqa: E501
        :rtype: str
        """
        return self._fill_policy

    @fill_policy.setter
    def fill_policy(self, fill_policy):
        """Sets the fill_policy of this GroupBlobStoreApiModel.


        :param fill_policy: The fill_policy of this GroupBlobStoreApiModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["roundRobin", "writeToFirst"]  # noqa: E501
        if fill_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `fill_policy` ({0}), must be one of {1}".format(  # noqa: E501
                    fill_policy, allowed_values
                )
            )

        self._fill_policy = fill_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(GroupBlobStoreApiModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupBlobStoreApiModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
