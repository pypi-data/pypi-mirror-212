# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.42.0-01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from nxrm_sdk.api_client import ApiClient


class ComponentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_component(self, id, **kwargs):  # noqa: E501
        """Delete a single component  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_component(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the component to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_component_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_component_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_component_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a single component  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_component_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the component to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_component" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if "id" not in params or params["id"] is None:
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_component`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/components/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_component_by_id(self, id, **kwargs):  # noqa: E501
        """Get a single component  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the component to retrieve (required)
        :return: ComponentXO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_component_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_component_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_component_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a single component  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_component_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the component to retrieve (required)
        :return: ComponentXO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_component_by_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if "id" not in params or params["id"] is None:
            raise ValueError(
                "Missing the required parameter `id` when calling `get_component_by_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/components/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ComponentXO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_components(self, repository, **kwargs):  # noqa: E501
        """List components  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_components(repository, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: Repository from which you would like to retrieve components (required)
        :param str continuation_token: A token returned by a prior request. If present, the next page of results are returned
        :return: PageComponentXO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_components_with_http_info(
                repository, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_components_with_http_info(
                repository, **kwargs
            )  # noqa: E501
            return data

    def get_components_with_http_info(self, repository, **kwargs):  # noqa: E501
        """List components  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_components_with_http_info(repository, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: Repository from which you would like to retrieve components (required)
        :param str continuation_token: A token returned by a prior request. If present, the next page of results are returned
        :return: PageComponentXO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository", "continuation_token"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_components" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository' is set
        if "repository" not in params or params["repository"] is None:
            raise ValueError(
                "Missing the required parameter `repository` when calling `get_components`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "continuation_token" in params:
            query_params.append(
                ("continuationToken", params["continuation_token"])
            )  # noqa: E501
        if "repository" in params:
            query_params.append(("repository", params["repository"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/components",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PageComponentXO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def upload_component(self, repository, **kwargs):  # noqa: E501
        """Upload a single component  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_component(repository, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: Name of the repository to which you would like to upload the component (required)
        :param str helm_tag:
        :param str helm_asset:
        :param str r_tag:
        :param str r_asset:
        :param str r_asset_path_id:
        :param str pypi_tag:
        :param str pypi_asset:
        :param str docker_tag:
        :param str docker_asset:
        :param str yum_directory:
        :param str yum_tag:
        :param str yum_asset:
        :param str yum_asset_filename:
        :param str rubygems_tag:
        :param str rubygems_asset:
        :param str nuget_tag:
        :param str nuget_asset:
        :param str npm_tag:
        :param str npm_asset:
        :param str raw_directory:
        :param str raw_tag:
        :param str raw_asset1:
        :param str raw_asset1_filename:
        :param str raw_asset2:
        :param str raw_asset2_filename:
        :param str raw_asset3:
        :param str raw_asset3_filename:
        :param str apt_tag:
        :param str apt_asset:
        :param str maven2_group_id:
        :param str maven2_artifact_id:
        :param str maven2_version:
        :param bool maven2_generate_pom:
        :param str maven2_packaging:
        :param str maven2_tag:
        :param str maven2_asset1:
        :param str maven2_asset1_classifier:
        :param str maven2_asset1_extension:
        :param str maven2_asset2:
        :param str maven2_asset2_classifier:
        :param str maven2_asset2_extension:
        :param str maven2_asset3:
        :param str maven2_asset3_classifier:
        :param str maven2_asset3_extension:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.upload_component_with_http_info(
                repository, **kwargs
            )  # noqa: E501
        else:
            (data) = self.upload_component_with_http_info(
                repository, **kwargs
            )  # noqa: E501
            return data

    def upload_component_with_http_info(self, repository, **kwargs):  # noqa: E501
        """Upload a single component  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_component_with_http_info(repository, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: Name of the repository to which you would like to upload the component (required)
        :param str helm_tag:
        :param str helm_asset:
        :param str r_tag:
        :param str r_asset:
        :param str r_asset_path_id:
        :param str pypi_tag:
        :param str pypi_asset:
        :param str docker_tag:
        :param str docker_asset:
        :param str yum_directory:
        :param str yum_tag:
        :param str yum_asset:
        :param str yum_asset_filename:
        :param str rubygems_tag:
        :param str rubygems_asset:
        :param str nuget_tag:
        :param str nuget_asset:
        :param str npm_tag:
        :param str npm_asset:
        :param str raw_directory:
        :param str raw_tag:
        :param str raw_asset1:
        :param str raw_asset1_filename:
        :param str raw_asset2:
        :param str raw_asset2_filename:
        :param str raw_asset3:
        :param str raw_asset3_filename:
        :param str apt_tag:
        :param str apt_asset:
        :param str maven2_group_id:
        :param str maven2_artifact_id:
        :param str maven2_version:
        :param bool maven2_generate_pom:
        :param str maven2_packaging:
        :param str maven2_tag:
        :param str maven2_asset1:
        :param str maven2_asset1_classifier:
        :param str maven2_asset1_extension:
        :param str maven2_asset2:
        :param str maven2_asset2_classifier:
        :param str maven2_asset2_extension:
        :param str maven2_asset3:
        :param str maven2_asset3_classifier:
        :param str maven2_asset3_extension:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "repository",
            "helm_tag",
            "helm_asset",
            "r_tag",
            "r_asset",
            "r_asset_path_id",
            "pypi_tag",
            "pypi_asset",
            "docker_tag",
            "docker_asset",
            "yum_directory",
            "yum_tag",
            "yum_asset",
            "yum_asset_filename",
            "rubygems_tag",
            "rubygems_asset",
            "nuget_tag",
            "nuget_asset",
            "npm_tag",
            "npm_asset",
            "raw_directory",
            "raw_tag",
            "raw_asset1",
            "raw_asset1_filename",
            "raw_asset2",
            "raw_asset2_filename",
            "raw_asset3",
            "raw_asset3_filename",
            "apt_tag",
            "apt_asset",
            "maven2_group_id",
            "maven2_artifact_id",
            "maven2_version",
            "maven2_generate_pom",
            "maven2_packaging",
            "maven2_tag",
            "maven2_asset1",
            "maven2_asset1_classifier",
            "maven2_asset1_extension",
            "maven2_asset2",
            "maven2_asset2_classifier",
            "maven2_asset2_extension",
            "maven2_asset3",
            "maven2_asset3_classifier",
            "maven2_asset3_extension",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_component" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository' is set
        if "repository" not in params or params["repository"] is None:
            raise ValueError(
                "Missing the required parameter `repository` when calling `upload_component`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "repository" in params:
            query_params.append(("repository", params["repository"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if "helm_tag" in params:
            form_params.append(("helm.tag", params["helm_tag"]))  # noqa: E501
        if "helm_asset" in params:
            local_var_files["helm.asset"] = params["helm_asset"]  # noqa: E501
        if "r_tag" in params:
            form_params.append(("r.tag", params["r_tag"]))  # noqa: E501
        if "r_asset" in params:
            local_var_files["r.asset"] = params["r_asset"]  # noqa: E501
        if "r_asset_path_id" in params:
            form_params.append(
                ("r.asset.pathId", params["r_asset_path_id"])
            )  # noqa: E501
        if "pypi_tag" in params:
            form_params.append(("pypi.tag", params["pypi_tag"]))  # noqa: E501
        if "pypi_asset" in params:
            local_var_files["pypi.asset"] = params["pypi_asset"]  # noqa: E501
        if "docker_tag" in params:
            form_params.append(("docker.tag", params["docker_tag"]))  # noqa: E501
        if "docker_asset" in params:
            local_var_files["docker.asset"] = params["docker_asset"]  # noqa: E501
        if "yum_directory" in params:
            form_params.append(("yum.directory", params["yum_directory"]))  # noqa: E501
        if "yum_tag" in params:
            form_params.append(("yum.tag", params["yum_tag"]))  # noqa: E501
        if "yum_asset" in params:
            local_var_files["yum.asset"] = params["yum_asset"]  # noqa: E501
        if "yum_asset_filename" in params:
            form_params.append(
                ("yum.asset.filename", params["yum_asset_filename"])
            )  # noqa: E501
        if "rubygems_tag" in params:
            form_params.append(("rubygems.tag", params["rubygems_tag"]))  # noqa: E501
        if "rubygems_asset" in params:
            local_var_files["rubygems.asset"] = params["rubygems_asset"]  # noqa: E501
        if "nuget_tag" in params:
            form_params.append(("nuget.tag", params["nuget_tag"]))  # noqa: E501
        if "nuget_asset" in params:
            local_var_files["nuget.asset"] = params["nuget_asset"]  # noqa: E501
        if "npm_tag" in params:
            form_params.append(("npm.tag", params["npm_tag"]))  # noqa: E501
        if "npm_asset" in params:
            local_var_files["npm.asset"] = params["npm_asset"]  # noqa: E501
        if "raw_directory" in params:
            form_params.append(("raw.directory", params["raw_directory"]))  # noqa: E501
        if "raw_tag" in params:
            form_params.append(("raw.tag", params["raw_tag"]))  # noqa: E501
        if "raw_asset1" in params:
            local_var_files["raw.asset1"] = params["raw_asset1"]  # noqa: E501
        if "raw_asset1_filename" in params:
            form_params.append(
                ("raw.asset1.filename", params["raw_asset1_filename"])
            )  # noqa: E501
        if "raw_asset2" in params:
            local_var_files["raw.asset2"] = params["raw_asset2"]  # noqa: E501
        if "raw_asset2_filename" in params:
            form_params.append(
                ("raw.asset2.filename", params["raw_asset2_filename"])
            )  # noqa: E501
        if "raw_asset3" in params:
            local_var_files["raw.asset3"] = params["raw_asset3"]  # noqa: E501
        if "raw_asset3_filename" in params:
            form_params.append(
                ("raw.asset3.filename", params["raw_asset3_filename"])
            )  # noqa: E501
        if "apt_tag" in params:
            form_params.append(("apt.tag", params["apt_tag"]))  # noqa: E501
        if "apt_asset" in params:
            local_var_files["apt.asset"] = params["apt_asset"]  # noqa: E501
        if "maven2_group_id" in params:
            form_params.append(
                ("maven2.groupId", params["maven2_group_id"])
            )  # noqa: E501
        if "maven2_artifact_id" in params:
            form_params.append(
                ("maven2.artifactId", params["maven2_artifact_id"])
            )  # noqa: E501
        if "maven2_version" in params:
            form_params.append(
                ("maven2.version", params["maven2_version"])
            )  # noqa: E501
        if "maven2_generate_pom" in params:
            form_params.append(
                ("maven2.generate-pom", params["maven2_generate_pom"])
            )  # noqa: E501
        if "maven2_packaging" in params:
            form_params.append(
                ("maven2.packaging", params["maven2_packaging"])
            )  # noqa: E501
        if "maven2_tag" in params:
            form_params.append(("maven2.tag", params["maven2_tag"]))  # noqa: E501
        if "maven2_asset1" in params:
            local_var_files["maven2.asset1"] = params["maven2_asset1"]  # noqa: E501
        if "maven2_asset1_classifier" in params:
            form_params.append(
                ("maven2.asset1.classifier", params["maven2_asset1_classifier"])
            )  # noqa: E501
        if "maven2_asset1_extension" in params:
            form_params.append(
                ("maven2.asset1.extension", params["maven2_asset1_extension"])
            )  # noqa: E501
        if "maven2_asset2" in params:
            local_var_files["maven2.asset2"] = params["maven2_asset2"]  # noqa: E501
        if "maven2_asset2_classifier" in params:
            form_params.append(
                ("maven2.asset2.classifier", params["maven2_asset2_classifier"])
            )  # noqa: E501
        if "maven2_asset2_extension" in params:
            form_params.append(
                ("maven2.asset2.extension", params["maven2_asset2_extension"])
            )  # noqa: E501
        if "maven2_asset3" in params:
            local_var_files["maven2.asset3"] = params["maven2_asset3"]  # noqa: E501
        if "maven2_asset3_classifier" in params:
            form_params.append(
                ("maven2.asset3.classifier", params["maven2_asset3_classifier"])
            )  # noqa: E501
        if "maven2_asset3_extension" in params:
            form_params.append(
                ("maven2.asset3.extension", params["maven2_asset3_extension"])
            )  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["multipart/form-data"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/components",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
