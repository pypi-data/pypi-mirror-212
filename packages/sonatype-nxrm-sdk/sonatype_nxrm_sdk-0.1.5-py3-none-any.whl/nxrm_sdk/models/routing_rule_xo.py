# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.42.0-01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RoutingRuleXO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "name": "str",
        "description": "str",
        "mode": "str",
        "matchers": "list[str]",
    }

    attribute_map = {
        "name": "name",
        "description": "description",
        "mode": "mode",
        "matchers": "matchers",
    }

    def __init__(
        self, name=None, description=None, mode=None, matchers=None
    ):  # noqa: E501
        """RoutingRuleXO - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._mode = None
        self._matchers = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if mode is not None:
            self.mode = mode
        if matchers is not None:
            self.matchers = matchers

    @property
    def name(self):
        """Gets the name of this RoutingRuleXO.  # noqa: E501


        :return: The name of this RoutingRuleXO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RoutingRuleXO.


        :param name: The name of this RoutingRuleXO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this RoutingRuleXO.  # noqa: E501


        :return: The description of this RoutingRuleXO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RoutingRuleXO.


        :param description: The description of this RoutingRuleXO.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def mode(self):
        """Gets the mode of this RoutingRuleXO.  # noqa: E501

        Determines what should be done with requests when their path matches any of the matchers  # noqa: E501

        :return: The mode of this RoutingRuleXO.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this RoutingRuleXO.

        Determines what should be done with requests when their path matches any of the matchers  # noqa: E501

        :param mode: The mode of this RoutingRuleXO.  # noqa: E501
        :type: str
        """
        allowed_values = ["BLOCK", "ALLOW"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}".format(  # noqa: E501
                    mode, allowed_values
                )
            )

        self._mode = mode

    @property
    def matchers(self):
        """Gets the matchers of this RoutingRuleXO.  # noqa: E501

        Regular expressions used to identify request paths that are allowed or blocked (depending on mode)  # noqa: E501

        :return: The matchers of this RoutingRuleXO.  # noqa: E501
        :rtype: list[str]
        """
        return self._matchers

    @matchers.setter
    def matchers(self, matchers):
        """Sets the matchers of this RoutingRuleXO.

        Regular expressions used to identify request paths that are allowed or blocked (depending on mode)  # noqa: E501

        :param matchers: The matchers of this RoutingRuleXO.  # noqa: E501
        :type: list[str]
        """

        self._matchers = matchers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(RoutingRuleXO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoutingRuleXO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
