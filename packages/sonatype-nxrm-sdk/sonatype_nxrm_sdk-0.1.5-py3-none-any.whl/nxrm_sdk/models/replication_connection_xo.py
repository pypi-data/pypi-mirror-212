# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.42.0-01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ReplicationConnectionXO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "name": "str",
        "source_repository_name": "str",
        "destination_instance_url": "str",
        "destination_instance_username": "str",
        "destination_instance_password": "str",
        "destination_repository_name": "str",
        "content_regexes": "list[str]",
        "include_existing_content": "bool",
        "use_trust_store": "bool",
    }

    attribute_map = {
        "id": "id",
        "name": "name",
        "source_repository_name": "sourceRepositoryName",
        "destination_instance_url": "destinationInstanceUrl",
        "destination_instance_username": "destinationInstanceUsername",
        "destination_instance_password": "destinationInstancePassword",
        "destination_repository_name": "destinationRepositoryName",
        "content_regexes": "contentRegexes",
        "include_existing_content": "includeExistingContent",
        "use_trust_store": "useTrustStore",
    }

    def __init__(
        self,
        id=None,
        name=None,
        source_repository_name=None,
        destination_instance_url=None,
        destination_instance_username=None,
        destination_instance_password=None,
        destination_repository_name=None,
        content_regexes=None,
        include_existing_content=None,
        use_trust_store=None,
    ):  # noqa: E501
        """ReplicationConnectionXO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._source_repository_name = None
        self._destination_instance_url = None
        self._destination_instance_username = None
        self._destination_instance_password = None
        self._destination_repository_name = None
        self._content_regexes = None
        self._include_existing_content = None
        self._use_trust_store = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        self.source_repository_name = source_repository_name
        self.destination_instance_url = destination_instance_url
        if destination_instance_username is not None:
            self.destination_instance_username = destination_instance_username
        if destination_instance_password is not None:
            self.destination_instance_password = destination_instance_password
        self.destination_repository_name = destination_repository_name
        if content_regexes is not None:
            self.content_regexes = content_regexes
        if include_existing_content is not None:
            self.include_existing_content = include_existing_content
        if use_trust_store is not None:
            self.use_trust_store = use_trust_store

    @property
    def id(self):
        """Gets the id of this ReplicationConnectionXO.  # noqa: E501

        Connection Id  # noqa: E501

        :return: The id of this ReplicationConnectionXO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReplicationConnectionXO.

        Connection Id  # noqa: E501

        :param id: The id of this ReplicationConnectionXO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ReplicationConnectionXO.  # noqa: E501

        Replication Connection Name  # noqa: E501

        :return: The name of this ReplicationConnectionXO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReplicationConnectionXO.

        Replication Connection Name  # noqa: E501

        :param name: The name of this ReplicationConnectionXO.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def source_repository_name(self):
        """Gets the source_repository_name of this ReplicationConnectionXO.  # noqa: E501

        Source Repository Name  # noqa: E501

        :return: The source_repository_name of this ReplicationConnectionXO.  # noqa: E501
        :rtype: str
        """
        return self._source_repository_name

    @source_repository_name.setter
    def source_repository_name(self, source_repository_name):
        """Sets the source_repository_name of this ReplicationConnectionXO.

        Source Repository Name  # noqa: E501

        :param source_repository_name: The source_repository_name of this ReplicationConnectionXO.  # noqa: E501
        :type: str
        """
        if source_repository_name is None:
            raise ValueError(
                "Invalid value for `source_repository_name`, must not be `None`"
            )  # noqa: E501

        self._source_repository_name = source_repository_name

    @property
    def destination_instance_url(self):
        """Gets the destination_instance_url of this ReplicationConnectionXO.  # noqa: E501

        Destination Instance URL  # noqa: E501

        :return: The destination_instance_url of this ReplicationConnectionXO.  # noqa: E501
        :rtype: str
        """
        return self._destination_instance_url

    @destination_instance_url.setter
    def destination_instance_url(self, destination_instance_url):
        """Sets the destination_instance_url of this ReplicationConnectionXO.

        Destination Instance URL  # noqa: E501

        :param destination_instance_url: The destination_instance_url of this ReplicationConnectionXO.  # noqa: E501
        :type: str
        """
        if destination_instance_url is None:
            raise ValueError(
                "Invalid value for `destination_instance_url`, must not be `None`"
            )  # noqa: E501

        self._destination_instance_url = destination_instance_url

    @property
    def destination_instance_username(self):
        """Gets the destination_instance_username of this ReplicationConnectionXO.  # noqa: E501

        Destination Instance Username  # noqa: E501

        :return: The destination_instance_username of this ReplicationConnectionXO.  # noqa: E501
        :rtype: str
        """
        return self._destination_instance_username

    @destination_instance_username.setter
    def destination_instance_username(self, destination_instance_username):
        """Sets the destination_instance_username of this ReplicationConnectionXO.

        Destination Instance Username  # noqa: E501

        :param destination_instance_username: The destination_instance_username of this ReplicationConnectionXO.  # noqa: E501
        :type: str
        """

        self._destination_instance_username = destination_instance_username

    @property
    def destination_instance_password(self):
        """Gets the destination_instance_password of this ReplicationConnectionXO.  # noqa: E501

        Destination Instance Password  # noqa: E501

        :return: The destination_instance_password of this ReplicationConnectionXO.  # noqa: E501
        :rtype: str
        """
        return self._destination_instance_password

    @destination_instance_password.setter
    def destination_instance_password(self, destination_instance_password):
        """Sets the destination_instance_password of this ReplicationConnectionXO.

        Destination Instance Password  # noqa: E501

        :param destination_instance_password: The destination_instance_password of this ReplicationConnectionXO.  # noqa: E501
        :type: str
        """

        self._destination_instance_password = destination_instance_password

    @property
    def destination_repository_name(self):
        """Gets the destination_repository_name of this ReplicationConnectionXO.  # noqa: E501

        Destination Repository Name  # noqa: E501

        :return: The destination_repository_name of this ReplicationConnectionXO.  # noqa: E501
        :rtype: str
        """
        return self._destination_repository_name

    @destination_repository_name.setter
    def destination_repository_name(self, destination_repository_name):
        """Sets the destination_repository_name of this ReplicationConnectionXO.

        Destination Repository Name  # noqa: E501

        :param destination_repository_name: The destination_repository_name of this ReplicationConnectionXO.  # noqa: E501
        :type: str
        """
        if destination_repository_name is None:
            raise ValueError(
                "Invalid value for `destination_repository_name`, must not be `None`"
            )  # noqa: E501

        self._destination_repository_name = destination_repository_name

    @property
    def content_regexes(self):
        """Gets the content_regexes of this ReplicationConnectionXO.  # noqa: E501

        Regular expressions used to filter the repository content that is replicated  # noqa: E501

        :return: The content_regexes of this ReplicationConnectionXO.  # noqa: E501
        :rtype: list[str]
        """
        return self._content_regexes

    @content_regexes.setter
    def content_regexes(self, content_regexes):
        """Sets the content_regexes of this ReplicationConnectionXO.

        Regular expressions used to filter the repository content that is replicated  # noqa: E501

        :param content_regexes: The content_regexes of this ReplicationConnectionXO.  # noqa: E501
        :type: list[str]
        """

        self._content_regexes = content_regexes

    @property
    def include_existing_content(self):
        """Gets the include_existing_content of this ReplicationConnectionXO.  # noqa: E501

        Boolean used to configure if a replication connection should include existing content  # noqa: E501

        :return: The include_existing_content of this ReplicationConnectionXO.  # noqa: E501
        :rtype: bool
        """
        return self._include_existing_content

    @include_existing_content.setter
    def include_existing_content(self, include_existing_content):
        """Sets the include_existing_content of this ReplicationConnectionXO.

        Boolean used to configure if a replication connection should include existing content  # noqa: E501

        :param include_existing_content: The include_existing_content of this ReplicationConnectionXO.  # noqa: E501
        :type: bool
        """

        self._include_existing_content = include_existing_content

    @property
    def use_trust_store(self):
        """Gets the use_trust_store of this ReplicationConnectionXO.  # noqa: E501

        Boolean used to configure if a replication connection should use the Nexus Repository Truststore  # noqa: E501

        :return: The use_trust_store of this ReplicationConnectionXO.  # noqa: E501
        :rtype: bool
        """
        return self._use_trust_store

    @use_trust_store.setter
    def use_trust_store(self, use_trust_store):
        """Sets the use_trust_store of this ReplicationConnectionXO.

        Boolean used to configure if a replication connection should use the Nexus Repository Truststore  # noqa: E501

        :param use_trust_store: The use_trust_store of this ReplicationConnectionXO.  # noqa: E501
        :type: bool
        """

        self._use_trust_store = use_trust_store

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ReplicationConnectionXO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicationConnectionXO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
