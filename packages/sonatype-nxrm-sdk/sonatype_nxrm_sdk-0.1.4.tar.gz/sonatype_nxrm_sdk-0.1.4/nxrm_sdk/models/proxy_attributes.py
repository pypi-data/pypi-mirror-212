# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.42.0-01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ProxyAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "remote_url": "str",
        "content_max_age": "int",
        "metadata_max_age": "int",
    }

    attribute_map = {
        "remote_url": "remoteUrl",
        "content_max_age": "contentMaxAge",
        "metadata_max_age": "metadataMaxAge",
    }

    def __init__(
        self, remote_url=None, content_max_age=None, metadata_max_age=None
    ):  # noqa: E501
        """ProxyAttributes - a model defined in Swagger"""  # noqa: E501
        self._remote_url = None
        self._content_max_age = None
        self._metadata_max_age = None
        self.discriminator = None
        if remote_url is not None:
            self.remote_url = remote_url
        self.content_max_age = content_max_age
        self.metadata_max_age = metadata_max_age

    @property
    def remote_url(self):
        """Gets the remote_url of this ProxyAttributes.  # noqa: E501

        Location of the remote repository being proxied  # noqa: E501

        :return: The remote_url of this ProxyAttributes.  # noqa: E501
        :rtype: str
        """
        return self._remote_url

    @remote_url.setter
    def remote_url(self, remote_url):
        """Sets the remote_url of this ProxyAttributes.

        Location of the remote repository being proxied  # noqa: E501

        :param remote_url: The remote_url of this ProxyAttributes.  # noqa: E501
        :type: str
        """

        self._remote_url = remote_url

    @property
    def content_max_age(self):
        """Gets the content_max_age of this ProxyAttributes.  # noqa: E501

        How long to cache artifacts before rechecking the remote repository (in minutes)  # noqa: E501

        :return: The content_max_age of this ProxyAttributes.  # noqa: E501
        :rtype: int
        """
        return self._content_max_age

    @content_max_age.setter
    def content_max_age(self, content_max_age):
        """Sets the content_max_age of this ProxyAttributes.

        How long to cache artifacts before rechecking the remote repository (in minutes)  # noqa: E501

        :param content_max_age: The content_max_age of this ProxyAttributes.  # noqa: E501
        :type: int
        """
        if content_max_age is None:
            raise ValueError(
                "Invalid value for `content_max_age`, must not be `None`"
            )  # noqa: E501

        self._content_max_age = content_max_age

    @property
    def metadata_max_age(self):
        """Gets the metadata_max_age of this ProxyAttributes.  # noqa: E501

        How long to cache metadata before rechecking the remote repository (in minutes)  # noqa: E501

        :return: The metadata_max_age of this ProxyAttributes.  # noqa: E501
        :rtype: int
        """
        return self._metadata_max_age

    @metadata_max_age.setter
    def metadata_max_age(self, metadata_max_age):
        """Sets the metadata_max_age of this ProxyAttributes.

        How long to cache metadata before rechecking the remote repository (in minutes)  # noqa: E501

        :param metadata_max_age: The metadata_max_age of this ProxyAttributes.  # noqa: E501
        :type: int
        """
        if metadata_max_age is None:
            raise ValueError(
                "Invalid value for `metadata_max_age`, must not be `None`"
            )  # noqa: E501

        self._metadata_max_age = metadata_max_age

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ProxyAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProxyAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
