# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.42.0-01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AptProxyRepositoriesAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"distribution": "str", "flat": "bool"}

    attribute_map = {"distribution": "distribution", "flat": "flat"}

    def __init__(self, distribution=None, flat=None):  # noqa: E501
        """AptProxyRepositoriesAttributes - a model defined in Swagger"""  # noqa: E501
        self._distribution = None
        self._flat = None
        self.discriminator = None
        if distribution is not None:
            self.distribution = distribution
        self.flat = flat

    @property
    def distribution(self):
        """Gets the distribution of this AptProxyRepositoriesAttributes.  # noqa: E501

        Distribution to fetch  # noqa: E501

        :return: The distribution of this AptProxyRepositoriesAttributes.  # noqa: E501
        :rtype: str
        """
        return self._distribution

    @distribution.setter
    def distribution(self, distribution):
        """Sets the distribution of this AptProxyRepositoriesAttributes.

        Distribution to fetch  # noqa: E501

        :param distribution: The distribution of this AptProxyRepositoriesAttributes.  # noqa: E501
        :type: str
        """

        self._distribution = distribution

    @property
    def flat(self):
        """Gets the flat of this AptProxyRepositoriesAttributes.  # noqa: E501

        Whether this repository is flat  # noqa: E501

        :return: The flat of this AptProxyRepositoriesAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._flat

    @flat.setter
    def flat(self, flat):
        """Sets the flat of this AptProxyRepositoriesAttributes.

        Whether this repository is flat  # noqa: E501

        :param flat: The flat of this AptProxyRepositoriesAttributes.  # noqa: E501
        :type: bool
        """
        if flat is None:
            raise ValueError(
                "Invalid value for `flat`, must not be `None`"
            )  # noqa: E501

        self._flat = flat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(AptProxyRepositoriesAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AptProxyRepositoriesAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
