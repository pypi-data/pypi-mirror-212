# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.42.0-01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from nxrm_sdk.api_client import ApiClient


class RepositoryManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_repository(self, **kwargs):  # noqa: E501
        """Create Maven group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MavenGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository_with_http_info(self, **kwargs):  # noqa: E501
        """Create Maven group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MavenGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/maven/group",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository1(self, **kwargs):  # noqa: E501
        """Create Maven hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MavenHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository1_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository1_with_http_info(self, **kwargs):  # noqa: E501
        """Create Maven hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MavenHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository1" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/maven/hosted",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository10(self, **kwargs):  # noqa: E501
        """Create npm proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository10(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NpmProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository10_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository10_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository10_with_http_info(self, **kwargs):  # noqa: E501
        """Create npm proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository10_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NpmProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository10" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/npm/proxy",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository11(self, **kwargs):  # noqa: E501
        """Create NuGet group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository11(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NugetGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository11_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository11_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository11_with_http_info(self, **kwargs):  # noqa: E501
        """Create NuGet group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository11_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NugetGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository11" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/nuget/group",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository12(self, **kwargs):  # noqa: E501
        """Create NuGet hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository12(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NugetHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository12_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository12_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository12_with_http_info(self, **kwargs):  # noqa: E501
        """Create NuGet hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository12_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NugetHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository12" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/nuget/hosted",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository13(self, **kwargs):  # noqa: E501
        """Create NuGet proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository13(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NugetProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository13_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository13_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository13_with_http_info(self, **kwargs):  # noqa: E501
        """Create NuGet proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository13_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NugetProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository13" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/nuget/proxy",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository14(self, **kwargs):  # noqa: E501
        """Create RubyGems group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository14(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RubyGemsGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository14_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository14_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository14_with_http_info(self, **kwargs):  # noqa: E501
        """Create RubyGems group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository14_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RubyGemsGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository14" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/rubygems/group",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository15(self, **kwargs):  # noqa: E501
        """Create RubyGems hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository15(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RubyGemsHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository15_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository15_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository15_with_http_info(self, **kwargs):  # noqa: E501
        """Create RubyGems hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository15_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RubyGemsHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository15" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/rubygems/hosted",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository16(self, **kwargs):  # noqa: E501
        """Create RubyGems proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository16(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RubyGemsProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository16_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository16_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository16_with_http_info(self, **kwargs):  # noqa: E501
        """Create RubyGems proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository16_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RubyGemsProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository16" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/rubygems/proxy",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository17(self, **kwargs):  # noqa: E501
        """Create Yum group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository17(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param YumGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository17_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository17_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository17_with_http_info(self, **kwargs):  # noqa: E501
        """Create Yum group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository17_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param YumGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository17" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/yum/group",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository18(self, **kwargs):  # noqa: E501
        """Create Yum hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository18(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param YumHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository18_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository18_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository18_with_http_info(self, **kwargs):  # noqa: E501
        """Create Yum hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository18_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param YumHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository18" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/yum/hosted",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository19(self, **kwargs):  # noqa: E501
        """Create Yum proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository19(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param YumProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository19_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository19_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository19_with_http_info(self, **kwargs):  # noqa: E501
        """Create Yum proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository19_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param YumProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository19" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/yum/proxy",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository2(self, **kwargs):  # noqa: E501
        """Create Maven proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository2(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MavenProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository2_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository2_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository2_with_http_info(self, **kwargs):  # noqa: E501
        """Create Maven proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MavenProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository2" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/maven/proxy",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository20(self, **kwargs):  # noqa: E501
        """Create Docker group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository20(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DockerGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository20_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository20_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository20_with_http_info(self, **kwargs):  # noqa: E501
        """Create Docker group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository20_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DockerGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository20" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/docker/group",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository21(self, **kwargs):  # noqa: E501
        """Create Docker hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository21(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DockerHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository21_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository21_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository21_with_http_info(self, **kwargs):  # noqa: E501
        """Create Docker hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository21_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DockerHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository21" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/docker/hosted",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository22(self, **kwargs):  # noqa: E501
        """Create Docker proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository22(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DockerProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository22_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository22_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository22_with_http_info(self, **kwargs):  # noqa: E501
        """Create Docker proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository22_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DockerProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository22" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/docker/proxy",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository23(self, **kwargs):  # noqa: E501
        """Create PyPI group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository23(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PypiGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository23_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository23_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository23_with_http_info(self, **kwargs):  # noqa: E501
        """Create PyPI group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository23_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PypiGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository23" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/pypi/group",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository24(self, **kwargs):  # noqa: E501
        """Create PyPI hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository24(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PypiHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository24_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository24_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository24_with_http_info(self, **kwargs):  # noqa: E501
        """Create PyPI hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository24_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PypiHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository24" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/pypi/hosted",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository25(self, **kwargs):  # noqa: E501
        """Create PyPI proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository25(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PypiProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository25_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository25_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository25_with_http_info(self, **kwargs):  # noqa: E501
        """Create PyPI proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository25_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PypiProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository25" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/pypi/proxy",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository26(self, **kwargs):  # noqa: E501
        """Create conda proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository26(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CondaProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository26_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository26_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository26_with_http_info(self, **kwargs):  # noqa: E501
        """Create conda proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository26_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CondaProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository26" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/conda/proxy",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository27(self, **kwargs):  # noqa: E501
        """Create Conan proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository27(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConanProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository27_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository27_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository27_with_http_info(self, **kwargs):  # noqa: E501
        """Create Conan proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository27_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConanProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository27" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/conan/proxy",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository28(self, **kwargs):  # noqa: E501
        """Create Git LFS hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository28(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GitLfsHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository28_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository28_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository28_with_http_info(self, **kwargs):  # noqa: E501
        """Create Git LFS hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository28_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GitLfsHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository28" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/gitlfs/hosted",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository29(self, **kwargs):  # noqa: E501
        """Create R group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository29(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository29_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository29_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository29_with_http_info(self, **kwargs):  # noqa: E501
        """Create R group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository29_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository29" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/r/group",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository3(self, **kwargs):  # noqa: E501
        """Create APT hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository3(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AptHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository3_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository3_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository3_with_http_info(self, **kwargs):  # noqa: E501
        """Create APT hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository3_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AptHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository3" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/apt/hosted",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository30(self, **kwargs):  # noqa: E501
        """Create R hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository30(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository30_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository30_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository30_with_http_info(self, **kwargs):  # noqa: E501
        """Create R hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository30_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository30" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/r/hosted",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository31(self, **kwargs):  # noqa: E501
        """Create R proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository31(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository31_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository31_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository31_with_http_info(self, **kwargs):  # noqa: E501
        """Create R proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository31_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository31" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/r/proxy",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository32(self, **kwargs):  # noqa: E501
        """Create Cocoapods proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository32(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CocoapodsProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository32_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository32_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository32_with_http_info(self, **kwargs):  # noqa: E501
        """Create Cocoapods proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository32_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CocoapodsProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository32" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/cocoapods/proxy",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository33(self, **kwargs):  # noqa: E501
        """Create a Go group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository33(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GolangGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository33_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository33_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository33_with_http_info(self, **kwargs):  # noqa: E501
        """Create a Go group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository33_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GolangGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository33" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/go/group",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository34(self, **kwargs):  # noqa: E501
        """Create a Go proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository34(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GolangProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository34_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository34_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository34_with_http_info(self, **kwargs):  # noqa: E501
        """Create a Go proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository34_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GolangProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository34" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/go/proxy",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository35(self, **kwargs):  # noqa: E501
        """Create p2 proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository35(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param P2ProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository35_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository35_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository35_with_http_info(self, **kwargs):  # noqa: E501
        """Create p2 proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository35_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param P2ProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository35" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/p2/proxy",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository36(self, **kwargs):  # noqa: E501
        """Create Helm hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository36(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HelmHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository36_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository36_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository36_with_http_info(self, **kwargs):  # noqa: E501
        """Create Helm hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository36_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HelmHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository36" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/helm/hosted",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository37(self, **kwargs):  # noqa: E501
        """Create Helm proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository37(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HelmProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository37_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository37_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository37_with_http_info(self, **kwargs):  # noqa: E501
        """Create Helm proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository37_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HelmProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository37" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/helm/proxy",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository38(self, **kwargs):  # noqa: E501
        """Create Bower group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository38(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BowerGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository38_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository38_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository38_with_http_info(self, **kwargs):  # noqa: E501
        """Create Bower group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository38_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BowerGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository38" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/bower/group",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository39(self, **kwargs):  # noqa: E501
        """Create Bower hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository39(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BowerHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository39_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository39_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository39_with_http_info(self, **kwargs):  # noqa: E501
        """Create Bower hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository39_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BowerHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository39" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/bower/hosted",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository4(self, **kwargs):  # noqa: E501
        """Create APT proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository4(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AptProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository4_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository4_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository4_with_http_info(self, **kwargs):  # noqa: E501
        """Create APT proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository4_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AptProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository4" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/apt/proxy",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository40(self, **kwargs):  # noqa: E501
        """Create Bower proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository40(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BowerProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository40_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository40_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository40_with_http_info(self, **kwargs):  # noqa: E501
        """Create Bower proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository40_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BowerProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository40" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/bower/proxy",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository5(self, **kwargs):  # noqa: E501
        """Create raw group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository5(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RawGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository5_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository5_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository5_with_http_info(self, **kwargs):  # noqa: E501
        """Create raw group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository5_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RawGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository5" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/raw/group",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository6(self, **kwargs):  # noqa: E501
        """Create raw hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository6(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RawHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository6_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository6_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository6_with_http_info(self, **kwargs):  # noqa: E501
        """Create raw hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository6_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RawHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository6" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/raw/hosted",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository7(self, **kwargs):  # noqa: E501
        """Create raw proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository7(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RawProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository7_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository7_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository7_with_http_info(self, **kwargs):  # noqa: E501
        """Create raw proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository7_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RawProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository7" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/raw/proxy",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository8(self, **kwargs):  # noqa: E501
        """Create npm group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository8(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NpmGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository8_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository8_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository8_with_http_info(self, **kwargs):  # noqa: E501
        """Create npm group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository8_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NpmGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository8" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/npm/group",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def create_repository9(self, **kwargs):  # noqa: E501
        """Create npm hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository9(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NpmHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.create_repository9_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository9_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository9_with_http_info(self, **kwargs):  # noqa: E501
        """Create npm hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository9_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NpmHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository9" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/npm/hosted",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_repository(self, repository_name, **kwargs):  # noqa: E501
        """Delete repository of any format  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_repository(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_repository_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_repository_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def delete_repository_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Delete repository of any format  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_repository_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_repository" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `delete_repository`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/{repositoryName}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def disable_repository_health_check(self, repository_name, **kwargs):  # noqa: E501
        """Disable repository health check. Proxy repositories only.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_repository_health_check(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to disable Repository Health Check for (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.disable_repository_health_check_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.disable_repository_health_check_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def disable_repository_health_check_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Disable repository health check. Proxy repositories only.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_repository_health_check_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to disable Repository Health Check for (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disable_repository_health_check" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `disable_repository_health_check`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/{repositoryName}/health-check",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def enable_repository_health_check(self, repository_name, **kwargs):  # noqa: E501
        """Enable repository health check. Proxy repositories only.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enable_repository_health_check(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to enable Repository Health Check for (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.enable_repository_health_check_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.enable_repository_health_check_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def enable_repository_health_check_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Enable repository health check. Proxy repositories only.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enable_repository_health_check_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to enable Repository Health Check for (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enable_repository_health_check" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `enable_repository_health_check`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/{repositoryName}/health-check",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repositories(self, **kwargs):  # noqa: E501
        """List repositories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repositories(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AbstractApiRepository]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repositories_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_repositories_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_repositories_with_http_info(self, **kwargs):  # noqa: E501
        """List repositories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repositories_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AbstractApiRepository]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repositories" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositorySettings",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[AbstractApiRepository]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repositories1(self, **kwargs):  # noqa: E501
        """List repositories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repositories1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[RepositoryXO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repositories1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_repositories1_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_repositories1_with_http_info(self, **kwargs):  # noqa: E501
        """List repositories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repositories1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[RepositoryXO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repositories1" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[RepositoryXO]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository(self, repository_name, **kwargs):  # noqa: E501
        """Get repository details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to get (required)
        :return: RepositoryXO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to get (required)
        :return: RepositoryXO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="RepositoryXO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository1(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository1(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiGroupRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository1_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository1_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository1_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository1_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiGroupRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository1" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository1`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/maven/group/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiGroupRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository10(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository10(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiHostedRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository10_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository10_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository10_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository10_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiHostedRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository10" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository10`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/npm/hosted/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiHostedRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository11(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository11(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: NpmProxyApiRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository11_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository11_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository11_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository11_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: NpmProxyApiRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository11" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository11`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/npm/proxy/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="NpmProxyApiRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository12(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository12(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiGroupRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository12_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository12_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository12_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository12_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiGroupRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository12" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository12`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/nuget/group/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiGroupRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository13(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository13(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiHostedRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository13_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository13_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository13_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository13_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiHostedRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository13" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository13`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/nuget/hosted/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiHostedRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository14(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository14(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: NugetProxyApiRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository14_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository14_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository14_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository14_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: NugetProxyApiRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository14" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository14`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/nuget/proxy/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="NugetProxyApiRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository15(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository15(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiGroupRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository15_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository15_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository15_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository15_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiGroupRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository15" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository15`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/rubygems/group/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiGroupRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository16(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository16(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiHostedRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository16_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository16_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository16_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository16_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiHostedRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository16" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository16`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/rubygems/hosted/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiHostedRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository17(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository17(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiProxyRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository17_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository17_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository17_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository17_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiProxyRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository17" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository17`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/rubygems/proxy/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiProxyRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository18(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository18(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiGroupRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository18_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository18_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository18_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository18_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiGroupRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository18" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository18`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/yum/group/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiGroupRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository19(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository19(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: YumHostedApiRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository19_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository19_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository19_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository19_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: YumHostedApiRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository19" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository19`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/yum/hosted/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="YumHostedApiRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository2(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository2(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: MavenHostedApiRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository2_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository2_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository2_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository2_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: MavenHostedApiRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository2" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository2`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/maven/hosted/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="MavenHostedApiRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository20(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository20(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiProxyRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository20_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository20_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository20_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository20_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiProxyRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository20" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository20`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/yum/proxy/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiProxyRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository21(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository21(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: DockerGroupApiRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository21_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository21_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository21_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository21_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: DockerGroupApiRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository21" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository21`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/docker/group/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="DockerGroupApiRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository22(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository22(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: DockerHostedApiRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository22_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository22_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository22_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository22_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: DockerHostedApiRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository22" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository22`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/docker/hosted/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="DockerHostedApiRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository23(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository23(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: DockerProxyApiRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository23_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository23_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository23_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository23_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: DockerProxyApiRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository23" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository23`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/docker/proxy/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="DockerProxyApiRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository24(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository24(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiGroupRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository24_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository24_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository24_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository24_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiGroupRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository24" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository24`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/pypi/group/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiGroupRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository25(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository25(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiHostedRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository25_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository25_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository25_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository25_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiHostedRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository25" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository25`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/pypi/hosted/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiHostedRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository26(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository26(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiProxyRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository26_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository26_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository26_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository26_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiProxyRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository26" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository26`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/pypi/proxy/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiProxyRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository27(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository27(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiProxyRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository27_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository27_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository27_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository27_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiProxyRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository27" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository27`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/conda/proxy/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiProxyRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository28(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository28(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiProxyRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository28_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository28_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository28_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository28_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiProxyRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository28" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository28`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/conan/proxy/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiProxyRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository29(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository29(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiHostedRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository29_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository29_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository29_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository29_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiHostedRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository29" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository29`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/gitlfs/hosted/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiHostedRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository3(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository3(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: MavenProxyApiRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository3_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository3_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository3_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository3_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: MavenProxyApiRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository3" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository3`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/maven/proxy/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="MavenProxyApiRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository30(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository30(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiGroupRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository30_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository30_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository30_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository30_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiGroupRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository30" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository30`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/r/group/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiGroupRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository31(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository31(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiHostedRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository31_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository31_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository31_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository31_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiHostedRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository31" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository31`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/r/hosted/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiHostedRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository32(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository32(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiProxyRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository32_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository32_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository32_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository32_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiProxyRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository32" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository32`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/r/proxy/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiProxyRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository33(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository33(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiProxyRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository33_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository33_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository33_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository33_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiProxyRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository33" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository33`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/cocoapods/proxy/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiProxyRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository34(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository34(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiGroupRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository34_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository34_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository34_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository34_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiGroupRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository34" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository34`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/go/group/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiGroupRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository35(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository35(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiProxyRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository35_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository35_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository35_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository35_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiProxyRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository35" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository35`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/go/proxy/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiProxyRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository36(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository36(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiProxyRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository36_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository36_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository36_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository36_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiProxyRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository36" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository36`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/p2/proxy/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiProxyRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository37(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository37(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiHostedRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository37_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository37_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository37_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository37_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiHostedRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository37" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository37`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/helm/hosted/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiHostedRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository38(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository38(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiProxyRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository38_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository38_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository38_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository38_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiProxyRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository38" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository38`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/helm/proxy/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiProxyRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository39(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository39(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiGroupRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository39_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository39_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository39_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository39_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiGroupRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository39" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository39`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/bower/group/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiGroupRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository4(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository4(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: AptHostedApiRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository4_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository4_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository4_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository4_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: AptHostedApiRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository4" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository4`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/apt/hosted/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AptHostedApiRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository40(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository40(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiHostedRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository40_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository40_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository40_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository40_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiHostedRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository40" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository40`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/bower/hosted/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiHostedRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository41(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository41(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: BowerProxyApiRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository41_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository41_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository41_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository41_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: BowerProxyApiRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository41" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository41`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/bower/proxy/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="BowerProxyApiRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository5(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository5(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: AptProxyApiRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository5_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository5_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository5_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository5_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: AptProxyApiRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository5" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository5`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/apt/proxy/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AptProxyApiRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository6(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository6(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiGroupRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository6_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository6_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository6_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository6_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiGroupRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository6" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository6`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/raw/group/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiGroupRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository7(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository7(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiHostedRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository7_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository7_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository7_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository7_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiHostedRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository7" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository7`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/raw/hosted/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiHostedRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository8(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository8(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiProxyRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository8_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository8_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository8_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository8_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiProxyRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository8" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository8`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/raw/proxy/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiProxyRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_repository9(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository9(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiGroupDeployRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_repository9_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_repository9_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def get_repository9_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Get repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repository9_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: (required)
        :return: SimpleApiGroupDeployRepository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repository9" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `get_repository9`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/npm/group/{repositoryName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="SimpleApiGroupDeployRepository",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def invalidate_cache(self, repository_name, **kwargs):  # noqa: E501
        """Invalidate repository cache. Proxy or group repositories only.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invalidate_cache(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to invalidate cache (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.invalidate_cache_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.invalidate_cache_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def invalidate_cache_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Invalidate repository cache. Proxy or group repositories only.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invalidate_cache_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to invalidate cache (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invalidate_cache" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `invalidate_cache`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/{repositoryName}/invalidate-cache",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def rebuild_index(self, repository_name, **kwargs):  # noqa: E501
        """Schedule a 'Repair - Rebuild repository search' Task. Hosted or proxy repositories only.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rebuild_index(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to rebuild index (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.rebuild_index_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.rebuild_index_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def rebuild_index_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Schedule a 'Repair - Rebuild repository search' Task. Hosted or proxy repositories only.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rebuild_index_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to rebuild index (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rebuild_index" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `rebuild_index`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/{repositoryName}/rebuild-index",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository(self, repository_name, **kwargs):  # noqa: E501
        """Update Maven group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param MavenGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository_with_http_info(self, repository_name, **kwargs):  # noqa: E501
        """Update Maven group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param MavenGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/maven/group/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository1(self, repository_name, **kwargs):  # noqa: E501
        """Update Maven hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository1(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param MavenHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository1_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository1_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository1_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update Maven hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository1_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param MavenHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository1" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository1`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/maven/hosted/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository10(self, repository_name, **kwargs):  # noqa: E501
        """Update npm proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository10(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param NpmProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository10_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository10_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository10_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update npm proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository10_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param NpmProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository10" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository10`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/npm/proxy/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository11(self, repository_name, **kwargs):  # noqa: E501
        """Update NuGet group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository11(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param NugetGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository11_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository11_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository11_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update NuGet group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository11_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param NugetGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository11" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository11`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/nuget/group/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository12(self, repository_name, **kwargs):  # noqa: E501
        """Update NuGet hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository12(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param NugetHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository12_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository12_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository12_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update NuGet hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository12_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param NugetHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository12" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository12`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/nuget/hosted/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository13(self, repository_name, **kwargs):  # noqa: E501
        """Update NuGet proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository13(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param NugetProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository13_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository13_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository13_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update NuGet proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository13_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param NugetProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository13" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository13`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/nuget/proxy/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository14(self, repository_name, **kwargs):  # noqa: E501
        """Update RubyGems group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository14(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param RubyGemsGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository14_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository14_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository14_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update RubyGems group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository14_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param RubyGemsGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository14" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository14`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/rubygems/group/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository15(self, repository_name, **kwargs):  # noqa: E501
        """Update RubyGems hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository15(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param RubyGemsHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository15_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository15_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository15_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update RubyGems hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository15_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param RubyGemsHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository15" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository15`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/rubygems/hosted/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository16(self, repository_name, **kwargs):  # noqa: E501
        """Update RubyGems proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository16(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param RubyGemsProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository16_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository16_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository16_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update RubyGems proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository16_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param RubyGemsProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository16" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository16`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/rubygems/proxy/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository17(self, repository_name, **kwargs):  # noqa: E501
        """Update Yum group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository17(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param YumGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository17_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository17_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository17_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update Yum group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository17_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param YumGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository17" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository17`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/yum/group/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository18(self, repository_name, **kwargs):  # noqa: E501
        """Update Yum hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository18(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param YumHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository18_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository18_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository18_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update Yum hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository18_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param YumHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository18" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository18`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/yum/hosted/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository19(self, repository_name, **kwargs):  # noqa: E501
        """Update Yum proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository19(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param YumProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository19_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository19_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository19_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update Yum proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository19_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param YumProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository19" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository19`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/yum/proxy/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository2(self, repository_name, **kwargs):  # noqa: E501
        """Update Maven proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository2(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param MavenProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository2_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository2_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository2_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update Maven proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository2_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param MavenProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository2" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository2`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/maven/proxy/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository20(self, repository_name, **kwargs):  # noqa: E501
        """Update Docker group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository20(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param DockerGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository20_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository20_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository20_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update Docker group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository20_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param DockerGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository20" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository20`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/docker/group/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository21(self, repository_name, **kwargs):  # noqa: E501
        """Update Docker hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository21(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param DockerHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository21_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository21_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository21_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update Docker hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository21_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param DockerHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository21" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository21`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/docker/hosted/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository22(self, repository_name, **kwargs):  # noqa: E501
        """Update Docker group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository22(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param DockerProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository22_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository22_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository22_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update Docker group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository22_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param DockerProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository22" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository22`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/docker/proxy/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository23(self, repository_name, **kwargs):  # noqa: E501
        """Update PyPI group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository23(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param PypiGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository23_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository23_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository23_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update PyPI group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository23_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param PypiGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository23" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository23`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/pypi/group/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository24(self, repository_name, **kwargs):  # noqa: E501
        """Update PyPI hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository24(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param PypiHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository24_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository24_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository24_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update PyPI hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository24_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param PypiHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository24" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository24`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/pypi/hosted/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository25(self, repository_name, **kwargs):  # noqa: E501
        """Update PyPI proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository25(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param PypiProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository25_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository25_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository25_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update PyPI proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository25_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param PypiProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository25" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository25`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/pypi/proxy/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository26(self, repository_name, **kwargs):  # noqa: E501
        """Update conda proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository26(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param CondaProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository26_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository26_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository26_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update conda proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository26_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param CondaProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository26" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository26`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/conda/proxy/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository27(self, repository_name, **kwargs):  # noqa: E501
        """Update Conan proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository27(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param ConanProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository27_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository27_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository27_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update Conan proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository27_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param ConanProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository27" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository27`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/conan/proxy/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository28(self, repository_name, **kwargs):  # noqa: E501
        """Update Git LFS hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository28(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param GitLfsHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository28_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository28_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository28_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update Git LFS hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository28_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param GitLfsHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository28" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository28`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/gitlfs/hosted/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository29(self, repository_name, **kwargs):  # noqa: E501
        """Update R group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository29(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param RGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository29_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository29_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository29_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update R group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository29_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param RGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository29" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository29`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/r/group/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository3(self, repository_name, **kwargs):  # noqa: E501
        """Update APT hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository3(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param AptHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository3_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository3_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository3_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update APT hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository3_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param AptHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository3" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository3`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/apt/hosted/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository30(self, repository_name, **kwargs):  # noqa: E501
        """Update R hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository30(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param RHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository30_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository30_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository30_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update R hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository30_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param RHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository30" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository30`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/r/hosted/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository31(self, repository_name, **kwargs):  # noqa: E501
        """Update R proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository31(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param RProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository31_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository31_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository31_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update R proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository31_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param RProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository31" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository31`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/r/proxy/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository32(self, repository_name, **kwargs):  # noqa: E501
        """Update Cocoapods proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository32(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param CocoapodsProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository32_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository32_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository32_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update Cocoapods proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository32_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param CocoapodsProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository32" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository32`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/cocoapods/proxy/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository33(self, repository_name, **kwargs):  # noqa: E501
        """Update a Go group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository33(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param GolangGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository33_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository33_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository33_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update a Go group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository33_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param GolangGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository33" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository33`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/go/group/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository34(self, repository_name, **kwargs):  # noqa: E501
        """Update a Go proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository34(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param GolangProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository34_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository34_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository34_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update a Go proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository34_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param GolangProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository34" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository34`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/go/proxy/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository35(self, repository_name, **kwargs):  # noqa: E501
        """Update p2 proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository35(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param P2ProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository35_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository35_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository35_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update p2 proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository35_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param P2ProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository35" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository35`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/p2/proxy/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository36(self, repository_name, **kwargs):  # noqa: E501
        """Update Helm hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository36(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param HelmHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository36_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository36_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository36_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update Helm hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository36_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param HelmHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository36" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository36`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/helm/hosted/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository37(self, repository_name, **kwargs):  # noqa: E501
        """Update Helm proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository37(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param HelmProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository37_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository37_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository37_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update Helm proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository37_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param HelmProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository37" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository37`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/helm/proxy/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository38(self, repository_name, **kwargs):  # noqa: E501
        """Update Bower group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository38(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param BowerGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository38_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository38_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository38_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update Bower group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository38_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param BowerGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository38" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository38`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/bower/group/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository39(self, repository_name, **kwargs):  # noqa: E501
        """Update Bower hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository39(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param BowerHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository39_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository39_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository39_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update Bower hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository39_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param BowerHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository39" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository39`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/bower/hosted/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository4(self, repository_name, **kwargs):  # noqa: E501
        """Update APT proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository4(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param AptProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository4_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository4_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository4_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update APT proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository4_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param AptProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository4" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository4`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/apt/proxy/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository40(self, repository_name, **kwargs):  # noqa: E501
        """Update Bower proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository40(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param BowerProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository40_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository40_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository40_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update Bower proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository40_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param BowerProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository40" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository40`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/bower/proxy/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository5(self, repository_name, **kwargs):  # noqa: E501
        """Update raw group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository5(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param RawGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository5_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository5_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository5_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update raw group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository5_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param RawGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository5" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository5`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/raw/group/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository6(self, repository_name, **kwargs):  # noqa: E501
        """Update raw hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository6(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param RawHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository6_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository6_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository6_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update raw hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository6_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param RawHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository6" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository6`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/raw/hosted/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository7(self, repository_name, **kwargs):  # noqa: E501
        """Update raw proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository7(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param RawProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository7_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository7_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository7_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update raw proxy repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository7_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param RawProxyRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository7" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository7`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/raw/proxy/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository8(self, repository_name, **kwargs):  # noqa: E501
        """Update npm group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository8(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param NpmGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository8_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository8_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository8_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update npm group repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository8_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param NpmGroupRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository8" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository8`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/npm/group/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_repository9(self, repository_name, **kwargs):  # noqa: E501
        """Update npm hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository9(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param NpmHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_repository9_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_repository9_with_http_info(
                repository_name, **kwargs
            )  # noqa: E501
            return data

    def update_repository9_with_http_info(
        self, repository_name, **kwargs
    ):  # noqa: E501
        """Update npm hosted repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository9_with_http_info(repository_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_name: Name of the repository to update (required)
        :param NpmHostedRepositoryApiRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["repository_name", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository9" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'repository_name' is set
        if "repository_name" not in params or params["repository_name"] is None:
            raise ValueError(
                "Missing the required parameter `repository_name` when calling `update_repository9`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "repository_name" in params:
            path_params["repositoryName"] = params["repository_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/repositories/npm/hosted/{repositoryName}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
