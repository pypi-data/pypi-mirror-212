# coding: utf-8

"""
    Nexus Repository Manager REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.42.0-01
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from nxrm_sdk.api_client import ApiClient


class SecurityCertificatesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_certificate(self, **kwargs):  # noqa: E501
        """Add a certificate to the trust store.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_certificate(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: The certificate to add encoded in PEM format
        :return: ApiCertificate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.add_certificate_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_certificate_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_certificate_with_http_info(self, **kwargs):  # noqa: E501
        """Add a certificate to the trust store.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_certificate_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: The certificate to add encoded in PEM format
        :return: ApiCertificate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_certificate" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["*/*"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/security/ssl/truststore",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ApiCertificate",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_trust_store_certificates(self, **kwargs):  # noqa: E501
        """Retrieve a list of certificates added to the trust store.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trust_store_certificates(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ApiCertificate]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_trust_store_certificates_with_http_info(
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_trust_store_certificates_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def get_trust_store_certificates_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a list of certificates added to the trust store.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trust_store_certificates_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ApiCertificate]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trust_store_certificates" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/security/ssl/truststore",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ApiCertificate]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def remove_certificate(self, id, **kwargs):  # noqa: E501
        """Remove a certificate in the trust store.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_certificate(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the certificate that should be removed. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.remove_certificate_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_certificate_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def remove_certificate_with_http_info(self, id, **kwargs):  # noqa: E501
        """Remove a certificate in the trust store.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_certificate_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the certificate that should be removed. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_certificate" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if "id" not in params or params["id"] is None:
            raise ValueError(
                "Missing the required parameter `id` when calling `remove_certificate`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/security/ssl/truststore/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def retrieve_certificate(self, host, **kwargs):  # noqa: E501
        """Helper method to retrieve certificate details from a remote system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_certificate(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: The remote system's host name (required)
        :param int port: The port on the remote system to connect to
        :param str protocol_hint: An optional hint of the protocol to try for the connection
        :return: ApiCertificate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.retrieve_certificate_with_http_info(
                host, **kwargs
            )  # noqa: E501
        else:
            (data) = self.retrieve_certificate_with_http_info(
                host, **kwargs
            )  # noqa: E501
            return data

    def retrieve_certificate_with_http_info(self, host, **kwargs):  # noqa: E501
        """Helper method to retrieve certificate details from a remote system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_certificate_with_http_info(host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str host: The remote system's host name (required)
        :param int port: The port on the remote system to connect to
        :param str protocol_hint: An optional hint of the protocol to try for the connection
        :return: ApiCertificate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["host", "port", "protocol_hint"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_certificate" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'host' is set
        if "host" not in params or params["host"] is None:
            raise ValueError(
                "Missing the required parameter `host` when calling `retrieve_certificate`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "host" in params:
            query_params.append(("host", params["host"]))  # noqa: E501
        if "port" in params:
            query_params.append(("port", params["port"]))  # noqa: E501
        if "protocol_hint" in params:
            query_params.append(("protocolHint", params["protocol_hint"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/v1/security/ssl",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ApiCertificate",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
