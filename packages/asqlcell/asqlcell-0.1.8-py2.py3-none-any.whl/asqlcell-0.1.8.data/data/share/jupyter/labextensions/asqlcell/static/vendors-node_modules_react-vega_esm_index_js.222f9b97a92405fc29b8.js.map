{"version":3,"file":"vendors-node_modules_react-vega_esm_index_js.222f9b97a92405fc29b8.js","mappings":"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;AACA;AACA,IAAI;;AAEJ,+BAA+B,4DAAmB;AAClD;AACA,0BAA0B,0DAAmB,CAAC,6CAAI;AAClD;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;;;;;;;;;;;;;;;;;;AC3ByC;AACQ;AACsB,CAAC;;;;;;;;;;;;;;;;ACFzD;AACf;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,GAAG;AACH;AACA;;;;;;;;;;;;;;ACXe;AACf;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;AC3BoC;AACoB;AACzC;AACf;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gEAAmB;;AAExC;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;;;AAGJ;AACA;;AAEA,mFAAmF,sDAAK;AACxF;AACA;;AAEA;AACA;;;;;;;;;;;;;;ACpCe;AACf;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;;;;;;;;;;;;;ACRe;AACf;AACA;AACA;;;;;;;;;;;;;;ACHe;AACf;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,GAAG;AACH;AACA;;;;;;;;;;;;;;ACXA;AACe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACboE;AACrD;AACf;AACA,IAAI,sEAAyB;AAC7B,GAAG;AACH;;;;;;;;;;;;;;;;;ACLkC;AACI;AACvB;AACf;AACA,QAAQ,uDAAU;AAClB;AACA,MAAM;AACN,wBAAwB,sDAAc;AACtC;AACA;AACA","sources":["webpack://asqlcell/./node_modules/fast-deep-equal/index.js","webpack://asqlcell/./node_modules/react-vega/esm/Vega.js","webpack://asqlcell/./node_modules/react-vega/esm/VegaEmbed.js","webpack://asqlcell/./node_modules/react-vega/esm/VegaLite.js","webpack://asqlcell/./node_modules/react-vega/esm/constants.js","webpack://asqlcell/./node_modules/react-vega/esm/createClassFromSpec.js","webpack://asqlcell/./node_modules/react-vega/esm/index.js","webpack://asqlcell/./node_modules/react-vega/esm/utils/addSignalListenersToView.js","webpack://asqlcell/./node_modules/react-vega/esm/utils/combineSpecWithDimension.js","webpack://asqlcell/./node_modules/react-vega/esm/utils/computeSpecChanges.js","webpack://asqlcell/./node_modules/react-vega/esm/utils/getUniqueFieldNames.js","webpack://asqlcell/./node_modules/react-vega/esm/utils/isFunction.js","webpack://asqlcell/./node_modules/react-vega/esm/utils/removeSignalListenersFromView.js","webpack://asqlcell/./node_modules/react-vega/esm/utils/shallowEqual.js","webpack://asqlcell/./node_modules/react-vega/esm/utils/updateMultipleDatasetsInView.js","webpack://asqlcell/./node_modules/react-vega/esm/utils/updateSingleDatasetInView.js"],"sourcesContent":["'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","import _pt from \"prop-types\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport shallowEqual from './utils/shallowEqual';\nimport updateMultipleDatasetsInView from './utils/updateMultipleDatasetsInView';\nimport VegaEmbed from './VegaEmbed';\nimport { NOOP } from './constants';\nconst EMPTY = {};\nexport default class Vega extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"vegaEmbed\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(this, \"handleNewView\", view => {\n      this.update();\n      const {\n        onNewView = NOOP\n      } = this.props;\n      onNewView(view);\n    });\n  }\n\n  componentDidMount() {\n    this.update();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!shallowEqual(this.props.data, prevProps.data)) {\n      this.update();\n    }\n  }\n\n  update() {\n    const {\n      data\n    } = this.props;\n\n    if (this.vegaEmbed.current && data && Object.keys(data).length > 0) {\n      this.vegaEmbed.current.modifyView(view => {\n        updateMultipleDatasetsInView(view, data);\n        view.resize().run();\n      });\n    }\n  }\n\n  render() {\n    const {\n      data,\n      ...restProps\n    } = this.props;\n    return /*#__PURE__*/React.createElement(VegaEmbed, _extends({\n      ref: this.vegaEmbed\n    }, restProps, {\n      onNewView: this.handleNewView\n    }));\n  }\n\n}\n\n_defineProperty(Vega, \"defaultProps\", {\n  data: EMPTY\n});","import _pt from \"prop-types\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport vegaEmbed from 'vega-embed';\nimport shallowEqual from './utils/shallowEqual';\nimport getUniqueFieldNames from './utils/getUniqueFieldNames';\nimport { NOOP } from './constants';\nimport addSignalListenersToView from './utils/addSignalListenersToView';\nimport computeSpecChanges from './utils/computeSpecChanges';\nimport removeSignalListenersFromView from './utils/removeSignalListenersFromView';\nimport combineSpecWithDimension from './utils/combineSpecWithDimension';\nexport default class VegaEmbed extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"containerRef\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(this, \"resultPromise\", void 0);\n\n    _defineProperty(this, \"handleError\", error => {\n      const {\n        onError = NOOP\n      } = this.props;\n      onError(error, this.containerRef.current); // eslint-disable-next-line no-console\n\n      console.warn(error);\n      return undefined;\n    });\n\n    _defineProperty(this, \"modifyView\", action => {\n      if (this.resultPromise) {\n        this.resultPromise.then(result => {\n          if (result) {\n            action(result.view);\n          }\n\n          return true;\n        }).catch(this.handleError);\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.createView();\n  }\n\n  componentDidUpdate(prevProps) {\n    const fieldSet = getUniqueFieldNames([this.props, prevProps]);\n    fieldSet.delete('className');\n    fieldSet.delete('signalListeners');\n    fieldSet.delete('spec');\n    fieldSet.delete('style');\n    fieldSet.delete('width');\n    fieldSet.delete('height'); // Only create a new view if necessary\n\n    if (Array.from(fieldSet).some(f => this.props[f] !== prevProps[f])) {\n      this.clearView();\n      this.createView();\n    } else {\n      const specChanges = computeSpecChanges(combineSpecWithDimension(this.props), combineSpecWithDimension(prevProps));\n      const {\n        signalListeners: newSignalListeners\n      } = this.props;\n      const {\n        signalListeners: oldSignalListeners\n      } = prevProps;\n\n      if (specChanges) {\n        if (specChanges.isExpensive) {\n          this.clearView();\n          this.createView();\n        } else {\n          const areSignalListenersChanged = !shallowEqual(newSignalListeners, oldSignalListeners);\n          this.modifyView(view => {\n            if (specChanges.width !== false) {\n              view.width(specChanges.width);\n            }\n\n            if (specChanges.height !== false) {\n              view.height(specChanges.height);\n            }\n\n            if (areSignalListenersChanged) {\n              if (oldSignalListeners) {\n                removeSignalListenersFromView(view, oldSignalListeners);\n              }\n\n              if (newSignalListeners) {\n                addSignalListenersToView(view, newSignalListeners);\n              }\n            }\n\n            view.run();\n          });\n        }\n      } else if (!shallowEqual(newSignalListeners, oldSignalListeners)) {\n        this.modifyView(view => {\n          if (oldSignalListeners) {\n            removeSignalListenersFromView(view, oldSignalListeners);\n          }\n\n          if (newSignalListeners) {\n            addSignalListenersToView(view, newSignalListeners);\n          }\n\n          view.run();\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.clearView();\n  }\n\n  createView() {\n    const {\n      spec,\n      onNewView,\n      signalListeners = {},\n      width,\n      height,\n      ...options\n    } = this.props;\n\n    if (this.containerRef.current) {\n      const finalSpec = combineSpecWithDimension(this.props);\n      this.resultPromise = vegaEmbed(this.containerRef.current, finalSpec, options).then(result => {\n        if (result) {\n          const {\n            view\n          } = result;\n\n          if (addSignalListenersToView(view, signalListeners)) {\n            view.run();\n          }\n        }\n\n        return result;\n      }).catch(this.handleError);\n\n      if (onNewView) {\n        this.modifyView(onNewView);\n      }\n    }\n  }\n\n  clearView() {\n    if (this.resultPromise) {\n      this.resultPromise.then(result => {\n        if (result) {\n          result.finalize();\n        }\n      }).catch(this.handleError);\n    }\n\n    this.resultPromise = undefined;\n    return this;\n  }\n\n  render() {\n    const {\n      className,\n      style\n    } = this.props; // Create the container Vega draws inside\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.containerRef,\n      className: className,\n      style: style\n    });\n  }\n\n}\n\n_defineProperty(VegaEmbed, \"propTypes\", {\n  className: _pt.string,\n  onError: _pt.func\n});","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport Vega from './Vega';\n\n/**\n * Syntactic sugar for using vega-lite with Vega\n * @param props\n */\nexport default function VegaLite(props) {\n  return /*#__PURE__*/React.createElement(Vega, _extends({}, props, {\n    mode: \"vega-lite\"\n  }));\n}","// eslint-disable-next-line import/prefer-default-export\nexport const NOOP = () => {};","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Vega from './Vega';\nexport default function createClassFromSpec(_ref) {\n  let {\n    mode,\n    spec\n  } = _ref;\n\n  class FixedVegaChart extends React.PureComponent {\n    render() {\n      return /*#__PURE__*/React.createElement(Vega, _extends({\n        mode: mode,\n        spec: spec\n      }, this.props));\n    }\n\n  }\n\n  _defineProperty(FixedVegaChart, \"getSpec\", function getSpec() {\n    return spec;\n  });\n\n  return FixedVegaChart;\n}","export { default as Vega } from './Vega';\nexport { default as VegaLite } from './VegaLite';\nexport { default as createClassFromSpec } from './createClassFromSpec'; // Export types\n\nexport * from './types';","export default function addSignalListenersToView(view, signalListeners) {\n  const signalNames = Object.keys(signalListeners);\n  signalNames.forEach(signalName => {\n    try {\n      view.addSignalListener(signalName, signalListeners[signalName]);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.warn('Cannot add invalid signal listener.', error);\n    }\n  });\n  return signalNames.length > 0;\n}","export default function combineSpecWithDimension(props) {\n  const {\n    spec,\n    width,\n    height\n  } = props;\n\n  if (typeof width !== 'undefined' && typeof height !== 'undefined') {\n    return { ...spec,\n      width,\n      height\n    };\n  }\n\n  if (typeof width !== 'undefined') {\n    return { ...spec,\n      width\n    };\n  }\n\n  if (typeof height !== 'undefined') {\n    return { ...spec,\n      height\n    };\n  }\n\n  return spec;\n}","import equal from 'fast-deep-equal';\nimport getUniqueFieldNames from './getUniqueFieldNames';\nexport default function computeSpecChanges(newSpec, oldSpec) {\n  if (newSpec === oldSpec) return false;\n  const changes = {\n    width: false,\n    height: false,\n    isExpensive: false\n  };\n  const fieldNames = getUniqueFieldNames([newSpec, oldSpec]);\n\n  if (fieldNames.has('width') && (!('width' in newSpec) || !('width' in oldSpec) || newSpec.width !== oldSpec.width)) {\n    if ('width' in newSpec && typeof newSpec.width === 'number') {\n      changes.width = newSpec.width;\n    } else {\n      changes.isExpensive = true;\n    }\n  }\n\n  if (fieldNames.has('height') && (!('height' in newSpec) || !('height' in oldSpec) || newSpec.height !== oldSpec.height)) {\n    if ('height' in newSpec && typeof newSpec.height === 'number') {\n      changes.height = newSpec.height;\n    } else {\n      changes.isExpensive = true;\n    }\n  } // Delete cheap fields\n\n\n  fieldNames.delete('width');\n  fieldNames.delete('height');\n\n  if ([...fieldNames].some(field => !(field in newSpec) || !(field in oldSpec) || !equal(newSpec[field], oldSpec[field]))) {\n    changes.isExpensive = true;\n  }\n\n  return changes.width !== false || changes.height !== false || changes.isExpensive ? changes : false;\n}","export default function getUniqueFieldNames(objects) {\n  const fields = new Set();\n  objects.forEach(o => {\n    Object.keys(o).forEach(field => {\n      fields.add(field);\n    });\n  });\n  return fields;\n}","export default function isFunction(functionToCheck) {\n  const getType = {};\n  return !!functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}","export default function removeSignalListenersFromView(view, signalListeners) {\n  const signalNames = Object.keys(signalListeners);\n  signalNames.forEach(signalName => {\n    try {\n      view.removeSignalListener(signalName, signalListeners[signalName]);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.warn('Cannot remove invalid signal listener.', error);\n    }\n  });\n  return signalNames.length > 0;\n}","const EMPTY = {};\nexport default function shallowEqual(a, b) {\n  if (a === void 0) {\n    a = EMPTY;\n  }\n\n  if (b === void 0) {\n    b = EMPTY;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  return a === b || aKeys.length === bKeys.length && aKeys.every(key => a[key] === b[key]);\n}","import updateSingleDatasetInView from './updateSingleDatasetInView';\nexport default function updateMultipleDatasetsInView(view, data) {\n  Object.keys(data).forEach(name => {\n    updateSingleDatasetInView(view, name, data[name]);\n  });\n}","import { vega } from 'vega-embed';\nimport isFunction from './isFunction';\nexport default function updateSingleDatasetInView(view, name, value) {\n  if (value) {\n    if (isFunction(value)) {\n      value(view.data(name));\n    } else {\n      view.change(name, vega.changeset().remove(() => true).insert(value));\n    }\n  }\n}"],"names":[],"sourceRoot":""}