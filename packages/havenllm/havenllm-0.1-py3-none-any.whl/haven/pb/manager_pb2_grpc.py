# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import manager_pb2 as manager__pb2


class HavenStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Generate = channel.unary_stream(
                '/haven.Haven/Generate',
                request_serializer=manager__pb2.GenerateRequest.SerializeToString,
                response_deserializer=manager__pb2.GenerateResponse.FromString,
                )
        self.ListModels = channel.unary_unary(
                '/haven.Haven/ListModels',
                request_serializer=manager__pb2.Empty.SerializeToString,
                response_deserializer=manager__pb2.ListModelsResponse.FromString,
                )
        self.CreateWorker = channel.unary_unary(
                '/haven.Haven/CreateWorker',
                request_serializer=manager__pb2.ModelName.SerializeToString,
                response_deserializer=manager__pb2.StatusResponse.FromString,
                )
        self.PauseWorker = channel.unary_unary(
                '/haven.Haven/PauseWorker',
                request_serializer=manager__pb2.ModelName.SerializeToString,
                response_deserializer=manager__pb2.StatusResponse.FromString,
                )
        self.ResumeWorker = channel.unary_unary(
                '/haven.Haven/ResumeWorker',
                request_serializer=manager__pb2.ModelName.SerializeToString,
                response_deserializer=manager__pb2.StatusResponse.FromString,
                )
        self.DeleteWorker = channel.unary_unary(
                '/haven.Haven/DeleteWorker',
                request_serializer=manager__pb2.ModelName.SerializeToString,
                response_deserializer=manager__pb2.StatusResponse.FromString,
                )


class HavenServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Generate(self, request, context):
        """Generate text from a prompt.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListModels(self, request, context):
        """Get the list of models and their descriptions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateWorker(self, request, context):
        """Worker management.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PauseWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResumeWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HavenServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Generate': grpc.unary_stream_rpc_method_handler(
                    servicer.Generate,
                    request_deserializer=manager__pb2.GenerateRequest.FromString,
                    response_serializer=manager__pb2.GenerateResponse.SerializeToString,
            ),
            'ListModels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListModels,
                    request_deserializer=manager__pb2.Empty.FromString,
                    response_serializer=manager__pb2.ListModelsResponse.SerializeToString,
            ),
            'CreateWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWorker,
                    request_deserializer=manager__pb2.ModelName.FromString,
                    response_serializer=manager__pb2.StatusResponse.SerializeToString,
            ),
            'PauseWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.PauseWorker,
                    request_deserializer=manager__pb2.ModelName.FromString,
                    response_serializer=manager__pb2.StatusResponse.SerializeToString,
            ),
            'ResumeWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.ResumeWorker,
                    request_deserializer=manager__pb2.ModelName.FromString,
                    response_serializer=manager__pb2.StatusResponse.SerializeToString,
            ),
            'DeleteWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteWorker,
                    request_deserializer=manager__pb2.ModelName.FromString,
                    response_serializer=manager__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'haven.Haven', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Haven(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Generate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/haven.Haven/Generate',
            manager__pb2.GenerateRequest.SerializeToString,
            manager__pb2.GenerateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/haven.Haven/ListModels',
            manager__pb2.Empty.SerializeToString,
            manager__pb2.ListModelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/haven.Haven/CreateWorker',
            manager__pb2.ModelName.SerializeToString,
            manager__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PauseWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/haven.Haven/PauseWorker',
            manager__pb2.ModelName.SerializeToString,
            manager__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResumeWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/haven.Haven/ResumeWorker',
            manager__pb2.ModelName.SerializeToString,
            manager__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/haven.Haven/DeleteWorker',
            manager__pb2.ModelName.SerializeToString,
            manager__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
