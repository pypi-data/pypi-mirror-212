# coding: utf-8

"""
    Fuse

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from fuse_client import schemas  # noqa: F401


class FinancialConnectionsAccountDetails(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "ach",
            "remote_id",
            "remote_data",
        }
        
        class properties:
            remote_id = schemas.StrSchema
            
            
            class ach(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        account = schemas.StrSchema
                        routing = schemas.StrSchema
                        wire_routing = schemas.StrSchema
                        bacs_routing = schemas.StrSchema
                        __annotations__ = {
                            "account": account,
                            "routing": routing,
                            "wire_routing": wire_routing,
                            "bacs_routing": bacs_routing,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["routing"]) -> MetaOapg.properties.routing: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["wire_routing"]) -> MetaOapg.properties.wire_routing: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["bacs_routing"]) -> MetaOapg.properties.bacs_routing: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["account", "routing", "wire_routing", "bacs_routing", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> typing.Union[MetaOapg.properties.account, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["routing"]) -> typing.Union[MetaOapg.properties.routing, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["wire_routing"]) -> typing.Union[MetaOapg.properties.wire_routing, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["bacs_routing"]) -> typing.Union[MetaOapg.properties.bacs_routing, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account", "routing", "wire_routing", "bacs_routing", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    account: typing.Union[MetaOapg.properties.account, str, schemas.Unset] = schemas.unset,
                    routing: typing.Union[MetaOapg.properties.routing, str, schemas.Unset] = schemas.unset,
                    wire_routing: typing.Union[MetaOapg.properties.wire_routing, str, schemas.Unset] = schemas.unset,
                    bacs_routing: typing.Union[MetaOapg.properties.bacs_routing, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'ach':
                    return super().__new__(
                        cls,
                        *_args,
                        account=account,
                        routing=routing,
                        wire_routing=wire_routing,
                        bacs_routing=bacs_routing,
                        _configuration=_configuration,
                        **kwargs,
                    )
            remote_data = schemas.AnyTypeSchema
            __annotations__ = {
                "remote_id": remote_id,
                "ach": ach,
                "remote_data": remote_data,
            }
    
    ach: MetaOapg.properties.ach
    remote_id: MetaOapg.properties.remote_id
    remote_data: MetaOapg.properties.remote_data
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remote_id"]) -> MetaOapg.properties.remote_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ach"]) -> MetaOapg.properties.ach: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remote_data"]) -> MetaOapg.properties.remote_data: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["remote_id", "ach", "remote_data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remote_id"]) -> MetaOapg.properties.remote_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ach"]) -> MetaOapg.properties.ach: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remote_data"]) -> MetaOapg.properties.remote_data: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["remote_id", "ach", "remote_data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ach: typing.Union[MetaOapg.properties.ach, dict, frozendict.frozendict, ],
        remote_id: typing.Union[MetaOapg.properties.remote_id, str, ],
        remote_data: typing.Union[MetaOapg.properties.remote_data, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FinancialConnectionsAccountDetails':
        return super().__new__(
            cls,
            *_args,
            ach=ach,
            remote_id=remote_id,
            remote_data=remote_data,
            _configuration=_configuration,
            **kwargs,
        )
