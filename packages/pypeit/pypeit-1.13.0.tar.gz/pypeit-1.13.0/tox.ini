[tox]
envlist =
    py{39,310,311}-test{,-alldeps,-shapely,-specutils}{,-cov}
    py{39,310,311}-test-numpy{120,121,122,123}
    py{39,310,311}-test-{numpy,astropy,linetools,ginga}dev
    codestyle
requires =
    setuptools >= 30.3.0
    pip >= 19.3.1
isolated_build = true

[testenv]
# Suppress display of matplotlib plots generated during docs build
setenv =
    MPLBACKEND=agg
    numpydev: PIP_EXTRA_INDEX_URL = https://pypi.anaconda.org/scipy-wheels-nightly/simple

# Pass through the following environment variables which may be needed for the CI
passenv = HOME,WINDIR,LC_ALL,LC_CTYPE,CC,CI,PYPEIT_DEV

# Run the tests in a temporary directory to make sure that we don't import
# this package from the source tree
changedir = .tmp/{envname}

# tox environments are constructed with so-called 'factors' (or terms)
# separated by hyphens, e.g. test-devdeps-cov. Lines below starting with factor:
# will only take effect if that factor is included in the environment name. To
# see a list of example environments that can be run, along with a description,
# run:
#
#     tox -l -v
#
description =
    run tests
    alldeps: with all optional dependencies
    devdeps: with the latest developer version of key dependencies
    oldestdeps: with the oldest supported version of key dependencies
    cov: and test coverage
    numpy120: with numpy 1.20.*
    numpy121: with numpy 1.21.*
    numpy122: with numpy 1.22.*
    numpy123: with numpy 1.23.*
    numpy124: with numpy 1.24.*

# The following provides some specific pinnings for key packages
deps =

    cov: coverage
    numpy120: numpy==1.20.*
    numpy121: numpy==1.21.*
    numpy122: numpy==1.22.*
    numpy123: numpy==1.23.*
    numpy124: numpy==1.24.*

    numpydev: numpy>=0.0.dev0
    astropydev: git+https://github.com/astropy/astropy.git#egg=astropy

    linetoolsdev: git+https://github.com/linetools/linetools.git#egg=linetools
    gingadev: git+https://github.com/ejeschke/ginga.git#egg=ginga

# The following indicates which extras_require from setup.cfg will be installed
extras =
    test
    alldeps: shapely,specutils,scikit-image
    shapely: shapely
    specutils: specutils

commands =
    pip freeze
    !cov: pytest --pyargs pypeit {posargs}
    cov: pytest --pyargs pypeit --cov pypeit --cov-config={toxinidir}/setup.cfg {posargs}
    cov: coverage xml -o {toxinidir}/coverage.xml

[testenv:codestyle]
skip_install = true
changedir = .
description = check code style, e.g. with pycodestyle
deps = pycodestyle
commands = pycodestyle pypeit --count --select=E9

[testenv:conda]
description = run tests in environment created via conda
requires = tox-conda
conda_env = {toxinidir}/environment.yml
commands = pytest --pyargs pypeit {posargs}
