# This file was auto-generated by Fern from our API Definition.

import json
import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from .core.api_error import ApiError
from .core.jsonable_encoder import jsonable_encoder
from .environment import ChimaEnvironment
from .types.search_response import SearchResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class Chima:
    def __init__(self, *, environment: ChimaEnvironment = ChimaEnvironment.PRODUCTION):
        self._environment = environment

    def search(
        self,
        group_id: str,
        *,
        query: str,
        provider: typing.Optional[str] = OMIT,
        id: typing.Optional[str] = OMIT,
        pdf: typing.Optional[str] = OMIT,
    ) -> SearchResponse:
        _request: typing.Dict[str, typing.Any] = {"query": query}
        if provider is not OMIT:
            _request["provider"] = provider
        if id is not OMIT:
            _request["id"] = id
        if pdf is not OMIT:
            _request["pdf"] = pdf
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", f"search/{group_id}"),
            json=jsonable_encoder(_request),
            timeout=60,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SearchResponse, _response_json)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def stream(self, *, level_context: str) -> typing.Iterator[str]:
        with httpx.stream(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "api_stream"),
            json=jsonable_encoder({"level_context": level_context}),
            timeout=60,
        ) as _response:
            if 200 <= _response.status_code < 300:
                for _text in _response.iter_text():
                    if len(_text) == 0:
                        continue
                    yield pydantic.parse_obj_as(str, json.loads(_text))  # type: ignore
                return
            try:
                _response_json = _response.json()
            except JSONDecodeError:
                raise ApiError(status_code=_response.status_code, body=_response.text)
            raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncChima:
    def __init__(self, *, environment: ChimaEnvironment = ChimaEnvironment.PRODUCTION):
        self._environment = environment

    async def search(
        self,
        group_id: str,
        *,
        query: str,
        provider: typing.Optional[str] = OMIT,
        id: typing.Optional[str] = OMIT,
        pdf: typing.Optional[str] = OMIT,
    ) -> SearchResponse:
        _request: typing.Dict[str, typing.Any] = {"query": query}
        if provider is not OMIT:
            _request["provider"] = provider
        if id is not OMIT:
            _request["id"] = id
        if pdf is not OMIT:
            _request["pdf"] = pdf
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", f"search/{group_id}"),
                json=jsonable_encoder(_request),
                timeout=60,
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SearchResponse, _response_json)  # type: ignore
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def stream(self, *, level_context: str) -> typing.AsyncIterator[str]:
        async with httpx.AsyncClient() as _client:
            async with _client.stream(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "api_stream"),
                json=jsonable_encoder({"level_context": level_context}),
                timeout=60,
            ) as _response:
                if 200 <= _response.status_code < 300:
                    async for _text in _response.aiter_text():
                        if len(_text) == 0:
                            continue
                        yield pydantic.parse_obj_as(str, json.loads(_text))  # type: ignore
                    return
                try:
                    _response_json = _response.json()
                except JSONDecodeError:
                    raise ApiError(status_code=_response.status_code, body=_response.text)
                raise ApiError(status_code=_response.status_code, body=_response_json)
