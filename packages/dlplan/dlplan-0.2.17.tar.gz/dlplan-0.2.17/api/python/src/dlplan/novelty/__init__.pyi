from typing import Iterator, List, Overload

from ..state_space import StateSpace


class NoveltyBase:
    def __init__(self, num_atoms: int, max_tuple_size: int) -> None: ...
    def atom_tuple_to_tuple_index(self, tuple_atom_indices: List[int]) -> int: ...
    def tuple_index_to_atom_tuple(self, tuple_index: int) -> List[int]: ...
    def get_max_tuple_size(self) -> int: ...
    def get_num_atoms(self) -> int: ...
    def get_num_tuples(self) -> int: ...


class TupleIndexGenerator:
    def __init__(self, novelty_base: NoveltyBase, atom_indices: List[int]): ...
    def __iter__(self) -> Iterator[List[int]]: ...


class NoveltyTable:
    def __init__(self, num_tuples: int) -> None: ...
    def reset_novelty(self, tuple_indices: List[int]) -> None: ...
    def compute_novel_tuple_indices(self, tuple_index_generator: TupleIndexGenerator) -> List[int]: ...
    @overload
    def insert(self, tuple_index_generator: TupleIndexGenerator, stop_if_novel: bool = True) -> bool: ...
    @overload 
    def insert(self, tuple_indices: List[int], stop_if_novel: bool = True) -> bool: ...


class TupleNode:
    def __init__(self, tuple_index: int, state_indices: List[int]) -> None: ...
    def __str__(self) -> str: ...
    def get_tuple_index(self) -> int: ...
    def get_state_indices(self) -> List[int]: ...
    def get_predecessors(self) -> List[int]: ...
    def get_successors(self) -> List[int]: ...


class TupleGraph:
    def __init__(self, novelty_base: NoveltyBase, state_space: StateSpace, root_state_index: int, width: int) -> None: ...
    def __str__(self) -> str: ...
    def to_dot(self, verbosity_level: int) -> str: ...
    def get_tuple_nodes_by_distance(self) -> List[List[TupleNode]]: ...
    def get_state_indices_by_distance(self) -> List[List[int]]: ...
    def get_root_state_index(self) -> int: ...
    def get_width(self) -> int: ...
