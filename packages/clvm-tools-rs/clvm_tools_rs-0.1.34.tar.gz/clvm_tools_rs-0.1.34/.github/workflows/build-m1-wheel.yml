name: Build M1 Wheels

on:
  push:
    branches:
      - main
      - dev
      - nightly
    tags:
        - '**'
  pull_request:
    branches:
      - '**'

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}--${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/long_lived/')) && github.sha || '' }}
  cancel-in-progress: true

jobs:
  build_wheels:
    name: Build wheel on Mac M1
    runs-on: [m1]
    strategy:
      fail-fast: false

    steps:
    - uses: Chia-Network/actions/clean-workspace@main

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up rust
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rust.sh
        arch -arm64 sh rust.sh -y

    - name: Build m1 wheels
      run: |
        arch -arm64 python3 -m venv venv
        . ./venv/bin/activate
        export PATH=~/.cargo/bin:$PATH
        arch -arm64 pip install maturin==0.12.20
        arch -arm64 maturin build --no-sdist -i python --release --strip --cargo-extra-args="--all-features"
        arch -arm64 cargo test --no-default-features

    - name: Install clvm_tools_rs wheel
      run: |
        . ./venv/bin/activate
        ls target/wheels/
        arch -arm64 pip install ./target/wheels/clvm_tools_rs*.whl

    - name: Install other wheels
      run: |
        . ./venv/bin/activate
        arch -arm64 python -m pip install pytest
        arch -arm64 python -m pip install blspy

    - name: install clvm & clvm_tools
      run: |
        . ./venv/bin/activate
        arch -arm64 git clone https://github.com/Chia-Network/clvm.git --branch=main --single-branch
        arch -arm64 python -m pip install ./clvm
        arch -arm64 python -m pip install clvm_rs

        arch -arm64 git clone https://github.com/Chia-Network/clvm_tools.git --branch=main --single-branch
        arch -arm64 python -m pip install ./clvm_tools

    - name: Ensure clvm, clvm_rs, clvm_tools are installed
      run: |
        . ./venv/bin/activate
        arch -arm64 python -c 'import clvm'
        arch -arm64 python -c 'import clvm; print(clvm.__file__)'
        arch -arm64 python -c 'import clvm_rs; print(clvm_rs.__file__)'
        arch -arm64 python -c 'import clvm_tools; print(clvm_tools.__file__)'
        arch -arm64 python -c 'import clvm_tools_rs; print(clvm_tools_rs.__file__)'

# Cost tests are currently failing.
#    - name: Run tests from clvm
#      run: |
#        . ./venv/bin/activate
#        cd clvm
#        arch -arm64 python -m py.test tests

    - name: Run tests from clvm_tools
      continue-on-error: true
      run: |
        . ./venv/bin/activate
        cd clvm_tools_rs
        arch -arm64 cargo test

    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels
        path: ./target/wheels

    - name: Test for secrets access
      id: check_secrets
      shell: bash
      run: |
        unset HAS_SECRET
        unset HAS_AWS_SECRET

        if [ -n "$SECRET" ]; then HAS_SECRET='true' ; fi
        echo "HAS_SECRET=${HAS_SECRET}" >>$GITHUB_OUTPUT

        if [ -n "$AWS_SECRET" ]; then HAS_AWS_SECRET='true' ; fi
        echo HAS_AWS_SECRET=${HAS_AWS_SECRET} >>$GITHUB_OUTPUT
      env:
        SECRET: "${{ secrets.test_pypi_password }}"
        AWS_SECRET: "${{ secrets.INSTALLER_UPLOAD_KEY }}"

    - name: Install twine
      run: arch -arm64 pip install twine

    - name: Publish distribution to PyPI
      if: startsWith(github.event.ref, 'refs/tags') && steps.check_secrets.outputs.HAS_SECRET
      env:
        TWINE_USERNAME: __token__
        TWINE_NON_INTERACTIVE: 1
        TWINE_PASSWORD: ${{ secrets.pypi_password }}
      run: arch -arm64 twine upload --non-interactive --skip-existing --verbose 'target/wheels/*'

    - name: Publish distribution to Test PyPI
      if: steps.check_secrets.outputs.HAS_SECRET
      env:
        TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
        TWINE_USERNAME: __token__
        TWINE_NON_INTERACTIVE: 1
        TWINE_PASSWORD: ${{ secrets.test_pypi_password }}
      run: arch -arm64 twine upload --non-interactive --skip-existing --verbose 'target/wheels/*'

    - name: Publish Nightlies
      if: steps.check_secrets.outputs.HAS_AWS_SECRET && github.ref == 'refs/heads/nightly'
      env:
        AWS_ACCESS_KEY_ID: "${{ secrets.INSTALLER_UPLOAD_KEY }}"
        AWS_SECRET_ACCESS_KEY: "${{ secrets.INSTALLER_UPLOAD_SECRET }}"
        AWS_REGION: us-west-2
      run: |
        FILES=$(find ${{ github.workspace }}/target/wheels -type f -name '*.whl')
        while IFS= read -r file; do
          filename=$(basename $file)
          aws --no-progress s3 cp "$file" "s3://download.chia.net/nightlies/clvm-tools-rs/$filename"
        done <<< "$FILES"
