# pylint: disable=too-few-public-methods

"""
This module implements OpenAI model interaction, derived from BaseLLM.
"""

import os
import json
import aiohttp
import openai
from .llm import BaseLLM


class OpenAI(BaseLLM):
    """
    Wrapper for interacting with the OpenAI API.

    Inherits from BaseLLM.

    Attributes:
        api_key (str): OpenAI API key, retrieved from environment variables.
        model (str): Identifier of the OpenAI model to use.

    Methods:
        generate(prompt: str) -> str:
            Generates text from the given prompt using OpenAI API.
    """

    def __init__(self, model: str = "text-davinci-003"):
        """
        Initializes OpenAI class with the specified model.

        Args:
            model (str): Identifier of OpenAI model. Defaults to "text-davinci-003".
        """
        super().__init__(model)
        self.api_key = os.getenv("OPENAI_API_KEY")

    def generate(self, prompt) -> str:
        """
        Generates text from a given prompt using OpenAI API.

        Args:
            prompt (str): Text prompt for generation.

        Returns:
            str: Text generated by OpenAI API.
        """
        completion = openai.Completion.create(
            model=self.model, prompt=prompt, max_tokens=250, temperature=0.7
        )

        return completion.choices[0]["text"].strip()

    async def generate_async(self, prompt) -> str:
        """
        Generates text from a prompt using OpenAI API, asynchronously.

        Args:
            prompt (str): Text prompt for generation.

        Returns:
            str: Text generated by OpenAI API.

        """
        url = "https://api.openai.com/v1/completions"

        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {self.api_key}",
        }

        data = {
            "model": self.model,
            "prompt": prompt,
            "max_tokens": 250,
            "temperature": 0.7,
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(
                url, headers=headers, data=json.dumps(data)
            ) as resp:
                response = await resp.json()

        return response["choices"][0]["text"].strip()
