# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import audience_pb2 as audience__pb2
import audience_sync_pb2 as audience__sync__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class AudienceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAudience = channel.unary_unary(
                '/calixa.domain.audience.AudienceService/GetAudience',
                request_serializer=audience__pb2.GetAudienceRequest.SerializeToString,
                response_deserializer=audience__pb2.Audience.FromString,
                )
        self.GetAudiences = channel.unary_unary(
                '/calixa.domain.audience.AudienceService/GetAudiences',
                request_serializer=audience__pb2.GetAudiencesRequest.SerializeToString,
                response_deserializer=audience__pb2.GetAudiencesResponse.FromString,
                )
        self.CreateAudience = channel.unary_unary(
                '/calixa.domain.audience.AudienceService/CreateAudience',
                request_serializer=audience__pb2.Audience.SerializeToString,
                response_deserializer=audience__pb2.Audience.FromString,
                )
        self.PutAudience = channel.unary_unary(
                '/calixa.domain.audience.AudienceService/PutAudience',
                request_serializer=audience__pb2.Audience.SerializeToString,
                response_deserializer=audience__pb2.Audience.FromString,
                )
        self.DeleteAudience = channel.unary_unary(
                '/calixa.domain.audience.AudienceService/DeleteAudience',
                request_serializer=audience__pb2.DeleteAudienceRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.GetNextAvailableSyncs = channel.unary_unary(
                '/calixa.domain.audience.AudienceService/GetNextAvailableSyncs',
                request_serializer=audience__pb2.GetNextAvailableSyncsRequest.SerializeToString,
                response_deserializer=audience__pb2.GetNextAvailableSyncsResponse.FromString,
                )
        self.GetAudienceSync = channel.unary_unary(
                '/calixa.domain.audience.AudienceService/GetAudienceSync',
                request_serializer=audience__pb2.GetAudienceSyncRequest.SerializeToString,
                response_deserializer=audience__sync__pb2.AudienceSync.FromString,
                )
        self.GetAudienceSyncs = channel.unary_unary(
                '/calixa.domain.audience.AudienceService/GetAudienceSyncs',
                request_serializer=audience__pb2.GetAudienceSyncsRequest.SerializeToString,
                response_deserializer=audience__pb2.GetAudienceSyncsResponse.FromString,
                )
        self.CreateAudienceSync = channel.unary_unary(
                '/calixa.domain.audience.AudienceService/CreateAudienceSync',
                request_serializer=audience__sync__pb2.AudienceSync.SerializeToString,
                response_deserializer=audience__sync__pb2.AudienceSync.FromString,
                )
        self.PutAudienceSync = channel.unary_unary(
                '/calixa.domain.audience.AudienceService/PutAudienceSync',
                request_serializer=audience__sync__pb2.AudienceSync.SerializeToString,
                response_deserializer=audience__sync__pb2.AudienceSync.FromString,
                )
        self.ScheduleNextAudienceSync = channel.unary_unary(
                '/calixa.domain.audience.AudienceService/ScheduleNextAudienceSync',
                request_serializer=audience__pb2.ScheduleNextAudienceSyncRequest.SerializeToString,
                response_deserializer=audience__sync__pb2.AudienceSync.FromString,
                )
        self.DeleteAudienceSync = channel.unary_unary(
                '/calixa.domain.audience.AudienceService/DeleteAudienceSync',
                request_serializer=audience__pb2.DeleteAudienceSyncRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.GetAudienceSyncLog = channel.unary_unary(
                '/calixa.domain.audience.AudienceService/GetAudienceSyncLog',
                request_serializer=audience__pb2.GetAudienceSyncLogRequest.SerializeToString,
                response_deserializer=audience__sync__pb2.AudienceSyncLog.FromString,
                )
        self.GetAudienceSyncLogs = channel.unary_unary(
                '/calixa.domain.audience.AudienceService/GetAudienceSyncLogs',
                request_serializer=audience__pb2.GetAudienceSyncLogsRequest.SerializeToString,
                response_deserializer=audience__pb2.GetAudienceSyncLogsResponse.FromString,
                )
        self.CreateAudienceSyncLog = channel.unary_unary(
                '/calixa.domain.audience.AudienceService/CreateAudienceSyncLog',
                request_serializer=audience__sync__pb2.AudienceSyncLog.SerializeToString,
                response_deserializer=audience__sync__pb2.AudienceSyncLog.FromString,
                )
        self.PutAudienceSyncLog = channel.unary_unary(
                '/calixa.domain.audience.AudienceService/PutAudienceSyncLog',
                request_serializer=audience__sync__pb2.AudienceSyncLog.SerializeToString,
                response_deserializer=audience__sync__pb2.AudienceSyncLog.FromString,
                )


class AudienceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAudience(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAudiences(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAudience(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutAudience(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAudience(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNextAvailableSyncs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAudienceSync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAudienceSyncs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAudienceSync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutAudienceSync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ScheduleNextAudienceSync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAudienceSync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAudienceSyncLog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAudienceSyncLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAudienceSyncLog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutAudienceSyncLog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AudienceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAudience': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAudience,
                    request_deserializer=audience__pb2.GetAudienceRequest.FromString,
                    response_serializer=audience__pb2.Audience.SerializeToString,
            ),
            'GetAudiences': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAudiences,
                    request_deserializer=audience__pb2.GetAudiencesRequest.FromString,
                    response_serializer=audience__pb2.GetAudiencesResponse.SerializeToString,
            ),
            'CreateAudience': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAudience,
                    request_deserializer=audience__pb2.Audience.FromString,
                    response_serializer=audience__pb2.Audience.SerializeToString,
            ),
            'PutAudience': grpc.unary_unary_rpc_method_handler(
                    servicer.PutAudience,
                    request_deserializer=audience__pb2.Audience.FromString,
                    response_serializer=audience__pb2.Audience.SerializeToString,
            ),
            'DeleteAudience': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAudience,
                    request_deserializer=audience__pb2.DeleteAudienceRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetNextAvailableSyncs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNextAvailableSyncs,
                    request_deserializer=audience__pb2.GetNextAvailableSyncsRequest.FromString,
                    response_serializer=audience__pb2.GetNextAvailableSyncsResponse.SerializeToString,
            ),
            'GetAudienceSync': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAudienceSync,
                    request_deserializer=audience__pb2.GetAudienceSyncRequest.FromString,
                    response_serializer=audience__sync__pb2.AudienceSync.SerializeToString,
            ),
            'GetAudienceSyncs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAudienceSyncs,
                    request_deserializer=audience__pb2.GetAudienceSyncsRequest.FromString,
                    response_serializer=audience__pb2.GetAudienceSyncsResponse.SerializeToString,
            ),
            'CreateAudienceSync': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAudienceSync,
                    request_deserializer=audience__sync__pb2.AudienceSync.FromString,
                    response_serializer=audience__sync__pb2.AudienceSync.SerializeToString,
            ),
            'PutAudienceSync': grpc.unary_unary_rpc_method_handler(
                    servicer.PutAudienceSync,
                    request_deserializer=audience__sync__pb2.AudienceSync.FromString,
                    response_serializer=audience__sync__pb2.AudienceSync.SerializeToString,
            ),
            'ScheduleNextAudienceSync': grpc.unary_unary_rpc_method_handler(
                    servicer.ScheduleNextAudienceSync,
                    request_deserializer=audience__pb2.ScheduleNextAudienceSyncRequest.FromString,
                    response_serializer=audience__sync__pb2.AudienceSync.SerializeToString,
            ),
            'DeleteAudienceSync': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAudienceSync,
                    request_deserializer=audience__pb2.DeleteAudienceSyncRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetAudienceSyncLog': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAudienceSyncLog,
                    request_deserializer=audience__pb2.GetAudienceSyncLogRequest.FromString,
                    response_serializer=audience__sync__pb2.AudienceSyncLog.SerializeToString,
            ),
            'GetAudienceSyncLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAudienceSyncLogs,
                    request_deserializer=audience__pb2.GetAudienceSyncLogsRequest.FromString,
                    response_serializer=audience__pb2.GetAudienceSyncLogsResponse.SerializeToString,
            ),
            'CreateAudienceSyncLog': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAudienceSyncLog,
                    request_deserializer=audience__sync__pb2.AudienceSyncLog.FromString,
                    response_serializer=audience__sync__pb2.AudienceSyncLog.SerializeToString,
            ),
            'PutAudienceSyncLog': grpc.unary_unary_rpc_method_handler(
                    servicer.PutAudienceSyncLog,
                    request_deserializer=audience__sync__pb2.AudienceSyncLog.FromString,
                    response_serializer=audience__sync__pb2.AudienceSyncLog.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'calixa.domain.audience.AudienceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AudienceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAudience(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.audience.AudienceService/GetAudience',
            audience__pb2.GetAudienceRequest.SerializeToString,
            audience__pb2.Audience.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAudiences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.audience.AudienceService/GetAudiences',
            audience__pb2.GetAudiencesRequest.SerializeToString,
            audience__pb2.GetAudiencesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAudience(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.audience.AudienceService/CreateAudience',
            audience__pb2.Audience.SerializeToString,
            audience__pb2.Audience.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PutAudience(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.audience.AudienceService/PutAudience',
            audience__pb2.Audience.SerializeToString,
            audience__pb2.Audience.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAudience(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.audience.AudienceService/DeleteAudience',
            audience__pb2.DeleteAudienceRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNextAvailableSyncs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.audience.AudienceService/GetNextAvailableSyncs',
            audience__pb2.GetNextAvailableSyncsRequest.SerializeToString,
            audience__pb2.GetNextAvailableSyncsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAudienceSync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.audience.AudienceService/GetAudienceSync',
            audience__pb2.GetAudienceSyncRequest.SerializeToString,
            audience__sync__pb2.AudienceSync.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAudienceSyncs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.audience.AudienceService/GetAudienceSyncs',
            audience__pb2.GetAudienceSyncsRequest.SerializeToString,
            audience__pb2.GetAudienceSyncsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAudienceSync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.audience.AudienceService/CreateAudienceSync',
            audience__sync__pb2.AudienceSync.SerializeToString,
            audience__sync__pb2.AudienceSync.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PutAudienceSync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.audience.AudienceService/PutAudienceSync',
            audience__sync__pb2.AudienceSync.SerializeToString,
            audience__sync__pb2.AudienceSync.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ScheduleNextAudienceSync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.audience.AudienceService/ScheduleNextAudienceSync',
            audience__pb2.ScheduleNextAudienceSyncRequest.SerializeToString,
            audience__sync__pb2.AudienceSync.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAudienceSync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.audience.AudienceService/DeleteAudienceSync',
            audience__pb2.DeleteAudienceSyncRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAudienceSyncLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.audience.AudienceService/GetAudienceSyncLog',
            audience__pb2.GetAudienceSyncLogRequest.SerializeToString,
            audience__sync__pb2.AudienceSyncLog.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAudienceSyncLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.audience.AudienceService/GetAudienceSyncLogs',
            audience__pb2.GetAudienceSyncLogsRequest.SerializeToString,
            audience__pb2.GetAudienceSyncLogsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAudienceSyncLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.audience.AudienceService/CreateAudienceSyncLog',
            audience__sync__pb2.AudienceSyncLog.SerializeToString,
            audience__sync__pb2.AudienceSyncLog.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PutAudienceSyncLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.audience.AudienceService/PutAudienceSyncLog',
            audience__sync__pb2.AudienceSyncLog.SerializeToString,
            audience__sync__pb2.AudienceSyncLog.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
