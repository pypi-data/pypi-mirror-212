# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import learning_pb2 as learning__pb2


class ModelServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCurrentModel = channel.unary_unary(
                '/calixa.domain.learning.ModelService/GetCurrentModel',
                request_serializer=learning__pb2.GetCurrentModelRequest.SerializeToString,
                response_deserializer=learning__pb2.Model.FromString,
                )
        self.PutModel = channel.unary_unary(
                '/calixa.domain.learning.ModelService/PutModel',
                request_serializer=learning__pb2.Model.SerializeToString,
                response_deserializer=learning__pb2.Model.FromString,
                )


class ModelServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCurrentModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PutModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCurrentModel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCurrentModel,
                    request_deserializer=learning__pb2.GetCurrentModelRequest.FromString,
                    response_serializer=learning__pb2.Model.SerializeToString,
            ),
            'PutModel': grpc.unary_unary_rpc_method_handler(
                    servicer.PutModel,
                    request_deserializer=learning__pb2.Model.FromString,
                    response_serializer=learning__pb2.Model.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'calixa.domain.learning.ModelService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ModelService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCurrentModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.learning.ModelService/GetCurrentModel',
            learning__pb2.GetCurrentModelRequest.SerializeToString,
            learning__pb2.Model.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PutModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.learning.ModelService/PutModel',
            learning__pb2.Model.SerializeToString,
            learning__pb2.Model.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PredictionTaskConfigServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PutPredictionTaskConfig = channel.unary_unary(
                '/calixa.domain.learning.PredictionTaskConfigService/PutPredictionTaskConfig',
                request_serializer=learning__pb2.PredictionTaskConfig.SerializeToString,
                response_deserializer=learning__pb2.PredictionTaskConfig.FromString,
                )
        self.GetPredictionTaskConfig = channel.unary_unary(
                '/calixa.domain.learning.PredictionTaskConfigService/GetPredictionTaskConfig',
                request_serializer=learning__pb2.GetPredictionTaskConfigRequest.SerializeToString,
                response_deserializer=learning__pb2.PredictionTaskConfig.FromString,
                )


class PredictionTaskConfigServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PutPredictionTaskConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPredictionTaskConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PredictionTaskConfigServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PutPredictionTaskConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.PutPredictionTaskConfig,
                    request_deserializer=learning__pb2.PredictionTaskConfig.FromString,
                    response_serializer=learning__pb2.PredictionTaskConfig.SerializeToString,
            ),
            'GetPredictionTaskConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPredictionTaskConfig,
                    request_deserializer=learning__pb2.GetPredictionTaskConfigRequest.FromString,
                    response_serializer=learning__pb2.PredictionTaskConfig.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'calixa.domain.learning.PredictionTaskConfigService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PredictionTaskConfigService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PutPredictionTaskConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.learning.PredictionTaskConfigService/PutPredictionTaskConfig',
            learning__pb2.PredictionTaskConfig.SerializeToString,
            learning__pb2.PredictionTaskConfig.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPredictionTaskConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.learning.PredictionTaskConfigService/GetPredictionTaskConfig',
            learning__pb2.GetPredictionTaskConfigRequest.SerializeToString,
            learning__pb2.PredictionTaskConfig.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LabelServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetLabel = channel.unary_unary(
                '/calixa.domain.learning.LabelService/SetLabel',
                request_serializer=learning__pb2.Label.SerializeToString,
                response_deserializer=learning__pb2.Label.FromString,
                )
        self.GetLabel = channel.unary_unary(
                '/calixa.domain.learning.LabelService/GetLabel',
                request_serializer=learning__pb2.GetLabelRequest.SerializeToString,
                response_deserializer=learning__pb2.Label.FromString,
                )
        self.DeleteLabel = channel.unary_unary(
                '/calixa.domain.learning.LabelService/DeleteLabel',
                request_serializer=learning__pb2.DeleteLabelRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class LabelServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SetLabel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLabel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteLabel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LabelServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetLabel': grpc.unary_unary_rpc_method_handler(
                    servicer.SetLabel,
                    request_deserializer=learning__pb2.Label.FromString,
                    response_serializer=learning__pb2.Label.SerializeToString,
            ),
            'GetLabel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLabel,
                    request_deserializer=learning__pb2.GetLabelRequest.FromString,
                    response_serializer=learning__pb2.Label.SerializeToString,
            ),
            'DeleteLabel': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteLabel,
                    request_deserializer=learning__pb2.DeleteLabelRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'calixa.domain.learning.LabelService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LabelService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SetLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.learning.LabelService/SetLabel',
            learning__pb2.Label.SerializeToString,
            learning__pb2.Label.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.learning.LabelService/GetLabel',
            learning__pb2.GetLabelRequest.SerializeToString,
            learning__pb2.Label.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteLabel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/calixa.domain.learning.LabelService/DeleteLabel',
            learning__pb2.DeleteLabelRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
