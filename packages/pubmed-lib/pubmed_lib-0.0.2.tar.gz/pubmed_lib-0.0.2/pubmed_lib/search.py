# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_search.ipynb.

# %% auto 0
__all__ = ['Search']

# %% ../nbs/00_search.ipynb 4
from Bio import Entrez
import os
from datetime import datetime, timedelta, date
from fastcore.all import *
from typing import Union, Optional, Any
from pydantic import BaseModel, ValidationError, validator, root_validator

# %% ../nbs/00_search.ipynb 5
from .data import *
from .result import *
from .parser import *

# %% ../nbs/00_search.ipynb 8
class Search(BaseModel):
    """
    Search class to warp the search and results
    """
    search_tag:str = None #Tag to specifiy the search, can be any from pubmed, Defaul: Title/Abstract
    retmax:int = 200 #Maximum number of results to be retrieved
    retmode:str ='xml' #Format of the returned data, options are xml, 
    sort:str='relevance' #Way to sort the results
    mindate:Optional[int] = None #Initial data to be search from, year
    maxdate:Optional[int] = None #Final data to be search from, year
    idlist:Optional[List[int]]
    email:str = None
    api_key:str = None
    
    @root_validator()
    def validate_email(cls,values:dict )->dict:
        email = get_from_dict_or_env(
            values, "email", "EMAIL"
        )
        values["email"] = email
        
        api_key = get_from_dict_or_env(values, 'api_key', 'API_KEY')
        values['api_key'] = api_key
        return values
        
    @validator('search_tag', always=True)
    def validate_search_tag(cls, v):
        if not v:
            v = 'Title/Abstract'
        if v not in SEARCH_TAGS.keys():
            raise ValueError(f'Search tag need to be some of {SEARCH_TAGS.keys()}')
        return SEARCH_TAGS[v]
    
     

# %% ../nbs/00_search.ipynb 9
@patch
def search(
    self:Search,
    query: str, #Query to be search in pubmed
):
    """
    It receive a query to be searched in pubmed and return the handler of the search
    """
    Entrez.email = self.email
    Entrez.api_key = self.api_key
    query = query+self.search_tag
    handle = Entrez.esearch(db='pubmed',
                    sort=self.sort,
                    retmax=self.retmax,
                    retmode=self.retmode,
                    term=query,
                    mindate = self.mindate,
                    maxdate =self. maxdate)
    results = Entrez.read(handle)
    return results['IdList']

# %% ../nbs/00_search.ipynb 13
@patch
def fetch_details(
    self:Search,
    idlist:List[int], #list of pubmedid to be retreived
    ):
    """
    It receive a list of pubmedIds from a search, and retrieve all the details of those publications
    """
    ids = ','.join(idlist)
    handle = Entrez.efetch(db='pubmed',
                           retmode=self.retmode,
                           id=ids)
    results = Entrez.read(handle)
    return results['PubmedArticle']

# %% ../nbs/00_search.ipynb 14
@patch
def results(
    self:Search,
    query:str, #Term to be queried in pubmed
)->list:
    """
    Method that do the search and retrieve a generator with all the infomration of the articles"""
    results = []
    id_list = self.search(query)
    articles = self.fetch_details(id_list)
    for article in articles:
        article_dict = parse_paperinfo(article)
        results.append( Result.parse_obj(article_dict))
    return results

