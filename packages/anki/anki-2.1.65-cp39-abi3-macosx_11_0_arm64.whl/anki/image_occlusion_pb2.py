# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: anki/image_occlusion.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import builder as _builder
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from anki import cards_pb2 as anki_dot_cards__pb2
from anki import collection_pb2 as anki_dot_collection__pb2
from anki import notes_pb2 as anki_dot_notes__pb2
from anki import generic_pb2 as anki_dot_generic__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x1a\x61nki/image_occlusion.proto\x12\x14\x61nki.image_occlusion\x1a\x10\x61nki/cards.proto\x1a\x15\x61nki/collection.proto\x1a\x10\x61nki/notes.proto\x1a\x12\x61nki/generic.proto\"+\n\x1bGetImageForOcclusionRequest\x12\x0c\n\x04path\x18\x01 \x01(\t\":\n\x1cGetImageForOcclusionResponse\x12\x0c\n\x04\x64\x61ta\x18\x01 \x01(\x0c\x12\x0c\n\x04name\x18\x02 \x01(\t\"\x8d\x01\n\x1c\x41\x64\x64ImageOcclusionNoteRequest\x12\x12\n\nimage_path\x18\x01 \x01(\t\x12\x12\n\nocclusions\x18\x02 \x01(\t\x12\x0e\n\x06header\x18\x03 \x01(\t\x12\x12\n\nback_extra\x18\x04 \x01(\t\x12\x0c\n\x04tags\x18\x05 \x03(\t\x12\x13\n\x0bnotetype_id\x18\x06 \x01(\x03\"/\n\x1cGetImageOcclusionNoteRequest\x12\x0f\n\x07note_id\x18\x01 \x01(\x03\"\xf9\x01\n\x1dGetImageOcclusionNoteResponse\x12R\n\x04note\x18\x01 \x01(\x0b\x32\x42.anki.image_occlusion.GetImageOcclusionNoteResponse.ImageClozeNoteH\x00\x12\x0f\n\x05\x65rror\x18\x02 \x01(\tH\x00\x1aj\n\x0eImageClozeNote\x12\x12\n\nimage_data\x18\x01 \x01(\x0c\x12\x12\n\nocclusions\x18\x02 \x01(\t\x12\x0e\n\x06header\x18\x03 \x01(\t\x12\x12\n\nback_extra\x18\x04 \x01(\t\x12\x0c\n\x04tags\x18\x05 \x03(\tB\x07\n\x05value\"x\n\x1fUpdateImageOcclusionNoteRequest\x12\x0f\n\x07note_id\x18\x01 \x01(\x03\x12\x12\n\nocclusions\x18\x02 \x01(\t\x12\x0e\n\x06header\x18\x03 \x01(\t\x12\x12\n\nback_extra\x18\x04 \x01(\t\x12\x0c\n\x04tags\x18\x05 \x03(\t2\xbf\x04\n\x15ImageOcclusionService\x12}\n\x14GetImageForOcclusion\x12\x31.anki.image_occlusion.GetImageForOcclusionRequest\x1a\x32.anki.image_occlusion.GetImageForOcclusionResponse\x12g\n\x15\x41\x64\x64ImageOcclusionNote\x12\x32.anki.image_occlusion.AddImageOcclusionNoteRequest\x1a\x1a.anki.collection.OpChanges\x12\x80\x01\n\x15GetImageOcclusionNote\x12\x32.anki.image_occlusion.GetImageOcclusionNoteRequest\x1a\x33.anki.image_occlusion.GetImageOcclusionNoteResponse\x12m\n\x18UpdateImageOcclusionNote\x12\x35.anki.image_occlusion.UpdateImageOcclusionNoteRequest\x1a\x1a.anki.collection.OpChanges\x12L\n\x19\x41\x64\x64ImageOcclusionNotetype\x12\x13.anki.generic.Empty\x1a\x1a.anki.collection.OpChangesB\x02P\x01\x62\x06proto3')

_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'anki.image_occlusion_pb2', globals())
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'P\001'
  _GETIMAGEFOROCCLUSIONREQUEST._serialized_start=131
  _GETIMAGEFOROCCLUSIONREQUEST._serialized_end=174
  _GETIMAGEFOROCCLUSIONRESPONSE._serialized_start=176
  _GETIMAGEFOROCCLUSIONRESPONSE._serialized_end=234
  _ADDIMAGEOCCLUSIONNOTEREQUEST._serialized_start=237
  _ADDIMAGEOCCLUSIONNOTEREQUEST._serialized_end=378
  _GETIMAGEOCCLUSIONNOTEREQUEST._serialized_start=380
  _GETIMAGEOCCLUSIONNOTEREQUEST._serialized_end=427
  _GETIMAGEOCCLUSIONNOTERESPONSE._serialized_start=430
  _GETIMAGEOCCLUSIONNOTERESPONSE._serialized_end=679
  _GETIMAGEOCCLUSIONNOTERESPONSE_IMAGECLOZENOTE._serialized_start=564
  _GETIMAGEOCCLUSIONNOTERESPONSE_IMAGECLOZENOTE._serialized_end=670
  _UPDATEIMAGEOCCLUSIONNOTEREQUEST._serialized_start=681
  _UPDATEIMAGEOCCLUSIONNOTEREQUEST._serialized_end=801
  _IMAGEOCCLUSIONSERVICE._serialized_start=804
  _IMAGEOCCLUSIONSERVICE._serialized_end=1379
# @@protoc_insertion_point(module_scope)
