# coding: utf-8

"""
    Sonatype Nexus IQ Server

    This documents the available APIs into [Sonatype Nexus IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management) (also knwon as Nexus Lifecycle).   # noqa: E501

    OpenAPI spec version: 156
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ConditionFact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "condition_type_id": "str",
        "condition_index": "int",
        "summary": "str",
        "reason": "str",
        "reference": "TriggerReference",
        "trigger_json": "str",
    }

    attribute_map = {
        "condition_type_id": "conditionTypeId",
        "condition_index": "conditionIndex",
        "summary": "summary",
        "reason": "reason",
        "reference": "reference",
        "trigger_json": "triggerJson",
    }

    def __init__(
        self,
        condition_type_id=None,
        condition_index=None,
        summary=None,
        reason=None,
        reference=None,
        trigger_json=None,
    ):  # noqa: E501
        """ConditionFact - a model defined in Swagger"""  # noqa: E501
        self._condition_type_id = None
        self._condition_index = None
        self._summary = None
        self._reason = None
        self._reference = None
        self._trigger_json = None
        self.discriminator = None
        if condition_type_id is not None:
            self.condition_type_id = condition_type_id
        if condition_index is not None:
            self.condition_index = condition_index
        if summary is not None:
            self.summary = summary
        if reason is not None:
            self.reason = reason
        if reference is not None:
            self.reference = reference
        if trigger_json is not None:
            self.trigger_json = trigger_json

    @property
    def condition_type_id(self):
        """Gets the condition_type_id of this ConditionFact.  # noqa: E501


        :return: The condition_type_id of this ConditionFact.  # noqa: E501
        :rtype: str
        """
        return self._condition_type_id

    @condition_type_id.setter
    def condition_type_id(self, condition_type_id):
        """Sets the condition_type_id of this ConditionFact.


        :param condition_type_id: The condition_type_id of this ConditionFact.  # noqa: E501
        :type: str
        """

        self._condition_type_id = condition_type_id

    @property
    def condition_index(self):
        """Gets the condition_index of this ConditionFact.  # noqa: E501


        :return: The condition_index of this ConditionFact.  # noqa: E501
        :rtype: int
        """
        return self._condition_index

    @condition_index.setter
    def condition_index(self, condition_index):
        """Sets the condition_index of this ConditionFact.


        :param condition_index: The condition_index of this ConditionFact.  # noqa: E501
        :type: int
        """

        self._condition_index = condition_index

    @property
    def summary(self):
        """Gets the summary of this ConditionFact.  # noqa: E501


        :return: The summary of this ConditionFact.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this ConditionFact.


        :param summary: The summary of this ConditionFact.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def reason(self):
        """Gets the reason of this ConditionFact.  # noqa: E501


        :return: The reason of this ConditionFact.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ConditionFact.


        :param reason: The reason of this ConditionFact.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def reference(self):
        """Gets the reference of this ConditionFact.  # noqa: E501


        :return: The reference of this ConditionFact.  # noqa: E501
        :rtype: TriggerReference
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this ConditionFact.


        :param reference: The reference of this ConditionFact.  # noqa: E501
        :type: TriggerReference
        """

        self._reference = reference

    @property
    def trigger_json(self):
        """Gets the trigger_json of this ConditionFact.  # noqa: E501


        :return: The trigger_json of this ConditionFact.  # noqa: E501
        :rtype: str
        """
        return self._trigger_json

    @trigger_json.setter
    def trigger_json(self, trigger_json):
        """Sets the trigger_json of this ConditionFact.


        :param trigger_json: The trigger_json of this ConditionFact.  # noqa: E501
        :type: str
        """

        self._trigger_json = trigger_json

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ConditionFact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConditionFact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
