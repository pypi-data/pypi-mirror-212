# coding: utf-8

"""
    Sonatype Nexus IQ Server

    This documents the available APIs into [Sonatype Nexus IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management) (also knwon as Nexus Lifecycle).   # noqa: E501

    OpenAPI spec version: 156
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiStaleWaiverDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "waiver_id": "str",
        "policy_id": "str",
        "policy_name": "str",
        "comment": "str",
        "scope_owner_type": "str",
        "scope_owner_id": "str",
        "scope_owner_name": "str",
        "create_time": "datetime",
        "expiry_time": "datetime",
        "creator_id": "str",
        "creator_name": "str",
        "constraint_facts": "list[ApiConstraintFactDTO]",
        "stale_evaluations": "ApiStaleEvaluationsDTO",
    }

    attribute_map = {
        "waiver_id": "waiverId",
        "policy_id": "policyId",
        "policy_name": "policyName",
        "comment": "comment",
        "scope_owner_type": "scopeOwnerType",
        "scope_owner_id": "scopeOwnerId",
        "scope_owner_name": "scopeOwnerName",
        "create_time": "createTime",
        "expiry_time": "expiryTime",
        "creator_id": "creatorId",
        "creator_name": "creatorName",
        "constraint_facts": "constraintFacts",
        "stale_evaluations": "staleEvaluations",
    }

    def __init__(
        self,
        waiver_id=None,
        policy_id=None,
        policy_name=None,
        comment=None,
        scope_owner_type=None,
        scope_owner_id=None,
        scope_owner_name=None,
        create_time=None,
        expiry_time=None,
        creator_id=None,
        creator_name=None,
        constraint_facts=None,
        stale_evaluations=None,
    ):  # noqa: E501
        """ApiStaleWaiverDTO - a model defined in Swagger"""  # noqa: E501
        self._waiver_id = None
        self._policy_id = None
        self._policy_name = None
        self._comment = None
        self._scope_owner_type = None
        self._scope_owner_id = None
        self._scope_owner_name = None
        self._create_time = None
        self._expiry_time = None
        self._creator_id = None
        self._creator_name = None
        self._constraint_facts = None
        self._stale_evaluations = None
        self.discriminator = None
        if waiver_id is not None:
            self.waiver_id = waiver_id
        if policy_id is not None:
            self.policy_id = policy_id
        if policy_name is not None:
            self.policy_name = policy_name
        if comment is not None:
            self.comment = comment
        if scope_owner_type is not None:
            self.scope_owner_type = scope_owner_type
        if scope_owner_id is not None:
            self.scope_owner_id = scope_owner_id
        if scope_owner_name is not None:
            self.scope_owner_name = scope_owner_name
        if create_time is not None:
            self.create_time = create_time
        if expiry_time is not None:
            self.expiry_time = expiry_time
        if creator_id is not None:
            self.creator_id = creator_id
        if creator_name is not None:
            self.creator_name = creator_name
        if constraint_facts is not None:
            self.constraint_facts = constraint_facts
        if stale_evaluations is not None:
            self.stale_evaluations = stale_evaluations

    @property
    def waiver_id(self):
        """Gets the waiver_id of this ApiStaleWaiverDTO.  # noqa: E501


        :return: The waiver_id of this ApiStaleWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._waiver_id

    @waiver_id.setter
    def waiver_id(self, waiver_id):
        """Sets the waiver_id of this ApiStaleWaiverDTO.


        :param waiver_id: The waiver_id of this ApiStaleWaiverDTO.  # noqa: E501
        :type: str
        """

        self._waiver_id = waiver_id

    @property
    def policy_id(self):
        """Gets the policy_id of this ApiStaleWaiverDTO.  # noqa: E501


        :return: The policy_id of this ApiStaleWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this ApiStaleWaiverDTO.


        :param policy_id: The policy_id of this ApiStaleWaiverDTO.  # noqa: E501
        :type: str
        """

        self._policy_id = policy_id

    @property
    def policy_name(self):
        """Gets the policy_name of this ApiStaleWaiverDTO.  # noqa: E501


        :return: The policy_name of this ApiStaleWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this ApiStaleWaiverDTO.


        :param policy_name: The policy_name of this ApiStaleWaiverDTO.  # noqa: E501
        :type: str
        """

        self._policy_name = policy_name

    @property
    def comment(self):
        """Gets the comment of this ApiStaleWaiverDTO.  # noqa: E501


        :return: The comment of this ApiStaleWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ApiStaleWaiverDTO.


        :param comment: The comment of this ApiStaleWaiverDTO.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def scope_owner_type(self):
        """Gets the scope_owner_type of this ApiStaleWaiverDTO.  # noqa: E501


        :return: The scope_owner_type of this ApiStaleWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._scope_owner_type

    @scope_owner_type.setter
    def scope_owner_type(self, scope_owner_type):
        """Sets the scope_owner_type of this ApiStaleWaiverDTO.


        :param scope_owner_type: The scope_owner_type of this ApiStaleWaiverDTO.  # noqa: E501
        :type: str
        """

        self._scope_owner_type = scope_owner_type

    @property
    def scope_owner_id(self):
        """Gets the scope_owner_id of this ApiStaleWaiverDTO.  # noqa: E501


        :return: The scope_owner_id of this ApiStaleWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._scope_owner_id

    @scope_owner_id.setter
    def scope_owner_id(self, scope_owner_id):
        """Sets the scope_owner_id of this ApiStaleWaiverDTO.


        :param scope_owner_id: The scope_owner_id of this ApiStaleWaiverDTO.  # noqa: E501
        :type: str
        """

        self._scope_owner_id = scope_owner_id

    @property
    def scope_owner_name(self):
        """Gets the scope_owner_name of this ApiStaleWaiverDTO.  # noqa: E501


        :return: The scope_owner_name of this ApiStaleWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._scope_owner_name

    @scope_owner_name.setter
    def scope_owner_name(self, scope_owner_name):
        """Sets the scope_owner_name of this ApiStaleWaiverDTO.


        :param scope_owner_name: The scope_owner_name of this ApiStaleWaiverDTO.  # noqa: E501
        :type: str
        """

        self._scope_owner_name = scope_owner_name

    @property
    def create_time(self):
        """Gets the create_time of this ApiStaleWaiverDTO.  # noqa: E501


        :return: The create_time of this ApiStaleWaiverDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ApiStaleWaiverDTO.


        :param create_time: The create_time of this ApiStaleWaiverDTO.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def expiry_time(self):
        """Gets the expiry_time of this ApiStaleWaiverDTO.  # noqa: E501


        :return: The expiry_time of this ApiStaleWaiverDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """Sets the expiry_time of this ApiStaleWaiverDTO.


        :param expiry_time: The expiry_time of this ApiStaleWaiverDTO.  # noqa: E501
        :type: datetime
        """

        self._expiry_time = expiry_time

    @property
    def creator_id(self):
        """Gets the creator_id of this ApiStaleWaiverDTO.  # noqa: E501


        :return: The creator_id of this ApiStaleWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this ApiStaleWaiverDTO.


        :param creator_id: The creator_id of this ApiStaleWaiverDTO.  # noqa: E501
        :type: str
        """

        self._creator_id = creator_id

    @property
    def creator_name(self):
        """Gets the creator_name of this ApiStaleWaiverDTO.  # noqa: E501


        :return: The creator_name of this ApiStaleWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._creator_name

    @creator_name.setter
    def creator_name(self, creator_name):
        """Sets the creator_name of this ApiStaleWaiverDTO.


        :param creator_name: The creator_name of this ApiStaleWaiverDTO.  # noqa: E501
        :type: str
        """

        self._creator_name = creator_name

    @property
    def constraint_facts(self):
        """Gets the constraint_facts of this ApiStaleWaiverDTO.  # noqa: E501


        :return: The constraint_facts of this ApiStaleWaiverDTO.  # noqa: E501
        :rtype: list[ApiConstraintFactDTO]
        """
        return self._constraint_facts

    @constraint_facts.setter
    def constraint_facts(self, constraint_facts):
        """Sets the constraint_facts of this ApiStaleWaiverDTO.


        :param constraint_facts: The constraint_facts of this ApiStaleWaiverDTO.  # noqa: E501
        :type: list[ApiConstraintFactDTO]
        """

        self._constraint_facts = constraint_facts

    @property
    def stale_evaluations(self):
        """Gets the stale_evaluations of this ApiStaleWaiverDTO.  # noqa: E501


        :return: The stale_evaluations of this ApiStaleWaiverDTO.  # noqa: E501
        :rtype: ApiStaleEvaluationsDTO
        """
        return self._stale_evaluations

    @stale_evaluations.setter
    def stale_evaluations(self, stale_evaluations):
        """Sets the stale_evaluations of this ApiStaleWaiverDTO.


        :param stale_evaluations: The stale_evaluations of this ApiStaleWaiverDTO.  # noqa: E501
        :type: ApiStaleEvaluationsDTO
        """

        self._stale_evaluations = stale_evaluations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ApiStaleWaiverDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiStaleWaiverDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
