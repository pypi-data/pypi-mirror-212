# coding: utf-8

"""
    Sonatype Nexus IQ Server

    This documents the available APIs into [Sonatype Nexus IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management) (also knwon as Nexus Lifecycle).   # noqa: E501

    OpenAPI spec version: 156
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiArtifactoryConnectionStatusRequestDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"enabled": "bool", "allow_override": "bool"}

    attribute_map = {"enabled": "enabled", "allow_override": "allowOverride"}

    def __init__(self, enabled=None, allow_override=None):  # noqa: E501
        """ApiArtifactoryConnectionStatusRequestDTO - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self._allow_override = None
        self.discriminator = None
        if enabled is not None:
            self.enabled = enabled
        if allow_override is not None:
            self.allow_override = allow_override

    @property
    def enabled(self):
        """Gets the enabled of this ApiArtifactoryConnectionStatusRequestDTO.  # noqa: E501


        :return: The enabled of this ApiArtifactoryConnectionStatusRequestDTO.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ApiArtifactoryConnectionStatusRequestDTO.


        :param enabled: The enabled of this ApiArtifactoryConnectionStatusRequestDTO.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def allow_override(self):
        """Gets the allow_override of this ApiArtifactoryConnectionStatusRequestDTO.  # noqa: E501


        :return: The allow_override of this ApiArtifactoryConnectionStatusRequestDTO.  # noqa: E501
        :rtype: bool
        """
        return self._allow_override

    @allow_override.setter
    def allow_override(self, allow_override):
        """Sets the allow_override of this ApiArtifactoryConnectionStatusRequestDTO.


        :param allow_override: The allow_override of this ApiArtifactoryConnectionStatusRequestDTO.  # noqa: E501
        :type: bool
        """

        self._allow_override = allow_override

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ApiArtifactoryConnectionStatusRequestDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiArtifactoryConnectionStatusRequestDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
