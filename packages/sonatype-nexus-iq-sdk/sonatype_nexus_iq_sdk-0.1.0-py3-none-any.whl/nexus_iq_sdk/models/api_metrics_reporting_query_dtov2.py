# coding: utf-8

"""
    Sonatype Nexus IQ Server

    This documents the available APIs into [Sonatype Nexus IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management) (also knwon as Nexus Lifecycle).   # noqa: E501

    OpenAPI spec version: 156
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiMetricsReportingQueryDTOV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "time_period": "str",
        "first_time_period": "str",
        "last_time_period": "str",
        "application_ids": "list[str]",
        "organization_ids": "list[str]",
    }

    attribute_map = {
        "time_period": "timePeriod",
        "first_time_period": "firstTimePeriod",
        "last_time_period": "lastTimePeriod",
        "application_ids": "applicationIds",
        "organization_ids": "organizationIds",
    }

    def __init__(
        self,
        time_period=None,
        first_time_period=None,
        last_time_period=None,
        application_ids=None,
        organization_ids=None,
    ):  # noqa: E501
        """ApiMetricsReportingQueryDTOV2 - a model defined in Swagger"""  # noqa: E501
        self._time_period = None
        self._first_time_period = None
        self._last_time_period = None
        self._application_ids = None
        self._organization_ids = None
        self.discriminator = None
        if time_period is not None:
            self.time_period = time_period
        if first_time_period is not None:
            self.first_time_period = first_time_period
        if last_time_period is not None:
            self.last_time_period = last_time_period
        if application_ids is not None:
            self.application_ids = application_ids
        if organization_ids is not None:
            self.organization_ids = organization_ids

    @property
    def time_period(self):
        """Gets the time_period of this ApiMetricsReportingQueryDTOV2.  # noqa: E501


        :return: The time_period of this ApiMetricsReportingQueryDTOV2.  # noqa: E501
        :rtype: str
        """
        return self._time_period

    @time_period.setter
    def time_period(self, time_period):
        """Sets the time_period of this ApiMetricsReportingQueryDTOV2.


        :param time_period: The time_period of this ApiMetricsReportingQueryDTOV2.  # noqa: E501
        :type: str
        """
        allowed_values = ["WEEK", "MONTH"]  # noqa: E501
        if time_period not in allowed_values:
            raise ValueError(
                "Invalid value for `time_period` ({0}), must be one of {1}".format(  # noqa: E501
                    time_period, allowed_values
                )
            )

        self._time_period = time_period

    @property
    def first_time_period(self):
        """Gets the first_time_period of this ApiMetricsReportingQueryDTOV2.  # noqa: E501


        :return: The first_time_period of this ApiMetricsReportingQueryDTOV2.  # noqa: E501
        :rtype: str
        """
        return self._first_time_period

    @first_time_period.setter
    def first_time_period(self, first_time_period):
        """Sets the first_time_period of this ApiMetricsReportingQueryDTOV2.


        :param first_time_period: The first_time_period of this ApiMetricsReportingQueryDTOV2.  # noqa: E501
        :type: str
        """

        self._first_time_period = first_time_period

    @property
    def last_time_period(self):
        """Gets the last_time_period of this ApiMetricsReportingQueryDTOV2.  # noqa: E501


        :return: The last_time_period of this ApiMetricsReportingQueryDTOV2.  # noqa: E501
        :rtype: str
        """
        return self._last_time_period

    @last_time_period.setter
    def last_time_period(self, last_time_period):
        """Sets the last_time_period of this ApiMetricsReportingQueryDTOV2.


        :param last_time_period: The last_time_period of this ApiMetricsReportingQueryDTOV2.  # noqa: E501
        :type: str
        """

        self._last_time_period = last_time_period

    @property
    def application_ids(self):
        """Gets the application_ids of this ApiMetricsReportingQueryDTOV2.  # noqa: E501


        :return: The application_ids of this ApiMetricsReportingQueryDTOV2.  # noqa: E501
        :rtype: list[str]
        """
        return self._application_ids

    @application_ids.setter
    def application_ids(self, application_ids):
        """Sets the application_ids of this ApiMetricsReportingQueryDTOV2.


        :param application_ids: The application_ids of this ApiMetricsReportingQueryDTOV2.  # noqa: E501
        :type: list[str]
        """

        self._application_ids = application_ids

    @property
    def organization_ids(self):
        """Gets the organization_ids of this ApiMetricsReportingQueryDTOV2.  # noqa: E501


        :return: The organization_ids of this ApiMetricsReportingQueryDTOV2.  # noqa: E501
        :rtype: list[str]
        """
        return self._organization_ids

    @organization_ids.setter
    def organization_ids(self, organization_ids):
        """Sets the organization_ids of this ApiMetricsReportingQueryDTOV2.


        :param organization_ids: The organization_ids of this ApiMetricsReportingQueryDTOV2.  # noqa: E501
        :type: list[str]
        """

        self._organization_ids = organization_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ApiMetricsReportingQueryDTOV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiMetricsReportingQueryDTOV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
