# coding: utf-8

"""
    Sonatype Nexus IQ Server

    This documents the available APIs into [Sonatype Nexus IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management) (also knwon as Nexus Lifecycle).   # noqa: E501

    OpenAPI spec version: 156
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiReportResultsDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "stage": "str",
        "application_id": "str",
        "evaluation_date": "datetime",
        "latest_report_html_url": "str",
        "report_html_url": "str",
        "embeddable_report_html_url": "str",
        "report_pdf_url": "str",
        "report_data_url": "str",
        "policy_evaluation_id": "str",
        "scan_id": "str",
        "is_reevaluation": "bool",
        "is_for_monitoring": "bool",
        "commit_hash": "str",
        "policy_evaluation_result": "PolicyEvaluationResult",
    }

    attribute_map = {
        "stage": "stage",
        "application_id": "applicationId",
        "evaluation_date": "evaluationDate",
        "latest_report_html_url": "latestReportHtmlUrl",
        "report_html_url": "reportHtmlUrl",
        "embeddable_report_html_url": "embeddableReportHtmlUrl",
        "report_pdf_url": "reportPdfUrl",
        "report_data_url": "reportDataUrl",
        "policy_evaluation_id": "policyEvaluationId",
        "scan_id": "scanId",
        "is_reevaluation": "isReevaluation",
        "is_for_monitoring": "isForMonitoring",
        "commit_hash": "commitHash",
        "policy_evaluation_result": "policyEvaluationResult",
    }

    def __init__(
        self,
        stage=None,
        application_id=None,
        evaluation_date=None,
        latest_report_html_url=None,
        report_html_url=None,
        embeddable_report_html_url=None,
        report_pdf_url=None,
        report_data_url=None,
        policy_evaluation_id=None,
        scan_id=None,
        is_reevaluation=None,
        is_for_monitoring=None,
        commit_hash=None,
        policy_evaluation_result=None,
    ):  # noqa: E501
        """ApiReportResultsDTO - a model defined in Swagger"""  # noqa: E501
        self._stage = None
        self._application_id = None
        self._evaluation_date = None
        self._latest_report_html_url = None
        self._report_html_url = None
        self._embeddable_report_html_url = None
        self._report_pdf_url = None
        self._report_data_url = None
        self._policy_evaluation_id = None
        self._scan_id = None
        self._is_reevaluation = None
        self._is_for_monitoring = None
        self._commit_hash = None
        self._policy_evaluation_result = None
        self.discriminator = None
        if stage is not None:
            self.stage = stage
        if application_id is not None:
            self.application_id = application_id
        if evaluation_date is not None:
            self.evaluation_date = evaluation_date
        if latest_report_html_url is not None:
            self.latest_report_html_url = latest_report_html_url
        if report_html_url is not None:
            self.report_html_url = report_html_url
        if embeddable_report_html_url is not None:
            self.embeddable_report_html_url = embeddable_report_html_url
        if report_pdf_url is not None:
            self.report_pdf_url = report_pdf_url
        if report_data_url is not None:
            self.report_data_url = report_data_url
        if policy_evaluation_id is not None:
            self.policy_evaluation_id = policy_evaluation_id
        if scan_id is not None:
            self.scan_id = scan_id
        if is_reevaluation is not None:
            self.is_reevaluation = is_reevaluation
        if is_for_monitoring is not None:
            self.is_for_monitoring = is_for_monitoring
        if commit_hash is not None:
            self.commit_hash = commit_hash
        if policy_evaluation_result is not None:
            self.policy_evaluation_result = policy_evaluation_result

    @property
    def stage(self):
        """Gets the stage of this ApiReportResultsDTO.  # noqa: E501


        :return: The stage of this ApiReportResultsDTO.  # noqa: E501
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this ApiReportResultsDTO.


        :param stage: The stage of this ApiReportResultsDTO.  # noqa: E501
        :type: str
        """

        self._stage = stage

    @property
    def application_id(self):
        """Gets the application_id of this ApiReportResultsDTO.  # noqa: E501


        :return: The application_id of this ApiReportResultsDTO.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ApiReportResultsDTO.


        :param application_id: The application_id of this ApiReportResultsDTO.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def evaluation_date(self):
        """Gets the evaluation_date of this ApiReportResultsDTO.  # noqa: E501


        :return: The evaluation_date of this ApiReportResultsDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._evaluation_date

    @evaluation_date.setter
    def evaluation_date(self, evaluation_date):
        """Sets the evaluation_date of this ApiReportResultsDTO.


        :param evaluation_date: The evaluation_date of this ApiReportResultsDTO.  # noqa: E501
        :type: datetime
        """

        self._evaluation_date = evaluation_date

    @property
    def latest_report_html_url(self):
        """Gets the latest_report_html_url of this ApiReportResultsDTO.  # noqa: E501


        :return: The latest_report_html_url of this ApiReportResultsDTO.  # noqa: E501
        :rtype: str
        """
        return self._latest_report_html_url

    @latest_report_html_url.setter
    def latest_report_html_url(self, latest_report_html_url):
        """Sets the latest_report_html_url of this ApiReportResultsDTO.


        :param latest_report_html_url: The latest_report_html_url of this ApiReportResultsDTO.  # noqa: E501
        :type: str
        """

        self._latest_report_html_url = latest_report_html_url

    @property
    def report_html_url(self):
        """Gets the report_html_url of this ApiReportResultsDTO.  # noqa: E501


        :return: The report_html_url of this ApiReportResultsDTO.  # noqa: E501
        :rtype: str
        """
        return self._report_html_url

    @report_html_url.setter
    def report_html_url(self, report_html_url):
        """Sets the report_html_url of this ApiReportResultsDTO.


        :param report_html_url: The report_html_url of this ApiReportResultsDTO.  # noqa: E501
        :type: str
        """

        self._report_html_url = report_html_url

    @property
    def embeddable_report_html_url(self):
        """Gets the embeddable_report_html_url of this ApiReportResultsDTO.  # noqa: E501


        :return: The embeddable_report_html_url of this ApiReportResultsDTO.  # noqa: E501
        :rtype: str
        """
        return self._embeddable_report_html_url

    @embeddable_report_html_url.setter
    def embeddable_report_html_url(self, embeddable_report_html_url):
        """Sets the embeddable_report_html_url of this ApiReportResultsDTO.


        :param embeddable_report_html_url: The embeddable_report_html_url of this ApiReportResultsDTO.  # noqa: E501
        :type: str
        """

        self._embeddable_report_html_url = embeddable_report_html_url

    @property
    def report_pdf_url(self):
        """Gets the report_pdf_url of this ApiReportResultsDTO.  # noqa: E501


        :return: The report_pdf_url of this ApiReportResultsDTO.  # noqa: E501
        :rtype: str
        """
        return self._report_pdf_url

    @report_pdf_url.setter
    def report_pdf_url(self, report_pdf_url):
        """Sets the report_pdf_url of this ApiReportResultsDTO.


        :param report_pdf_url: The report_pdf_url of this ApiReportResultsDTO.  # noqa: E501
        :type: str
        """

        self._report_pdf_url = report_pdf_url

    @property
    def report_data_url(self):
        """Gets the report_data_url of this ApiReportResultsDTO.  # noqa: E501


        :return: The report_data_url of this ApiReportResultsDTO.  # noqa: E501
        :rtype: str
        """
        return self._report_data_url

    @report_data_url.setter
    def report_data_url(self, report_data_url):
        """Sets the report_data_url of this ApiReportResultsDTO.


        :param report_data_url: The report_data_url of this ApiReportResultsDTO.  # noqa: E501
        :type: str
        """

        self._report_data_url = report_data_url

    @property
    def policy_evaluation_id(self):
        """Gets the policy_evaluation_id of this ApiReportResultsDTO.  # noqa: E501


        :return: The policy_evaluation_id of this ApiReportResultsDTO.  # noqa: E501
        :rtype: str
        """
        return self._policy_evaluation_id

    @policy_evaluation_id.setter
    def policy_evaluation_id(self, policy_evaluation_id):
        """Sets the policy_evaluation_id of this ApiReportResultsDTO.


        :param policy_evaluation_id: The policy_evaluation_id of this ApiReportResultsDTO.  # noqa: E501
        :type: str
        """

        self._policy_evaluation_id = policy_evaluation_id

    @property
    def scan_id(self):
        """Gets the scan_id of this ApiReportResultsDTO.  # noqa: E501


        :return: The scan_id of this ApiReportResultsDTO.  # noqa: E501
        :rtype: str
        """
        return self._scan_id

    @scan_id.setter
    def scan_id(self, scan_id):
        """Sets the scan_id of this ApiReportResultsDTO.


        :param scan_id: The scan_id of this ApiReportResultsDTO.  # noqa: E501
        :type: str
        """

        self._scan_id = scan_id

    @property
    def is_reevaluation(self):
        """Gets the is_reevaluation of this ApiReportResultsDTO.  # noqa: E501


        :return: The is_reevaluation of this ApiReportResultsDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_reevaluation

    @is_reevaluation.setter
    def is_reevaluation(self, is_reevaluation):
        """Sets the is_reevaluation of this ApiReportResultsDTO.


        :param is_reevaluation: The is_reevaluation of this ApiReportResultsDTO.  # noqa: E501
        :type: bool
        """

        self._is_reevaluation = is_reevaluation

    @property
    def is_for_monitoring(self):
        """Gets the is_for_monitoring of this ApiReportResultsDTO.  # noqa: E501


        :return: The is_for_monitoring of this ApiReportResultsDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_for_monitoring

    @is_for_monitoring.setter
    def is_for_monitoring(self, is_for_monitoring):
        """Sets the is_for_monitoring of this ApiReportResultsDTO.


        :param is_for_monitoring: The is_for_monitoring of this ApiReportResultsDTO.  # noqa: E501
        :type: bool
        """

        self._is_for_monitoring = is_for_monitoring

    @property
    def commit_hash(self):
        """Gets the commit_hash of this ApiReportResultsDTO.  # noqa: E501


        :return: The commit_hash of this ApiReportResultsDTO.  # noqa: E501
        :rtype: str
        """
        return self._commit_hash

    @commit_hash.setter
    def commit_hash(self, commit_hash):
        """Sets the commit_hash of this ApiReportResultsDTO.


        :param commit_hash: The commit_hash of this ApiReportResultsDTO.  # noqa: E501
        :type: str
        """

        self._commit_hash = commit_hash

    @property
    def policy_evaluation_result(self):
        """Gets the policy_evaluation_result of this ApiReportResultsDTO.  # noqa: E501


        :return: The policy_evaluation_result of this ApiReportResultsDTO.  # noqa: E501
        :rtype: PolicyEvaluationResult
        """
        return self._policy_evaluation_result

    @policy_evaluation_result.setter
    def policy_evaluation_result(self, policy_evaluation_result):
        """Sets the policy_evaluation_result of this ApiReportResultsDTO.


        :param policy_evaluation_result: The policy_evaluation_result of this ApiReportResultsDTO.  # noqa: E501
        :type: PolicyEvaluationResult
        """

        self._policy_evaluation_result = policy_evaluation_result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ApiReportResultsDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiReportResultsDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
