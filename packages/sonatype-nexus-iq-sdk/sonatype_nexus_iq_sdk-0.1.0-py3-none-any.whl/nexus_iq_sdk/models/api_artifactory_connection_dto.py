# coding: utf-8

"""
    Sonatype Nexus IQ Server

    This documents the available APIs into [Sonatype Nexus IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management) (also knwon as Nexus Lifecycle).   # noqa: E501

    OpenAPI spec version: 156
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiArtifactoryConnectionDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "artifactory_connection_id": "str",
        "owner_type": "str",
        "owner_id": "str",
        "is_anonymous": "bool",
        "base_url": "str",
        "username": "str",
        "password": "str",
    }

    attribute_map = {
        "artifactory_connection_id": "artifactoryConnectionId",
        "owner_type": "ownerType",
        "owner_id": "ownerId",
        "is_anonymous": "isAnonymous",
        "base_url": "baseUrl",
        "username": "username",
        "password": "password",
    }

    def __init__(
        self,
        artifactory_connection_id=None,
        owner_type=None,
        owner_id=None,
        is_anonymous=None,
        base_url=None,
        username=None,
        password=None,
    ):  # noqa: E501
        """ApiArtifactoryConnectionDTO - a model defined in Swagger"""  # noqa: E501
        self._artifactory_connection_id = None
        self._owner_type = None
        self._owner_id = None
        self._is_anonymous = None
        self._base_url = None
        self._username = None
        self._password = None
        self.discriminator = None
        if artifactory_connection_id is not None:
            self.artifactory_connection_id = artifactory_connection_id
        if owner_type is not None:
            self.owner_type = owner_type
        if owner_id is not None:
            self.owner_id = owner_id
        if is_anonymous is not None:
            self.is_anonymous = is_anonymous
        if base_url is not None:
            self.base_url = base_url
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password

    @property
    def artifactory_connection_id(self):
        """Gets the artifactory_connection_id of this ApiArtifactoryConnectionDTO.  # noqa: E501


        :return: The artifactory_connection_id of this ApiArtifactoryConnectionDTO.  # noqa: E501
        :rtype: str
        """
        return self._artifactory_connection_id

    @artifactory_connection_id.setter
    def artifactory_connection_id(self, artifactory_connection_id):
        """Sets the artifactory_connection_id of this ApiArtifactoryConnectionDTO.


        :param artifactory_connection_id: The artifactory_connection_id of this ApiArtifactoryConnectionDTO.  # noqa: E501
        :type: str
        """

        self._artifactory_connection_id = artifactory_connection_id

    @property
    def owner_type(self):
        """Gets the owner_type of this ApiArtifactoryConnectionDTO.  # noqa: E501


        :return: The owner_type of this ApiArtifactoryConnectionDTO.  # noqa: E501
        :rtype: str
        """
        return self._owner_type

    @owner_type.setter
    def owner_type(self, owner_type):
        """Sets the owner_type of this ApiArtifactoryConnectionDTO.


        :param owner_type: The owner_type of this ApiArtifactoryConnectionDTO.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "application",
            "organization",
            "repository_container",
            "repository",
            "global",
        ]  # noqa: E501
        if owner_type not in allowed_values:
            raise ValueError(
                "Invalid value for `owner_type` ({0}), must be one of {1}".format(  # noqa: E501
                    owner_type, allowed_values
                )
            )

        self._owner_type = owner_type

    @property
    def owner_id(self):
        """Gets the owner_id of this ApiArtifactoryConnectionDTO.  # noqa: E501


        :return: The owner_id of this ApiArtifactoryConnectionDTO.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this ApiArtifactoryConnectionDTO.


        :param owner_id: The owner_id of this ApiArtifactoryConnectionDTO.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    @property
    def is_anonymous(self):
        """Gets the is_anonymous of this ApiArtifactoryConnectionDTO.  # noqa: E501


        :return: The is_anonymous of this ApiArtifactoryConnectionDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_anonymous

    @is_anonymous.setter
    def is_anonymous(self, is_anonymous):
        """Sets the is_anonymous of this ApiArtifactoryConnectionDTO.


        :param is_anonymous: The is_anonymous of this ApiArtifactoryConnectionDTO.  # noqa: E501
        :type: bool
        """

        self._is_anonymous = is_anonymous

    @property
    def base_url(self):
        """Gets the base_url of this ApiArtifactoryConnectionDTO.  # noqa: E501


        :return: The base_url of this ApiArtifactoryConnectionDTO.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this ApiArtifactoryConnectionDTO.


        :param base_url: The base_url of this ApiArtifactoryConnectionDTO.  # noqa: E501
        :type: str
        """

        self._base_url = base_url

    @property
    def username(self):
        """Gets the username of this ApiArtifactoryConnectionDTO.  # noqa: E501


        :return: The username of this ApiArtifactoryConnectionDTO.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ApiArtifactoryConnectionDTO.


        :param username: The username of this ApiArtifactoryConnectionDTO.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this ApiArtifactoryConnectionDTO.  # noqa: E501


        :return: The password of this ApiArtifactoryConnectionDTO.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ApiArtifactoryConnectionDTO.


        :param password: The password of this ApiArtifactoryConnectionDTO.  # noqa: E501
        :type: str
        """

        self._password = password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ApiArtifactoryConnectionDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiArtifactoryConnectionDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
