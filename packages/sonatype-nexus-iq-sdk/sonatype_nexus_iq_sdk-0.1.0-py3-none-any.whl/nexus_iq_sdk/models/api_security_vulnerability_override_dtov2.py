# coding: utf-8

"""
    Sonatype Nexus IQ Server

    This documents the available APIs into [Sonatype Nexus IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management) (also knwon as Nexus Lifecycle).   # noqa: E501

    OpenAPI spec version: 156
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiSecurityVulnerabilityOverrideDTOV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "security_override_id": "str",
        "hash": "str",
        "reference_id": "str",
        "status": "str",
        "comment": "str",
        "owner": "ApiOwnerDTO",
        "currently_affected_components": "list[ApiComponentDTOV2]",
    }

    attribute_map = {
        "security_override_id": "securityOverrideId",
        "hash": "hash",
        "reference_id": "referenceId",
        "status": "status",
        "comment": "comment",
        "owner": "owner",
        "currently_affected_components": "currentlyAffectedComponents",
    }

    def __init__(
        self,
        security_override_id=None,
        hash=None,
        reference_id=None,
        status=None,
        comment=None,
        owner=None,
        currently_affected_components=None,
    ):  # noqa: E501
        """ApiSecurityVulnerabilityOverrideDTOV2 - a model defined in Swagger"""  # noqa: E501
        self._security_override_id = None
        self._hash = None
        self._reference_id = None
        self._status = None
        self._comment = None
        self._owner = None
        self._currently_affected_components = None
        self.discriminator = None
        if security_override_id is not None:
            self.security_override_id = security_override_id
        if hash is not None:
            self.hash = hash
        if reference_id is not None:
            self.reference_id = reference_id
        if status is not None:
            self.status = status
        if comment is not None:
            self.comment = comment
        if owner is not None:
            self.owner = owner
        if currently_affected_components is not None:
            self.currently_affected_components = currently_affected_components

    @property
    def security_override_id(self):
        """Gets the security_override_id of this ApiSecurityVulnerabilityOverrideDTOV2.  # noqa: E501


        :return: The security_override_id of this ApiSecurityVulnerabilityOverrideDTOV2.  # noqa: E501
        :rtype: str
        """
        return self._security_override_id

    @security_override_id.setter
    def security_override_id(self, security_override_id):
        """Sets the security_override_id of this ApiSecurityVulnerabilityOverrideDTOV2.


        :param security_override_id: The security_override_id of this ApiSecurityVulnerabilityOverrideDTOV2.  # noqa: E501
        :type: str
        """

        self._security_override_id = security_override_id

    @property
    def hash(self):
        """Gets the hash of this ApiSecurityVulnerabilityOverrideDTOV2.  # noqa: E501


        :return: The hash of this ApiSecurityVulnerabilityOverrideDTOV2.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this ApiSecurityVulnerabilityOverrideDTOV2.


        :param hash: The hash of this ApiSecurityVulnerabilityOverrideDTOV2.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def reference_id(self):
        """Gets the reference_id of this ApiSecurityVulnerabilityOverrideDTOV2.  # noqa: E501


        :return: The reference_id of this ApiSecurityVulnerabilityOverrideDTOV2.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this ApiSecurityVulnerabilityOverrideDTOV2.


        :param reference_id: The reference_id of this ApiSecurityVulnerabilityOverrideDTOV2.  # noqa: E501
        :type: str
        """

        self._reference_id = reference_id

    @property
    def status(self):
        """Gets the status of this ApiSecurityVulnerabilityOverrideDTOV2.  # noqa: E501


        :return: The status of this ApiSecurityVulnerabilityOverrideDTOV2.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApiSecurityVulnerabilityOverrideDTOV2.


        :param status: The status of this ApiSecurityVulnerabilityOverrideDTOV2.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def comment(self):
        """Gets the comment of this ApiSecurityVulnerabilityOverrideDTOV2.  # noqa: E501


        :return: The comment of this ApiSecurityVulnerabilityOverrideDTOV2.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ApiSecurityVulnerabilityOverrideDTOV2.


        :param comment: The comment of this ApiSecurityVulnerabilityOverrideDTOV2.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def owner(self):
        """Gets the owner of this ApiSecurityVulnerabilityOverrideDTOV2.  # noqa: E501


        :return: The owner of this ApiSecurityVulnerabilityOverrideDTOV2.  # noqa: E501
        :rtype: ApiOwnerDTO
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ApiSecurityVulnerabilityOverrideDTOV2.


        :param owner: The owner of this ApiSecurityVulnerabilityOverrideDTOV2.  # noqa: E501
        :type: ApiOwnerDTO
        """

        self._owner = owner

    @property
    def currently_affected_components(self):
        """Gets the currently_affected_components of this ApiSecurityVulnerabilityOverrideDTOV2.  # noqa: E501


        :return: The currently_affected_components of this ApiSecurityVulnerabilityOverrideDTOV2.  # noqa: E501
        :rtype: list[ApiComponentDTOV2]
        """
        return self._currently_affected_components

    @currently_affected_components.setter
    def currently_affected_components(self, currently_affected_components):
        """Sets the currently_affected_components of this ApiSecurityVulnerabilityOverrideDTOV2.


        :param currently_affected_components: The currently_affected_components of this ApiSecurityVulnerabilityOverrideDTOV2.  # noqa: E501
        :type: list[ApiComponentDTOV2]
        """

        self._currently_affected_components = currently_affected_components

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ApiSecurityVulnerabilityOverrideDTOV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiSecurityVulnerabilityOverrideDTOV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
