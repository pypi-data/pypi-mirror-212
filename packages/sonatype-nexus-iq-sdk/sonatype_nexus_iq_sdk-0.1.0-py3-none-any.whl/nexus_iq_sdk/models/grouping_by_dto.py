# coding: utf-8

"""
    Sonatype Nexus IQ Server

    This documents the available APIs into [Sonatype Nexus IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management) (also knwon as Nexus Lifecycle).   # noqa: E501

    OpenAPI spec version: 156
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class GroupingByDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "group_identifier": "str",
        "group_by": "str",
        "additional_info": "str",
        "search_result_item_dtos": "list[SearchResultItemDTO]",
    }

    attribute_map = {
        "group_identifier": "groupIdentifier",
        "group_by": "groupBy",
        "additional_info": "additionalInfo",
        "search_result_item_dtos": "searchResultItemDTOS",
    }

    def __init__(
        self,
        group_identifier=None,
        group_by=None,
        additional_info=None,
        search_result_item_dtos=None,
    ):  # noqa: E501
        """GroupingByDTO - a model defined in Swagger"""  # noqa: E501
        self._group_identifier = None
        self._group_by = None
        self._additional_info = None
        self._search_result_item_dtos = None
        self.discriminator = None
        if group_identifier is not None:
            self.group_identifier = group_identifier
        if group_by is not None:
            self.group_by = group_by
        if additional_info is not None:
            self.additional_info = additional_info
        if search_result_item_dtos is not None:
            self.search_result_item_dtos = search_result_item_dtos

    @property
    def group_identifier(self):
        """Gets the group_identifier of this GroupingByDTO.  # noqa: E501


        :return: The group_identifier of this GroupingByDTO.  # noqa: E501
        :rtype: str
        """
        return self._group_identifier

    @group_identifier.setter
    def group_identifier(self, group_identifier):
        """Sets the group_identifier of this GroupingByDTO.


        :param group_identifier: The group_identifier of this GroupingByDTO.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "itemType",
            "organizationId",
            "organizationName",
            "applicationId",
            "applicationName",
            "applicationPublicId",
            "policyEvaluationStage",
            "reportId",
            "componentHash",
            "componentFormat",
            "componentName",
            "componentCoordinate",
            "vulnerabilityId",
            "vulnerabilitySeverity",
            "vulnerabilityStatus",
            "vulnerabilityDescription",
            "applicationCategoryId",
            "applicationCategoryName",
            "applicationCategoryColor",
            "applicationCategoryDescription",
            "componentLabelId",
            "componentLabelName",
            "componentLabelColor",
            "componentLabelDescription",
            "policyId",
            "policyName",
            "policyThreatCategory",
            "policyThreatLevel",
        ]  # noqa: E501
        if group_identifier not in allowed_values:
            raise ValueError(
                "Invalid value for `group_identifier` ({0}), must be one of {1}".format(  # noqa: E501
                    group_identifier, allowed_values
                )
            )

        self._group_identifier = group_identifier

    @property
    def group_by(self):
        """Gets the group_by of this GroupingByDTO.  # noqa: E501


        :return: The group_by of this GroupingByDTO.  # noqa: E501
        :rtype: str
        """
        return self._group_by

    @group_by.setter
    def group_by(self, group_by):
        """Sets the group_by of this GroupingByDTO.


        :param group_by: The group_by of this GroupingByDTO.  # noqa: E501
        :type: str
        """

        self._group_by = group_by

    @property
    def additional_info(self):
        """Gets the additional_info of this GroupingByDTO.  # noqa: E501


        :return: The additional_info of this GroupingByDTO.  # noqa: E501
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this GroupingByDTO.


        :param additional_info: The additional_info of this GroupingByDTO.  # noqa: E501
        :type: str
        """

        self._additional_info = additional_info

    @property
    def search_result_item_dtos(self):
        """Gets the search_result_item_dtos of this GroupingByDTO.  # noqa: E501


        :return: The search_result_item_dtos of this GroupingByDTO.  # noqa: E501
        :rtype: list[SearchResultItemDTO]
        """
        return self._search_result_item_dtos

    @search_result_item_dtos.setter
    def search_result_item_dtos(self, search_result_item_dtos):
        """Sets the search_result_item_dtos of this GroupingByDTO.


        :param search_result_item_dtos: The search_result_item_dtos of this GroupingByDTO.  # noqa: E501
        :type: list[SearchResultItemDTO]
        """

        self._search_result_item_dtos = search_result_item_dtos

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(GroupingByDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupingByDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
