# coding: utf-8

"""
    Sonatype Nexus IQ Server

    This documents the available APIs into [Sonatype Nexus IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management) (also knwon as Nexus Lifecycle).   # noqa: E501

    OpenAPI spec version: 156
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiPolicyViolationDiffDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "application": "ApiApplicationDTO",
        "from_commit": "ApiApplicationEvaluationCommitDTO",
        "to_commit": "ApiApplicationEvaluationCommitDTO",
        "diff_time": "datetime",
        "added_violations": "list[ApiPolicyViolationForDiffDTO]",
        "same_violations": "list[ApiPolicyViolationForDiffDTO]",
        "removed_violations": "list[ApiPolicyViolationForDiffDTO]",
    }

    attribute_map = {
        "application": "application",
        "from_commit": "fromCommit",
        "to_commit": "toCommit",
        "diff_time": "diffTime",
        "added_violations": "addedViolations",
        "same_violations": "sameViolations",
        "removed_violations": "removedViolations",
    }

    def __init__(
        self,
        application=None,
        from_commit=None,
        to_commit=None,
        diff_time=None,
        added_violations=None,
        same_violations=None,
        removed_violations=None,
    ):  # noqa: E501
        """ApiPolicyViolationDiffDTO - a model defined in Swagger"""  # noqa: E501
        self._application = None
        self._from_commit = None
        self._to_commit = None
        self._diff_time = None
        self._added_violations = None
        self._same_violations = None
        self._removed_violations = None
        self.discriminator = None
        if application is not None:
            self.application = application
        if from_commit is not None:
            self.from_commit = from_commit
        if to_commit is not None:
            self.to_commit = to_commit
        if diff_time is not None:
            self.diff_time = diff_time
        if added_violations is not None:
            self.added_violations = added_violations
        if same_violations is not None:
            self.same_violations = same_violations
        if removed_violations is not None:
            self.removed_violations = removed_violations

    @property
    def application(self):
        """Gets the application of this ApiPolicyViolationDiffDTO.  # noqa: E501


        :return: The application of this ApiPolicyViolationDiffDTO.  # noqa: E501
        :rtype: ApiApplicationDTO
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this ApiPolicyViolationDiffDTO.


        :param application: The application of this ApiPolicyViolationDiffDTO.  # noqa: E501
        :type: ApiApplicationDTO
        """

        self._application = application

    @property
    def from_commit(self):
        """Gets the from_commit of this ApiPolicyViolationDiffDTO.  # noqa: E501


        :return: The from_commit of this ApiPolicyViolationDiffDTO.  # noqa: E501
        :rtype: ApiApplicationEvaluationCommitDTO
        """
        return self._from_commit

    @from_commit.setter
    def from_commit(self, from_commit):
        """Sets the from_commit of this ApiPolicyViolationDiffDTO.


        :param from_commit: The from_commit of this ApiPolicyViolationDiffDTO.  # noqa: E501
        :type: ApiApplicationEvaluationCommitDTO
        """

        self._from_commit = from_commit

    @property
    def to_commit(self):
        """Gets the to_commit of this ApiPolicyViolationDiffDTO.  # noqa: E501


        :return: The to_commit of this ApiPolicyViolationDiffDTO.  # noqa: E501
        :rtype: ApiApplicationEvaluationCommitDTO
        """
        return self._to_commit

    @to_commit.setter
    def to_commit(self, to_commit):
        """Sets the to_commit of this ApiPolicyViolationDiffDTO.


        :param to_commit: The to_commit of this ApiPolicyViolationDiffDTO.  # noqa: E501
        :type: ApiApplicationEvaluationCommitDTO
        """

        self._to_commit = to_commit

    @property
    def diff_time(self):
        """Gets the diff_time of this ApiPolicyViolationDiffDTO.  # noqa: E501


        :return: The diff_time of this ApiPolicyViolationDiffDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._diff_time

    @diff_time.setter
    def diff_time(self, diff_time):
        """Sets the diff_time of this ApiPolicyViolationDiffDTO.


        :param diff_time: The diff_time of this ApiPolicyViolationDiffDTO.  # noqa: E501
        :type: datetime
        """

        self._diff_time = diff_time

    @property
    def added_violations(self):
        """Gets the added_violations of this ApiPolicyViolationDiffDTO.  # noqa: E501


        :return: The added_violations of this ApiPolicyViolationDiffDTO.  # noqa: E501
        :rtype: list[ApiPolicyViolationForDiffDTO]
        """
        return self._added_violations

    @added_violations.setter
    def added_violations(self, added_violations):
        """Sets the added_violations of this ApiPolicyViolationDiffDTO.


        :param added_violations: The added_violations of this ApiPolicyViolationDiffDTO.  # noqa: E501
        :type: list[ApiPolicyViolationForDiffDTO]
        """

        self._added_violations = added_violations

    @property
    def same_violations(self):
        """Gets the same_violations of this ApiPolicyViolationDiffDTO.  # noqa: E501


        :return: The same_violations of this ApiPolicyViolationDiffDTO.  # noqa: E501
        :rtype: list[ApiPolicyViolationForDiffDTO]
        """
        return self._same_violations

    @same_violations.setter
    def same_violations(self, same_violations):
        """Sets the same_violations of this ApiPolicyViolationDiffDTO.


        :param same_violations: The same_violations of this ApiPolicyViolationDiffDTO.  # noqa: E501
        :type: list[ApiPolicyViolationForDiffDTO]
        """

        self._same_violations = same_violations

    @property
    def removed_violations(self):
        """Gets the removed_violations of this ApiPolicyViolationDiffDTO.  # noqa: E501


        :return: The removed_violations of this ApiPolicyViolationDiffDTO.  # noqa: E501
        :rtype: list[ApiPolicyViolationForDiffDTO]
        """
        return self._removed_violations

    @removed_violations.setter
    def removed_violations(self, removed_violations):
        """Sets the removed_violations of this ApiPolicyViolationDiffDTO.


        :param removed_violations: The removed_violations of this ApiPolicyViolationDiffDTO.  # noqa: E501
        :type: list[ApiPolicyViolationForDiffDTO]
        """

        self._removed_violations = removed_violations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ApiPolicyViolationDiffDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiPolicyViolationDiffDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
