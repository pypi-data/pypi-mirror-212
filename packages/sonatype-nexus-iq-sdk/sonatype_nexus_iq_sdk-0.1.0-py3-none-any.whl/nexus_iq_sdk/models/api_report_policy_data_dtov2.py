# coding: utf-8

"""
    Sonatype Nexus IQ Server

    This documents the available APIs into [Sonatype Nexus IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management) (also knwon as Nexus Lifecycle).   # noqa: E501

    OpenAPI spec version: 156
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiReportPolicyDataDTOV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "report_time": "datetime",
        "report_title": "str",
        "commit_hash": "str",
        "initiator": "str",
        "application": "ApiApplicationBaseDTO",
        "counts": "dict(str, int)",
        "components": "list[ApiReportComponentPolicyViolationsDTOV2]",
    }

    attribute_map = {
        "report_time": "reportTime",
        "report_title": "reportTitle",
        "commit_hash": "commitHash",
        "initiator": "initiator",
        "application": "application",
        "counts": "counts",
        "components": "components",
    }

    def __init__(
        self,
        report_time=None,
        report_title=None,
        commit_hash=None,
        initiator=None,
        application=None,
        counts=None,
        components=None,
    ):  # noqa: E501
        """ApiReportPolicyDataDTOV2 - a model defined in Swagger"""  # noqa: E501
        self._report_time = None
        self._report_title = None
        self._commit_hash = None
        self._initiator = None
        self._application = None
        self._counts = None
        self._components = None
        self.discriminator = None
        if report_time is not None:
            self.report_time = report_time
        if report_title is not None:
            self.report_title = report_title
        if commit_hash is not None:
            self.commit_hash = commit_hash
        if initiator is not None:
            self.initiator = initiator
        if application is not None:
            self.application = application
        if counts is not None:
            self.counts = counts
        if components is not None:
            self.components = components

    @property
    def report_time(self):
        """Gets the report_time of this ApiReportPolicyDataDTOV2.  # noqa: E501


        :return: The report_time of this ApiReportPolicyDataDTOV2.  # noqa: E501
        :rtype: datetime
        """
        return self._report_time

    @report_time.setter
    def report_time(self, report_time):
        """Sets the report_time of this ApiReportPolicyDataDTOV2.


        :param report_time: The report_time of this ApiReportPolicyDataDTOV2.  # noqa: E501
        :type: datetime
        """

        self._report_time = report_time

    @property
    def report_title(self):
        """Gets the report_title of this ApiReportPolicyDataDTOV2.  # noqa: E501


        :return: The report_title of this ApiReportPolicyDataDTOV2.  # noqa: E501
        :rtype: str
        """
        return self._report_title

    @report_title.setter
    def report_title(self, report_title):
        """Sets the report_title of this ApiReportPolicyDataDTOV2.


        :param report_title: The report_title of this ApiReportPolicyDataDTOV2.  # noqa: E501
        :type: str
        """

        self._report_title = report_title

    @property
    def commit_hash(self):
        """Gets the commit_hash of this ApiReportPolicyDataDTOV2.  # noqa: E501


        :return: The commit_hash of this ApiReportPolicyDataDTOV2.  # noqa: E501
        :rtype: str
        """
        return self._commit_hash

    @commit_hash.setter
    def commit_hash(self, commit_hash):
        """Sets the commit_hash of this ApiReportPolicyDataDTOV2.


        :param commit_hash: The commit_hash of this ApiReportPolicyDataDTOV2.  # noqa: E501
        :type: str
        """

        self._commit_hash = commit_hash

    @property
    def initiator(self):
        """Gets the initiator of this ApiReportPolicyDataDTOV2.  # noqa: E501


        :return: The initiator of this ApiReportPolicyDataDTOV2.  # noqa: E501
        :rtype: str
        """
        return self._initiator

    @initiator.setter
    def initiator(self, initiator):
        """Sets the initiator of this ApiReportPolicyDataDTOV2.


        :param initiator: The initiator of this ApiReportPolicyDataDTOV2.  # noqa: E501
        :type: str
        """

        self._initiator = initiator

    @property
    def application(self):
        """Gets the application of this ApiReportPolicyDataDTOV2.  # noqa: E501


        :return: The application of this ApiReportPolicyDataDTOV2.  # noqa: E501
        :rtype: ApiApplicationBaseDTO
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this ApiReportPolicyDataDTOV2.


        :param application: The application of this ApiReportPolicyDataDTOV2.  # noqa: E501
        :type: ApiApplicationBaseDTO
        """

        self._application = application

    @property
    def counts(self):
        """Gets the counts of this ApiReportPolicyDataDTOV2.  # noqa: E501


        :return: The counts of this ApiReportPolicyDataDTOV2.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this ApiReportPolicyDataDTOV2.


        :param counts: The counts of this ApiReportPolicyDataDTOV2.  # noqa: E501
        :type: dict(str, int)
        """

        self._counts = counts

    @property
    def components(self):
        """Gets the components of this ApiReportPolicyDataDTOV2.  # noqa: E501


        :return: The components of this ApiReportPolicyDataDTOV2.  # noqa: E501
        :rtype: list[ApiReportComponentPolicyViolationsDTOV2]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this ApiReportPolicyDataDTOV2.


        :param components: The components of this ApiReportPolicyDataDTOV2.  # noqa: E501
        :type: list[ApiReportComponentPolicyViolationsDTOV2]
        """

        self._components = components

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ApiReportPolicyDataDTOV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiReportPolicyDataDTOV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
