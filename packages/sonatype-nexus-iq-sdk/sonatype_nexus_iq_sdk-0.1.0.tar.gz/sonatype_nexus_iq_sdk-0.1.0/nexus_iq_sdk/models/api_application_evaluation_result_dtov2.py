# coding: utf-8

"""
    Sonatype Nexus IQ Server

    This documents the available APIs into [Sonatype Nexus IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management) (also knwon as Nexus Lifecycle).   # noqa: E501

    OpenAPI spec version: 156
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiApplicationEvaluationResultDTOV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "status": "str",
        "reason": "str",
        "report_html_url": "str",
        "embeddable_report_html_url": "str",
        "report_pdf_url": "str",
        "report_data_url": "str",
    }

    attribute_map = {
        "status": "status",
        "reason": "reason",
        "report_html_url": "reportHtmlUrl",
        "embeddable_report_html_url": "embeddableReportHtmlUrl",
        "report_pdf_url": "reportPdfUrl",
        "report_data_url": "reportDataUrl",
    }

    def __init__(
        self,
        status=None,
        reason=None,
        report_html_url=None,
        embeddable_report_html_url=None,
        report_pdf_url=None,
        report_data_url=None,
    ):  # noqa: E501
        """ApiApplicationEvaluationResultDTOV2 - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._reason = None
        self._report_html_url = None
        self._embeddable_report_html_url = None
        self._report_pdf_url = None
        self._report_data_url = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if reason is not None:
            self.reason = reason
        if report_html_url is not None:
            self.report_html_url = report_html_url
        if embeddable_report_html_url is not None:
            self.embeddable_report_html_url = embeddable_report_html_url
        if report_pdf_url is not None:
            self.report_pdf_url = report_pdf_url
        if report_data_url is not None:
            self.report_data_url = report_data_url

    @property
    def status(self):
        """Gets the status of this ApiApplicationEvaluationResultDTOV2.  # noqa: E501


        :return: The status of this ApiApplicationEvaluationResultDTOV2.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApiApplicationEvaluationResultDTOV2.


        :param status: The status of this ApiApplicationEvaluationResultDTOV2.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def reason(self):
        """Gets the reason of this ApiApplicationEvaluationResultDTOV2.  # noqa: E501


        :return: The reason of this ApiApplicationEvaluationResultDTOV2.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ApiApplicationEvaluationResultDTOV2.


        :param reason: The reason of this ApiApplicationEvaluationResultDTOV2.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def report_html_url(self):
        """Gets the report_html_url of this ApiApplicationEvaluationResultDTOV2.  # noqa: E501


        :return: The report_html_url of this ApiApplicationEvaluationResultDTOV2.  # noqa: E501
        :rtype: str
        """
        return self._report_html_url

    @report_html_url.setter
    def report_html_url(self, report_html_url):
        """Sets the report_html_url of this ApiApplicationEvaluationResultDTOV2.


        :param report_html_url: The report_html_url of this ApiApplicationEvaluationResultDTOV2.  # noqa: E501
        :type: str
        """

        self._report_html_url = report_html_url

    @property
    def embeddable_report_html_url(self):
        """Gets the embeddable_report_html_url of this ApiApplicationEvaluationResultDTOV2.  # noqa: E501


        :return: The embeddable_report_html_url of this ApiApplicationEvaluationResultDTOV2.  # noqa: E501
        :rtype: str
        """
        return self._embeddable_report_html_url

    @embeddable_report_html_url.setter
    def embeddable_report_html_url(self, embeddable_report_html_url):
        """Sets the embeddable_report_html_url of this ApiApplicationEvaluationResultDTOV2.


        :param embeddable_report_html_url: The embeddable_report_html_url of this ApiApplicationEvaluationResultDTOV2.  # noqa: E501
        :type: str
        """

        self._embeddable_report_html_url = embeddable_report_html_url

    @property
    def report_pdf_url(self):
        """Gets the report_pdf_url of this ApiApplicationEvaluationResultDTOV2.  # noqa: E501


        :return: The report_pdf_url of this ApiApplicationEvaluationResultDTOV2.  # noqa: E501
        :rtype: str
        """
        return self._report_pdf_url

    @report_pdf_url.setter
    def report_pdf_url(self, report_pdf_url):
        """Sets the report_pdf_url of this ApiApplicationEvaluationResultDTOV2.


        :param report_pdf_url: The report_pdf_url of this ApiApplicationEvaluationResultDTOV2.  # noqa: E501
        :type: str
        """

        self._report_pdf_url = report_pdf_url

    @property
    def report_data_url(self):
        """Gets the report_data_url of this ApiApplicationEvaluationResultDTOV2.  # noqa: E501


        :return: The report_data_url of this ApiApplicationEvaluationResultDTOV2.  # noqa: E501
        :rtype: str
        """
        return self._report_data_url

    @report_data_url.setter
    def report_data_url(self, report_data_url):
        """Sets the report_data_url of this ApiApplicationEvaluationResultDTOV2.


        :param report_data_url: The report_data_url of this ApiApplicationEvaluationResultDTOV2.  # noqa: E501
        :type: str
        """

        self._report_data_url = report_data_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ApiApplicationEvaluationResultDTOV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiApplicationEvaluationResultDTOV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
