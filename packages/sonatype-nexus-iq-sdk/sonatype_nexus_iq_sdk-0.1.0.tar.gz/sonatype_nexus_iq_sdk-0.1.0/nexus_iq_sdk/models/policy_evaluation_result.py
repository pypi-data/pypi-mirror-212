# coding: utf-8

"""
    Sonatype Nexus IQ Server

    This documents the available APIs into [Sonatype Nexus IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management) (also knwon as Nexus Lifecycle).   # noqa: E501

    OpenAPI spec version: 156
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PolicyEvaluationResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "alerts": "list[PolicyAlert]",
        "affected_component_count": "int",
        "critical_component_count": "int",
        "severe_component_count": "int",
        "moderate_component_count": "int",
        "critical_policy_violation_count": "int",
        "severe_policy_violation_count": "int",
        "moderate_policy_violation_count": "int",
        "grandfathered_policy_violation_count": "int",
        "total_component_count": "int",
    }

    attribute_map = {
        "alerts": "alerts",
        "affected_component_count": "affectedComponentCount",
        "critical_component_count": "criticalComponentCount",
        "severe_component_count": "severeComponentCount",
        "moderate_component_count": "moderateComponentCount",
        "critical_policy_violation_count": "criticalPolicyViolationCount",
        "severe_policy_violation_count": "severePolicyViolationCount",
        "moderate_policy_violation_count": "moderatePolicyViolationCount",
        "grandfathered_policy_violation_count": "grandfatheredPolicyViolationCount",
        "total_component_count": "totalComponentCount",
    }

    def __init__(
        self,
        alerts=None,
        affected_component_count=None,
        critical_component_count=None,
        severe_component_count=None,
        moderate_component_count=None,
        critical_policy_violation_count=None,
        severe_policy_violation_count=None,
        moderate_policy_violation_count=None,
        grandfathered_policy_violation_count=None,
        total_component_count=None,
    ):  # noqa: E501
        """PolicyEvaluationResult - a model defined in Swagger"""  # noqa: E501
        self._alerts = None
        self._affected_component_count = None
        self._critical_component_count = None
        self._severe_component_count = None
        self._moderate_component_count = None
        self._critical_policy_violation_count = None
        self._severe_policy_violation_count = None
        self._moderate_policy_violation_count = None
        self._grandfathered_policy_violation_count = None
        self._total_component_count = None
        self.discriminator = None
        if alerts is not None:
            self.alerts = alerts
        if affected_component_count is not None:
            self.affected_component_count = affected_component_count
        if critical_component_count is not None:
            self.critical_component_count = critical_component_count
        if severe_component_count is not None:
            self.severe_component_count = severe_component_count
        if moderate_component_count is not None:
            self.moderate_component_count = moderate_component_count
        if critical_policy_violation_count is not None:
            self.critical_policy_violation_count = critical_policy_violation_count
        if severe_policy_violation_count is not None:
            self.severe_policy_violation_count = severe_policy_violation_count
        if moderate_policy_violation_count is not None:
            self.moderate_policy_violation_count = moderate_policy_violation_count
        if grandfathered_policy_violation_count is not None:
            self.grandfathered_policy_violation_count = (
                grandfathered_policy_violation_count
            )
        if total_component_count is not None:
            self.total_component_count = total_component_count

    @property
    def alerts(self):
        """Gets the alerts of this PolicyEvaluationResult.  # noqa: E501


        :return: The alerts of this PolicyEvaluationResult.  # noqa: E501
        :rtype: list[PolicyAlert]
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this PolicyEvaluationResult.


        :param alerts: The alerts of this PolicyEvaluationResult.  # noqa: E501
        :type: list[PolicyAlert]
        """

        self._alerts = alerts

    @property
    def affected_component_count(self):
        """Gets the affected_component_count of this PolicyEvaluationResult.  # noqa: E501


        :return: The affected_component_count of this PolicyEvaluationResult.  # noqa: E501
        :rtype: int
        """
        return self._affected_component_count

    @affected_component_count.setter
    def affected_component_count(self, affected_component_count):
        """Sets the affected_component_count of this PolicyEvaluationResult.


        :param affected_component_count: The affected_component_count of this PolicyEvaluationResult.  # noqa: E501
        :type: int
        """

        self._affected_component_count = affected_component_count

    @property
    def critical_component_count(self):
        """Gets the critical_component_count of this PolicyEvaluationResult.  # noqa: E501


        :return: The critical_component_count of this PolicyEvaluationResult.  # noqa: E501
        :rtype: int
        """
        return self._critical_component_count

    @critical_component_count.setter
    def critical_component_count(self, critical_component_count):
        """Sets the critical_component_count of this PolicyEvaluationResult.


        :param critical_component_count: The critical_component_count of this PolicyEvaluationResult.  # noqa: E501
        :type: int
        """

        self._critical_component_count = critical_component_count

    @property
    def severe_component_count(self):
        """Gets the severe_component_count of this PolicyEvaluationResult.  # noqa: E501


        :return: The severe_component_count of this PolicyEvaluationResult.  # noqa: E501
        :rtype: int
        """
        return self._severe_component_count

    @severe_component_count.setter
    def severe_component_count(self, severe_component_count):
        """Sets the severe_component_count of this PolicyEvaluationResult.


        :param severe_component_count: The severe_component_count of this PolicyEvaluationResult.  # noqa: E501
        :type: int
        """

        self._severe_component_count = severe_component_count

    @property
    def moderate_component_count(self):
        """Gets the moderate_component_count of this PolicyEvaluationResult.  # noqa: E501


        :return: The moderate_component_count of this PolicyEvaluationResult.  # noqa: E501
        :rtype: int
        """
        return self._moderate_component_count

    @moderate_component_count.setter
    def moderate_component_count(self, moderate_component_count):
        """Sets the moderate_component_count of this PolicyEvaluationResult.


        :param moderate_component_count: The moderate_component_count of this PolicyEvaluationResult.  # noqa: E501
        :type: int
        """

        self._moderate_component_count = moderate_component_count

    @property
    def critical_policy_violation_count(self):
        """Gets the critical_policy_violation_count of this PolicyEvaluationResult.  # noqa: E501


        :return: The critical_policy_violation_count of this PolicyEvaluationResult.  # noqa: E501
        :rtype: int
        """
        return self._critical_policy_violation_count

    @critical_policy_violation_count.setter
    def critical_policy_violation_count(self, critical_policy_violation_count):
        """Sets the critical_policy_violation_count of this PolicyEvaluationResult.


        :param critical_policy_violation_count: The critical_policy_violation_count of this PolicyEvaluationResult.  # noqa: E501
        :type: int
        """

        self._critical_policy_violation_count = critical_policy_violation_count

    @property
    def severe_policy_violation_count(self):
        """Gets the severe_policy_violation_count of this PolicyEvaluationResult.  # noqa: E501


        :return: The severe_policy_violation_count of this PolicyEvaluationResult.  # noqa: E501
        :rtype: int
        """
        return self._severe_policy_violation_count

    @severe_policy_violation_count.setter
    def severe_policy_violation_count(self, severe_policy_violation_count):
        """Sets the severe_policy_violation_count of this PolicyEvaluationResult.


        :param severe_policy_violation_count: The severe_policy_violation_count of this PolicyEvaluationResult.  # noqa: E501
        :type: int
        """

        self._severe_policy_violation_count = severe_policy_violation_count

    @property
    def moderate_policy_violation_count(self):
        """Gets the moderate_policy_violation_count of this PolicyEvaluationResult.  # noqa: E501


        :return: The moderate_policy_violation_count of this PolicyEvaluationResult.  # noqa: E501
        :rtype: int
        """
        return self._moderate_policy_violation_count

    @moderate_policy_violation_count.setter
    def moderate_policy_violation_count(self, moderate_policy_violation_count):
        """Sets the moderate_policy_violation_count of this PolicyEvaluationResult.


        :param moderate_policy_violation_count: The moderate_policy_violation_count of this PolicyEvaluationResult.  # noqa: E501
        :type: int
        """

        self._moderate_policy_violation_count = moderate_policy_violation_count

    @property
    def grandfathered_policy_violation_count(self):
        """Gets the grandfathered_policy_violation_count of this PolicyEvaluationResult.  # noqa: E501


        :return: The grandfathered_policy_violation_count of this PolicyEvaluationResult.  # noqa: E501
        :rtype: int
        """
        return self._grandfathered_policy_violation_count

    @grandfathered_policy_violation_count.setter
    def grandfathered_policy_violation_count(
        self, grandfathered_policy_violation_count
    ):
        """Sets the grandfathered_policy_violation_count of this PolicyEvaluationResult.


        :param grandfathered_policy_violation_count: The grandfathered_policy_violation_count of this PolicyEvaluationResult.  # noqa: E501
        :type: int
        """

        self._grandfathered_policy_violation_count = (
            grandfathered_policy_violation_count
        )

    @property
    def total_component_count(self):
        """Gets the total_component_count of this PolicyEvaluationResult.  # noqa: E501


        :return: The total_component_count of this PolicyEvaluationResult.  # noqa: E501
        :rtype: int
        """
        return self._total_component_count

    @total_component_count.setter
    def total_component_count(self, total_component_count):
        """Sets the total_component_count of this PolicyEvaluationResult.


        :param total_component_count: The total_component_count of this PolicyEvaluationResult.  # noqa: E501
        :type: int
        """

        self._total_component_count = total_component_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(PolicyEvaluationResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyEvaluationResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
