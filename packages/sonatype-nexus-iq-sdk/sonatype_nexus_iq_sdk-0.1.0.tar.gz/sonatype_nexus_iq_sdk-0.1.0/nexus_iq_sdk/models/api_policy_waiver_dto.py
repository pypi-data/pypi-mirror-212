# coding: utf-8

"""
    Sonatype Nexus IQ Server

    This documents the available APIs into [Sonatype Nexus IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management) (also knwon as Nexus Lifecycle).   # noqa: E501

    OpenAPI spec version: 156
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiPolicyWaiverDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "policy_waiver_id": "str",
        "policy_violation_id": "str",
        "comment": "str",
        "create_time": "datetime",
        "expiry_time": "datetime",
        "is_obsolete": "bool",
        "scope_owner_type": "str",
        "scope_owner_id": "str",
        "scope_owner_name": "str",
        "hash": "str",
        "policy_id": "str",
        "vulnerability_id": "str",
        "policy_name": "str",
        "constraint_facts": "list[ConstraintFact]",
        "constraint_facts_json": "str",
        "component_name": "str",
        "creator_id": "str",
        "creator_name": "str",
        "matcher_strategy": "str",
        "associated_package_url": "str",
        "component_identifier": "ApiComponentIdentifierDTOV2",
        "threat_level": "int",
        "display_name": "ComponentDisplayName",
    }

    attribute_map = {
        "policy_waiver_id": "policyWaiverId",
        "policy_violation_id": "policyViolationId",
        "comment": "comment",
        "create_time": "createTime",
        "expiry_time": "expiryTime",
        "is_obsolete": "isObsolete",
        "scope_owner_type": "scopeOwnerType",
        "scope_owner_id": "scopeOwnerId",
        "scope_owner_name": "scopeOwnerName",
        "hash": "hash",
        "policy_id": "policyId",
        "vulnerability_id": "vulnerabilityId",
        "policy_name": "policyName",
        "constraint_facts": "constraintFacts",
        "constraint_facts_json": "constraintFactsJson",
        "component_name": "componentName",
        "creator_id": "creatorId",
        "creator_name": "creatorName",
        "matcher_strategy": "matcherStrategy",
        "associated_package_url": "associatedPackageUrl",
        "component_identifier": "componentIdentifier",
        "threat_level": "threatLevel",
        "display_name": "displayName",
    }

    def __init__(
        self,
        policy_waiver_id=None,
        policy_violation_id=None,
        comment=None,
        create_time=None,
        expiry_time=None,
        is_obsolete=None,
        scope_owner_type=None,
        scope_owner_id=None,
        scope_owner_name=None,
        hash=None,
        policy_id=None,
        vulnerability_id=None,
        policy_name=None,
        constraint_facts=None,
        constraint_facts_json=None,
        component_name=None,
        creator_id=None,
        creator_name=None,
        matcher_strategy=None,
        associated_package_url=None,
        component_identifier=None,
        threat_level=None,
        display_name=None,
    ):  # noqa: E501
        """ApiPolicyWaiverDTO - a model defined in Swagger"""  # noqa: E501
        self._policy_waiver_id = None
        self._policy_violation_id = None
        self._comment = None
        self._create_time = None
        self._expiry_time = None
        self._is_obsolete = None
        self._scope_owner_type = None
        self._scope_owner_id = None
        self._scope_owner_name = None
        self._hash = None
        self._policy_id = None
        self._vulnerability_id = None
        self._policy_name = None
        self._constraint_facts = None
        self._constraint_facts_json = None
        self._component_name = None
        self._creator_id = None
        self._creator_name = None
        self._matcher_strategy = None
        self._associated_package_url = None
        self._component_identifier = None
        self._threat_level = None
        self._display_name = None
        self.discriminator = None
        if policy_waiver_id is not None:
            self.policy_waiver_id = policy_waiver_id
        if policy_violation_id is not None:
            self.policy_violation_id = policy_violation_id
        if comment is not None:
            self.comment = comment
        if create_time is not None:
            self.create_time = create_time
        if expiry_time is not None:
            self.expiry_time = expiry_time
        if is_obsolete is not None:
            self.is_obsolete = is_obsolete
        if scope_owner_type is not None:
            self.scope_owner_type = scope_owner_type
        if scope_owner_id is not None:
            self.scope_owner_id = scope_owner_id
        if scope_owner_name is not None:
            self.scope_owner_name = scope_owner_name
        if hash is not None:
            self.hash = hash
        if policy_id is not None:
            self.policy_id = policy_id
        if vulnerability_id is not None:
            self.vulnerability_id = vulnerability_id
        if policy_name is not None:
            self.policy_name = policy_name
        if constraint_facts is not None:
            self.constraint_facts = constraint_facts
        if constraint_facts_json is not None:
            self.constraint_facts_json = constraint_facts_json
        if component_name is not None:
            self.component_name = component_name
        if creator_id is not None:
            self.creator_id = creator_id
        if creator_name is not None:
            self.creator_name = creator_name
        if matcher_strategy is not None:
            self.matcher_strategy = matcher_strategy
        if associated_package_url is not None:
            self.associated_package_url = associated_package_url
        if component_identifier is not None:
            self.component_identifier = component_identifier
        if threat_level is not None:
            self.threat_level = threat_level
        if display_name is not None:
            self.display_name = display_name

    @property
    def policy_waiver_id(self):
        """Gets the policy_waiver_id of this ApiPolicyWaiverDTO.  # noqa: E501


        :return: The policy_waiver_id of this ApiPolicyWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._policy_waiver_id

    @policy_waiver_id.setter
    def policy_waiver_id(self, policy_waiver_id):
        """Sets the policy_waiver_id of this ApiPolicyWaiverDTO.


        :param policy_waiver_id: The policy_waiver_id of this ApiPolicyWaiverDTO.  # noqa: E501
        :type: str
        """

        self._policy_waiver_id = policy_waiver_id

    @property
    def policy_violation_id(self):
        """Gets the policy_violation_id of this ApiPolicyWaiverDTO.  # noqa: E501


        :return: The policy_violation_id of this ApiPolicyWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._policy_violation_id

    @policy_violation_id.setter
    def policy_violation_id(self, policy_violation_id):
        """Sets the policy_violation_id of this ApiPolicyWaiverDTO.


        :param policy_violation_id: The policy_violation_id of this ApiPolicyWaiverDTO.  # noqa: E501
        :type: str
        """

        self._policy_violation_id = policy_violation_id

    @property
    def comment(self):
        """Gets the comment of this ApiPolicyWaiverDTO.  # noqa: E501


        :return: The comment of this ApiPolicyWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ApiPolicyWaiverDTO.


        :param comment: The comment of this ApiPolicyWaiverDTO.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def create_time(self):
        """Gets the create_time of this ApiPolicyWaiverDTO.  # noqa: E501


        :return: The create_time of this ApiPolicyWaiverDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ApiPolicyWaiverDTO.


        :param create_time: The create_time of this ApiPolicyWaiverDTO.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def expiry_time(self):
        """Gets the expiry_time of this ApiPolicyWaiverDTO.  # noqa: E501


        :return: The expiry_time of this ApiPolicyWaiverDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """Sets the expiry_time of this ApiPolicyWaiverDTO.


        :param expiry_time: The expiry_time of this ApiPolicyWaiverDTO.  # noqa: E501
        :type: datetime
        """

        self._expiry_time = expiry_time

    @property
    def is_obsolete(self):
        """Gets the is_obsolete of this ApiPolicyWaiverDTO.  # noqa: E501


        :return: The is_obsolete of this ApiPolicyWaiverDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_obsolete

    @is_obsolete.setter
    def is_obsolete(self, is_obsolete):
        """Sets the is_obsolete of this ApiPolicyWaiverDTO.


        :param is_obsolete: The is_obsolete of this ApiPolicyWaiverDTO.  # noqa: E501
        :type: bool
        """

        self._is_obsolete = is_obsolete

    @property
    def scope_owner_type(self):
        """Gets the scope_owner_type of this ApiPolicyWaiverDTO.  # noqa: E501


        :return: The scope_owner_type of this ApiPolicyWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._scope_owner_type

    @scope_owner_type.setter
    def scope_owner_type(self, scope_owner_type):
        """Sets the scope_owner_type of this ApiPolicyWaiverDTO.


        :param scope_owner_type: The scope_owner_type of this ApiPolicyWaiverDTO.  # noqa: E501
        :type: str
        """

        self._scope_owner_type = scope_owner_type

    @property
    def scope_owner_id(self):
        """Gets the scope_owner_id of this ApiPolicyWaiverDTO.  # noqa: E501


        :return: The scope_owner_id of this ApiPolicyWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._scope_owner_id

    @scope_owner_id.setter
    def scope_owner_id(self, scope_owner_id):
        """Sets the scope_owner_id of this ApiPolicyWaiverDTO.


        :param scope_owner_id: The scope_owner_id of this ApiPolicyWaiverDTO.  # noqa: E501
        :type: str
        """

        self._scope_owner_id = scope_owner_id

    @property
    def scope_owner_name(self):
        """Gets the scope_owner_name of this ApiPolicyWaiverDTO.  # noqa: E501


        :return: The scope_owner_name of this ApiPolicyWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._scope_owner_name

    @scope_owner_name.setter
    def scope_owner_name(self, scope_owner_name):
        """Sets the scope_owner_name of this ApiPolicyWaiverDTO.


        :param scope_owner_name: The scope_owner_name of this ApiPolicyWaiverDTO.  # noqa: E501
        :type: str
        """

        self._scope_owner_name = scope_owner_name

    @property
    def hash(self):
        """Gets the hash of this ApiPolicyWaiverDTO.  # noqa: E501


        :return: The hash of this ApiPolicyWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this ApiPolicyWaiverDTO.


        :param hash: The hash of this ApiPolicyWaiverDTO.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def policy_id(self):
        """Gets the policy_id of this ApiPolicyWaiverDTO.  # noqa: E501


        :return: The policy_id of this ApiPolicyWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this ApiPolicyWaiverDTO.


        :param policy_id: The policy_id of this ApiPolicyWaiverDTO.  # noqa: E501
        :type: str
        """

        self._policy_id = policy_id

    @property
    def vulnerability_id(self):
        """Gets the vulnerability_id of this ApiPolicyWaiverDTO.  # noqa: E501


        :return: The vulnerability_id of this ApiPolicyWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._vulnerability_id

    @vulnerability_id.setter
    def vulnerability_id(self, vulnerability_id):
        """Sets the vulnerability_id of this ApiPolicyWaiverDTO.


        :param vulnerability_id: The vulnerability_id of this ApiPolicyWaiverDTO.  # noqa: E501
        :type: str
        """

        self._vulnerability_id = vulnerability_id

    @property
    def policy_name(self):
        """Gets the policy_name of this ApiPolicyWaiverDTO.  # noqa: E501


        :return: The policy_name of this ApiPolicyWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this ApiPolicyWaiverDTO.


        :param policy_name: The policy_name of this ApiPolicyWaiverDTO.  # noqa: E501
        :type: str
        """

        self._policy_name = policy_name

    @property
    def constraint_facts(self):
        """Gets the constraint_facts of this ApiPolicyWaiverDTO.  # noqa: E501


        :return: The constraint_facts of this ApiPolicyWaiverDTO.  # noqa: E501
        :rtype: list[ConstraintFact]
        """
        return self._constraint_facts

    @constraint_facts.setter
    def constraint_facts(self, constraint_facts):
        """Sets the constraint_facts of this ApiPolicyWaiverDTO.


        :param constraint_facts: The constraint_facts of this ApiPolicyWaiverDTO.  # noqa: E501
        :type: list[ConstraintFact]
        """

        self._constraint_facts = constraint_facts

    @property
    def constraint_facts_json(self):
        """Gets the constraint_facts_json of this ApiPolicyWaiverDTO.  # noqa: E501


        :return: The constraint_facts_json of this ApiPolicyWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._constraint_facts_json

    @constraint_facts_json.setter
    def constraint_facts_json(self, constraint_facts_json):
        """Sets the constraint_facts_json of this ApiPolicyWaiverDTO.


        :param constraint_facts_json: The constraint_facts_json of this ApiPolicyWaiverDTO.  # noqa: E501
        :type: str
        """

        self._constraint_facts_json = constraint_facts_json

    @property
    def component_name(self):
        """Gets the component_name of this ApiPolicyWaiverDTO.  # noqa: E501


        :return: The component_name of this ApiPolicyWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._component_name

    @component_name.setter
    def component_name(self, component_name):
        """Sets the component_name of this ApiPolicyWaiverDTO.


        :param component_name: The component_name of this ApiPolicyWaiverDTO.  # noqa: E501
        :type: str
        """

        self._component_name = component_name

    @property
    def creator_id(self):
        """Gets the creator_id of this ApiPolicyWaiverDTO.  # noqa: E501


        :return: The creator_id of this ApiPolicyWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this ApiPolicyWaiverDTO.


        :param creator_id: The creator_id of this ApiPolicyWaiverDTO.  # noqa: E501
        :type: str
        """

        self._creator_id = creator_id

    @property
    def creator_name(self):
        """Gets the creator_name of this ApiPolicyWaiverDTO.  # noqa: E501


        :return: The creator_name of this ApiPolicyWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._creator_name

    @creator_name.setter
    def creator_name(self, creator_name):
        """Sets the creator_name of this ApiPolicyWaiverDTO.


        :param creator_name: The creator_name of this ApiPolicyWaiverDTO.  # noqa: E501
        :type: str
        """

        self._creator_name = creator_name

    @property
    def matcher_strategy(self):
        """Gets the matcher_strategy of this ApiPolicyWaiverDTO.  # noqa: E501


        :return: The matcher_strategy of this ApiPolicyWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._matcher_strategy

    @matcher_strategy.setter
    def matcher_strategy(self, matcher_strategy):
        """Sets the matcher_strategy of this ApiPolicyWaiverDTO.


        :param matcher_strategy: The matcher_strategy of this ApiPolicyWaiverDTO.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "DEFAULT",
            "EXACT_COMPONENT",
            "ALL_COMPONENTS",
            "ALL_VERSIONS",
        ]  # noqa: E501
        if matcher_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `matcher_strategy` ({0}), must be one of {1}".format(  # noqa: E501
                    matcher_strategy, allowed_values
                )
            )

        self._matcher_strategy = matcher_strategy

    @property
    def associated_package_url(self):
        """Gets the associated_package_url of this ApiPolicyWaiverDTO.  # noqa: E501


        :return: The associated_package_url of this ApiPolicyWaiverDTO.  # noqa: E501
        :rtype: str
        """
        return self._associated_package_url

    @associated_package_url.setter
    def associated_package_url(self, associated_package_url):
        """Sets the associated_package_url of this ApiPolicyWaiverDTO.


        :param associated_package_url: The associated_package_url of this ApiPolicyWaiverDTO.  # noqa: E501
        :type: str
        """

        self._associated_package_url = associated_package_url

    @property
    def component_identifier(self):
        """Gets the component_identifier of this ApiPolicyWaiverDTO.  # noqa: E501


        :return: The component_identifier of this ApiPolicyWaiverDTO.  # noqa: E501
        :rtype: ApiComponentIdentifierDTOV2
        """
        return self._component_identifier

    @component_identifier.setter
    def component_identifier(self, component_identifier):
        """Sets the component_identifier of this ApiPolicyWaiverDTO.


        :param component_identifier: The component_identifier of this ApiPolicyWaiverDTO.  # noqa: E501
        :type: ApiComponentIdentifierDTOV2
        """

        self._component_identifier = component_identifier

    @property
    def threat_level(self):
        """Gets the threat_level of this ApiPolicyWaiverDTO.  # noqa: E501


        :return: The threat_level of this ApiPolicyWaiverDTO.  # noqa: E501
        :rtype: int
        """
        return self._threat_level

    @threat_level.setter
    def threat_level(self, threat_level):
        """Sets the threat_level of this ApiPolicyWaiverDTO.


        :param threat_level: The threat_level of this ApiPolicyWaiverDTO.  # noqa: E501
        :type: int
        """

        self._threat_level = threat_level

    @property
    def display_name(self):
        """Gets the display_name of this ApiPolicyWaiverDTO.  # noqa: E501


        :return: The display_name of this ApiPolicyWaiverDTO.  # noqa: E501
        :rtype: ComponentDisplayName
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ApiPolicyWaiverDTO.


        :param display_name: The display_name of this ApiPolicyWaiverDTO.  # noqa: E501
        :type: ComponentDisplayName
        """

        self._display_name = display_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ApiPolicyWaiverDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiPolicyWaiverDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
