# coding: utf-8

"""
    Sonatype Nexus IQ Server

    This documents the available APIs into [Sonatype Nexus IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management) (also knwon as Nexus Lifecycle).   # noqa: E501

    OpenAPI spec version: 156
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiThirdPartyScanResultDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "policy_action": "str",
        "report_html_url": "str",
        "report_pdf_url": "str",
        "report_data_url": "str",
        "embeddable_report_html_url": "str",
        "is_error": "bool",
        "error_message": "str",
        "components_affected": "ApiEvaluationResultCounterDTO",
        "open_policy_violations": "ApiEvaluationResultCounterDTO",
        "grandfathered_policy_violations": "int",
    }

    attribute_map = {
        "policy_action": "policyAction",
        "report_html_url": "reportHtmlUrl",
        "report_pdf_url": "reportPdfUrl",
        "report_data_url": "reportDataUrl",
        "embeddable_report_html_url": "embeddableReportHtmlUrl",
        "is_error": "isError",
        "error_message": "errorMessage",
        "components_affected": "componentsAffected",
        "open_policy_violations": "openPolicyViolations",
        "grandfathered_policy_violations": "grandfatheredPolicyViolations",
    }

    def __init__(
        self,
        policy_action=None,
        report_html_url=None,
        report_pdf_url=None,
        report_data_url=None,
        embeddable_report_html_url=None,
        is_error=None,
        error_message=None,
        components_affected=None,
        open_policy_violations=None,
        grandfathered_policy_violations=None,
    ):  # noqa: E501
        """ApiThirdPartyScanResultDTO - a model defined in Swagger"""  # noqa: E501
        self._policy_action = None
        self._report_html_url = None
        self._report_pdf_url = None
        self._report_data_url = None
        self._embeddable_report_html_url = None
        self._is_error = None
        self._error_message = None
        self._components_affected = None
        self._open_policy_violations = None
        self._grandfathered_policy_violations = None
        self.discriminator = None
        if policy_action is not None:
            self.policy_action = policy_action
        if report_html_url is not None:
            self.report_html_url = report_html_url
        if report_pdf_url is not None:
            self.report_pdf_url = report_pdf_url
        if report_data_url is not None:
            self.report_data_url = report_data_url
        if embeddable_report_html_url is not None:
            self.embeddable_report_html_url = embeddable_report_html_url
        if is_error is not None:
            self.is_error = is_error
        if error_message is not None:
            self.error_message = error_message
        if components_affected is not None:
            self.components_affected = components_affected
        if open_policy_violations is not None:
            self.open_policy_violations = open_policy_violations
        if grandfathered_policy_violations is not None:
            self.grandfathered_policy_violations = grandfathered_policy_violations

    @property
    def policy_action(self):
        """Gets the policy_action of this ApiThirdPartyScanResultDTO.  # noqa: E501


        :return: The policy_action of this ApiThirdPartyScanResultDTO.  # noqa: E501
        :rtype: str
        """
        return self._policy_action

    @policy_action.setter
    def policy_action(self, policy_action):
        """Sets the policy_action of this ApiThirdPartyScanResultDTO.


        :param policy_action: The policy_action of this ApiThirdPartyScanResultDTO.  # noqa: E501
        :type: str
        """

        self._policy_action = policy_action

    @property
    def report_html_url(self):
        """Gets the report_html_url of this ApiThirdPartyScanResultDTO.  # noqa: E501


        :return: The report_html_url of this ApiThirdPartyScanResultDTO.  # noqa: E501
        :rtype: str
        """
        return self._report_html_url

    @report_html_url.setter
    def report_html_url(self, report_html_url):
        """Sets the report_html_url of this ApiThirdPartyScanResultDTO.


        :param report_html_url: The report_html_url of this ApiThirdPartyScanResultDTO.  # noqa: E501
        :type: str
        """

        self._report_html_url = report_html_url

    @property
    def report_pdf_url(self):
        """Gets the report_pdf_url of this ApiThirdPartyScanResultDTO.  # noqa: E501


        :return: The report_pdf_url of this ApiThirdPartyScanResultDTO.  # noqa: E501
        :rtype: str
        """
        return self._report_pdf_url

    @report_pdf_url.setter
    def report_pdf_url(self, report_pdf_url):
        """Sets the report_pdf_url of this ApiThirdPartyScanResultDTO.


        :param report_pdf_url: The report_pdf_url of this ApiThirdPartyScanResultDTO.  # noqa: E501
        :type: str
        """

        self._report_pdf_url = report_pdf_url

    @property
    def report_data_url(self):
        """Gets the report_data_url of this ApiThirdPartyScanResultDTO.  # noqa: E501


        :return: The report_data_url of this ApiThirdPartyScanResultDTO.  # noqa: E501
        :rtype: str
        """
        return self._report_data_url

    @report_data_url.setter
    def report_data_url(self, report_data_url):
        """Sets the report_data_url of this ApiThirdPartyScanResultDTO.


        :param report_data_url: The report_data_url of this ApiThirdPartyScanResultDTO.  # noqa: E501
        :type: str
        """

        self._report_data_url = report_data_url

    @property
    def embeddable_report_html_url(self):
        """Gets the embeddable_report_html_url of this ApiThirdPartyScanResultDTO.  # noqa: E501


        :return: The embeddable_report_html_url of this ApiThirdPartyScanResultDTO.  # noqa: E501
        :rtype: str
        """
        return self._embeddable_report_html_url

    @embeddable_report_html_url.setter
    def embeddable_report_html_url(self, embeddable_report_html_url):
        """Sets the embeddable_report_html_url of this ApiThirdPartyScanResultDTO.


        :param embeddable_report_html_url: The embeddable_report_html_url of this ApiThirdPartyScanResultDTO.  # noqa: E501
        :type: str
        """

        self._embeddable_report_html_url = embeddable_report_html_url

    @property
    def is_error(self):
        """Gets the is_error of this ApiThirdPartyScanResultDTO.  # noqa: E501


        :return: The is_error of this ApiThirdPartyScanResultDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_error

    @is_error.setter
    def is_error(self, is_error):
        """Sets the is_error of this ApiThirdPartyScanResultDTO.


        :param is_error: The is_error of this ApiThirdPartyScanResultDTO.  # noqa: E501
        :type: bool
        """

        self._is_error = is_error

    @property
    def error_message(self):
        """Gets the error_message of this ApiThirdPartyScanResultDTO.  # noqa: E501


        :return: The error_message of this ApiThirdPartyScanResultDTO.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ApiThirdPartyScanResultDTO.


        :param error_message: The error_message of this ApiThirdPartyScanResultDTO.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def components_affected(self):
        """Gets the components_affected of this ApiThirdPartyScanResultDTO.  # noqa: E501


        :return: The components_affected of this ApiThirdPartyScanResultDTO.  # noqa: E501
        :rtype: ApiEvaluationResultCounterDTO
        """
        return self._components_affected

    @components_affected.setter
    def components_affected(self, components_affected):
        """Sets the components_affected of this ApiThirdPartyScanResultDTO.


        :param components_affected: The components_affected of this ApiThirdPartyScanResultDTO.  # noqa: E501
        :type: ApiEvaluationResultCounterDTO
        """

        self._components_affected = components_affected

    @property
    def open_policy_violations(self):
        """Gets the open_policy_violations of this ApiThirdPartyScanResultDTO.  # noqa: E501


        :return: The open_policy_violations of this ApiThirdPartyScanResultDTO.  # noqa: E501
        :rtype: ApiEvaluationResultCounterDTO
        """
        return self._open_policy_violations

    @open_policy_violations.setter
    def open_policy_violations(self, open_policy_violations):
        """Sets the open_policy_violations of this ApiThirdPartyScanResultDTO.


        :param open_policy_violations: The open_policy_violations of this ApiThirdPartyScanResultDTO.  # noqa: E501
        :type: ApiEvaluationResultCounterDTO
        """

        self._open_policy_violations = open_policy_violations

    @property
    def grandfathered_policy_violations(self):
        """Gets the grandfathered_policy_violations of this ApiThirdPartyScanResultDTO.  # noqa: E501


        :return: The grandfathered_policy_violations of this ApiThirdPartyScanResultDTO.  # noqa: E501
        :rtype: int
        """
        return self._grandfathered_policy_violations

    @grandfathered_policy_violations.setter
    def grandfathered_policy_violations(self, grandfathered_policy_violations):
        """Sets the grandfathered_policy_violations of this ApiThirdPartyScanResultDTO.


        :param grandfathered_policy_violations: The grandfathered_policy_violations of this ApiThirdPartyScanResultDTO.  # noqa: E501
        :type: int
        """

        self._grandfathered_policy_violations = grandfathered_policy_violations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ApiThirdPartyScanResultDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiThirdPartyScanResultDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
