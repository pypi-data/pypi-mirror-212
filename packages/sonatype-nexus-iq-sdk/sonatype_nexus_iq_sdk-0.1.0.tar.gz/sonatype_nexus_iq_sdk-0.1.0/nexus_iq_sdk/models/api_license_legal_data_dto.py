# coding: utf-8

"""
    Sonatype Nexus IQ Server

    This documents the available APIs into [Sonatype Nexus IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management) (also knwon as Nexus Lifecycle).   # noqa: E501

    OpenAPI spec version: 156
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiLicenseLegalDataDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "declared_licenses": "list[str]",
        "observed_licenses": "list[str]",
        "effective_licenses": "list[str]",
        "highest_effective_license_threat_group": "ApiLicenseThreatDTOV2",
        "copyrights": "list[ApiLicenseLegalCopyrightDTO]",
        "license_files": "list[ApiLicenseLegalFileDTO]",
        "notice_files": "list[ApiLicenseLegalFileDTO]",
        "obligations": "list[ApiLicenseLegalObligationDTO]",
        "attributions": "list[ComponentObligationAttributionDTO]",
        "source_links": "list[LegalSourceLinkDTO]",
        "effective_license_status": "str",
        "component_copyright_id": "str",
        "component_copyright_scope_owner_id": "str",
        "component_copyright_last_updated_by_username": "str",
        "component_copyright_last_updated_at": "datetime",
        "component_licenses_id": "str",
        "component_licenses_scope_owner_id": "str",
        "component_licenses_last_updated_by_username": "str",
        "component_licenses_last_updated_at": "datetime",
        "component_notices_id": "str",
        "component_notices_scope_owner_id": "str",
        "component_notices_last_updated_by_username": "str",
        "component_notices_last_updated_at": "datetime",
    }

    attribute_map = {
        "declared_licenses": "declaredLicenses",
        "observed_licenses": "observedLicenses",
        "effective_licenses": "effectiveLicenses",
        "highest_effective_license_threat_group": "highestEffectiveLicenseThreatGroup",
        "copyrights": "copyrights",
        "license_files": "licenseFiles",
        "notice_files": "noticeFiles",
        "obligations": "obligations",
        "attributions": "attributions",
        "source_links": "sourceLinks",
        "effective_license_status": "effectiveLicenseStatus",
        "component_copyright_id": "componentCopyrightId",
        "component_copyright_scope_owner_id": "componentCopyrightScopeOwnerId",
        "component_copyright_last_updated_by_username": "componentCopyrightLastUpdatedByUsername",
        "component_copyright_last_updated_at": "componentCopyrightLastUpdatedAt",
        "component_licenses_id": "componentLicensesId",
        "component_licenses_scope_owner_id": "componentLicensesScopeOwnerId",
        "component_licenses_last_updated_by_username": "componentLicensesLastUpdatedByUsername",
        "component_licenses_last_updated_at": "componentLicensesLastUpdatedAt",
        "component_notices_id": "componentNoticesId",
        "component_notices_scope_owner_id": "componentNoticesScopeOwnerId",
        "component_notices_last_updated_by_username": "componentNoticesLastUpdatedByUsername",
        "component_notices_last_updated_at": "componentNoticesLastUpdatedAt",
    }

    def __init__(
        self,
        declared_licenses=None,
        observed_licenses=None,
        effective_licenses=None,
        highest_effective_license_threat_group=None,
        copyrights=None,
        license_files=None,
        notice_files=None,
        obligations=None,
        attributions=None,
        source_links=None,
        effective_license_status=None,
        component_copyright_id=None,
        component_copyright_scope_owner_id=None,
        component_copyright_last_updated_by_username=None,
        component_copyright_last_updated_at=None,
        component_licenses_id=None,
        component_licenses_scope_owner_id=None,
        component_licenses_last_updated_by_username=None,
        component_licenses_last_updated_at=None,
        component_notices_id=None,
        component_notices_scope_owner_id=None,
        component_notices_last_updated_by_username=None,
        component_notices_last_updated_at=None,
    ):  # noqa: E501
        """ApiLicenseLegalDataDTO - a model defined in Swagger"""  # noqa: E501
        self._declared_licenses = None
        self._observed_licenses = None
        self._effective_licenses = None
        self._highest_effective_license_threat_group = None
        self._copyrights = None
        self._license_files = None
        self._notice_files = None
        self._obligations = None
        self._attributions = None
        self._source_links = None
        self._effective_license_status = None
        self._component_copyright_id = None
        self._component_copyright_scope_owner_id = None
        self._component_copyright_last_updated_by_username = None
        self._component_copyright_last_updated_at = None
        self._component_licenses_id = None
        self._component_licenses_scope_owner_id = None
        self._component_licenses_last_updated_by_username = None
        self._component_licenses_last_updated_at = None
        self._component_notices_id = None
        self._component_notices_scope_owner_id = None
        self._component_notices_last_updated_by_username = None
        self._component_notices_last_updated_at = None
        self.discriminator = None
        if declared_licenses is not None:
            self.declared_licenses = declared_licenses
        if observed_licenses is not None:
            self.observed_licenses = observed_licenses
        if effective_licenses is not None:
            self.effective_licenses = effective_licenses
        if highest_effective_license_threat_group is not None:
            self.highest_effective_license_threat_group = (
                highest_effective_license_threat_group
            )
        if copyrights is not None:
            self.copyrights = copyrights
        if license_files is not None:
            self.license_files = license_files
        if notice_files is not None:
            self.notice_files = notice_files
        if obligations is not None:
            self.obligations = obligations
        if attributions is not None:
            self.attributions = attributions
        if source_links is not None:
            self.source_links = source_links
        if effective_license_status is not None:
            self.effective_license_status = effective_license_status
        if component_copyright_id is not None:
            self.component_copyright_id = component_copyright_id
        if component_copyright_scope_owner_id is not None:
            self.component_copyright_scope_owner_id = component_copyright_scope_owner_id
        if component_copyright_last_updated_by_username is not None:
            self.component_copyright_last_updated_by_username = (
                component_copyright_last_updated_by_username
            )
        if component_copyright_last_updated_at is not None:
            self.component_copyright_last_updated_at = (
                component_copyright_last_updated_at
            )
        if component_licenses_id is not None:
            self.component_licenses_id = component_licenses_id
        if component_licenses_scope_owner_id is not None:
            self.component_licenses_scope_owner_id = component_licenses_scope_owner_id
        if component_licenses_last_updated_by_username is not None:
            self.component_licenses_last_updated_by_username = (
                component_licenses_last_updated_by_username
            )
        if component_licenses_last_updated_at is not None:
            self.component_licenses_last_updated_at = component_licenses_last_updated_at
        if component_notices_id is not None:
            self.component_notices_id = component_notices_id
        if component_notices_scope_owner_id is not None:
            self.component_notices_scope_owner_id = component_notices_scope_owner_id
        if component_notices_last_updated_by_username is not None:
            self.component_notices_last_updated_by_username = (
                component_notices_last_updated_by_username
            )
        if component_notices_last_updated_at is not None:
            self.component_notices_last_updated_at = component_notices_last_updated_at

    @property
    def declared_licenses(self):
        """Gets the declared_licenses of this ApiLicenseLegalDataDTO.  # noqa: E501


        :return: The declared_licenses of this ApiLicenseLegalDataDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._declared_licenses

    @declared_licenses.setter
    def declared_licenses(self, declared_licenses):
        """Sets the declared_licenses of this ApiLicenseLegalDataDTO.


        :param declared_licenses: The declared_licenses of this ApiLicenseLegalDataDTO.  # noqa: E501
        :type: list[str]
        """

        self._declared_licenses = declared_licenses

    @property
    def observed_licenses(self):
        """Gets the observed_licenses of this ApiLicenseLegalDataDTO.  # noqa: E501


        :return: The observed_licenses of this ApiLicenseLegalDataDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._observed_licenses

    @observed_licenses.setter
    def observed_licenses(self, observed_licenses):
        """Sets the observed_licenses of this ApiLicenseLegalDataDTO.


        :param observed_licenses: The observed_licenses of this ApiLicenseLegalDataDTO.  # noqa: E501
        :type: list[str]
        """

        self._observed_licenses = observed_licenses

    @property
    def effective_licenses(self):
        """Gets the effective_licenses of this ApiLicenseLegalDataDTO.  # noqa: E501


        :return: The effective_licenses of this ApiLicenseLegalDataDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._effective_licenses

    @effective_licenses.setter
    def effective_licenses(self, effective_licenses):
        """Sets the effective_licenses of this ApiLicenseLegalDataDTO.


        :param effective_licenses: The effective_licenses of this ApiLicenseLegalDataDTO.  # noqa: E501
        :type: list[str]
        """

        self._effective_licenses = effective_licenses

    @property
    def highest_effective_license_threat_group(self):
        """Gets the highest_effective_license_threat_group of this ApiLicenseLegalDataDTO.  # noqa: E501


        :return: The highest_effective_license_threat_group of this ApiLicenseLegalDataDTO.  # noqa: E501
        :rtype: ApiLicenseThreatDTOV2
        """
        return self._highest_effective_license_threat_group

    @highest_effective_license_threat_group.setter
    def highest_effective_license_threat_group(
        self, highest_effective_license_threat_group
    ):
        """Sets the highest_effective_license_threat_group of this ApiLicenseLegalDataDTO.


        :param highest_effective_license_threat_group: The highest_effective_license_threat_group of this ApiLicenseLegalDataDTO.  # noqa: E501
        :type: ApiLicenseThreatDTOV2
        """

        self._highest_effective_license_threat_group = (
            highest_effective_license_threat_group
        )

    @property
    def copyrights(self):
        """Gets the copyrights of this ApiLicenseLegalDataDTO.  # noqa: E501


        :return: The copyrights of this ApiLicenseLegalDataDTO.  # noqa: E501
        :rtype: list[ApiLicenseLegalCopyrightDTO]
        """
        return self._copyrights

    @copyrights.setter
    def copyrights(self, copyrights):
        """Sets the copyrights of this ApiLicenseLegalDataDTO.


        :param copyrights: The copyrights of this ApiLicenseLegalDataDTO.  # noqa: E501
        :type: list[ApiLicenseLegalCopyrightDTO]
        """

        self._copyrights = copyrights

    @property
    def license_files(self):
        """Gets the license_files of this ApiLicenseLegalDataDTO.  # noqa: E501


        :return: The license_files of this ApiLicenseLegalDataDTO.  # noqa: E501
        :rtype: list[ApiLicenseLegalFileDTO]
        """
        return self._license_files

    @license_files.setter
    def license_files(self, license_files):
        """Sets the license_files of this ApiLicenseLegalDataDTO.


        :param license_files: The license_files of this ApiLicenseLegalDataDTO.  # noqa: E501
        :type: list[ApiLicenseLegalFileDTO]
        """

        self._license_files = license_files

    @property
    def notice_files(self):
        """Gets the notice_files of this ApiLicenseLegalDataDTO.  # noqa: E501


        :return: The notice_files of this ApiLicenseLegalDataDTO.  # noqa: E501
        :rtype: list[ApiLicenseLegalFileDTO]
        """
        return self._notice_files

    @notice_files.setter
    def notice_files(self, notice_files):
        """Sets the notice_files of this ApiLicenseLegalDataDTO.


        :param notice_files: The notice_files of this ApiLicenseLegalDataDTO.  # noqa: E501
        :type: list[ApiLicenseLegalFileDTO]
        """

        self._notice_files = notice_files

    @property
    def obligations(self):
        """Gets the obligations of this ApiLicenseLegalDataDTO.  # noqa: E501


        :return: The obligations of this ApiLicenseLegalDataDTO.  # noqa: E501
        :rtype: list[ApiLicenseLegalObligationDTO]
        """
        return self._obligations

    @obligations.setter
    def obligations(self, obligations):
        """Sets the obligations of this ApiLicenseLegalDataDTO.


        :param obligations: The obligations of this ApiLicenseLegalDataDTO.  # noqa: E501
        :type: list[ApiLicenseLegalObligationDTO]
        """

        self._obligations = obligations

    @property
    def attributions(self):
        """Gets the attributions of this ApiLicenseLegalDataDTO.  # noqa: E501


        :return: The attributions of this ApiLicenseLegalDataDTO.  # noqa: E501
        :rtype: list[ComponentObligationAttributionDTO]
        """
        return self._attributions

    @attributions.setter
    def attributions(self, attributions):
        """Sets the attributions of this ApiLicenseLegalDataDTO.


        :param attributions: The attributions of this ApiLicenseLegalDataDTO.  # noqa: E501
        :type: list[ComponentObligationAttributionDTO]
        """

        self._attributions = attributions

    @property
    def source_links(self):
        """Gets the source_links of this ApiLicenseLegalDataDTO.  # noqa: E501


        :return: The source_links of this ApiLicenseLegalDataDTO.  # noqa: E501
        :rtype: list[LegalSourceLinkDTO]
        """
        return self._source_links

    @source_links.setter
    def source_links(self, source_links):
        """Sets the source_links of this ApiLicenseLegalDataDTO.


        :param source_links: The source_links of this ApiLicenseLegalDataDTO.  # noqa: E501
        :type: list[LegalSourceLinkDTO]
        """

        self._source_links = source_links

    @property
    def effective_license_status(self):
        """Gets the effective_license_status of this ApiLicenseLegalDataDTO.  # noqa: E501


        :return: The effective_license_status of this ApiLicenseLegalDataDTO.  # noqa: E501
        :rtype: str
        """
        return self._effective_license_status

    @effective_license_status.setter
    def effective_license_status(self, effective_license_status):
        """Sets the effective_license_status of this ApiLicenseLegalDataDTO.


        :param effective_license_status: The effective_license_status of this ApiLicenseLegalDataDTO.  # noqa: E501
        :type: str
        """

        self._effective_license_status = effective_license_status

    @property
    def component_copyright_id(self):
        """Gets the component_copyright_id of this ApiLicenseLegalDataDTO.  # noqa: E501


        :return: The component_copyright_id of this ApiLicenseLegalDataDTO.  # noqa: E501
        :rtype: str
        """
        return self._component_copyright_id

    @component_copyright_id.setter
    def component_copyright_id(self, component_copyright_id):
        """Sets the component_copyright_id of this ApiLicenseLegalDataDTO.


        :param component_copyright_id: The component_copyright_id of this ApiLicenseLegalDataDTO.  # noqa: E501
        :type: str
        """

        self._component_copyright_id = component_copyright_id

    @property
    def component_copyright_scope_owner_id(self):
        """Gets the component_copyright_scope_owner_id of this ApiLicenseLegalDataDTO.  # noqa: E501


        :return: The component_copyright_scope_owner_id of this ApiLicenseLegalDataDTO.  # noqa: E501
        :rtype: str
        """
        return self._component_copyright_scope_owner_id

    @component_copyright_scope_owner_id.setter
    def component_copyright_scope_owner_id(self, component_copyright_scope_owner_id):
        """Sets the component_copyright_scope_owner_id of this ApiLicenseLegalDataDTO.


        :param component_copyright_scope_owner_id: The component_copyright_scope_owner_id of this ApiLicenseLegalDataDTO.  # noqa: E501
        :type: str
        """

        self._component_copyright_scope_owner_id = component_copyright_scope_owner_id

    @property
    def component_copyright_last_updated_by_username(self):
        """Gets the component_copyright_last_updated_by_username of this ApiLicenseLegalDataDTO.  # noqa: E501


        :return: The component_copyright_last_updated_by_username of this ApiLicenseLegalDataDTO.  # noqa: E501
        :rtype: str
        """
        return self._component_copyright_last_updated_by_username

    @component_copyright_last_updated_by_username.setter
    def component_copyright_last_updated_by_username(
        self, component_copyright_last_updated_by_username
    ):
        """Sets the component_copyright_last_updated_by_username of this ApiLicenseLegalDataDTO.


        :param component_copyright_last_updated_by_username: The component_copyright_last_updated_by_username of this ApiLicenseLegalDataDTO.  # noqa: E501
        :type: str
        """

        self._component_copyright_last_updated_by_username = (
            component_copyright_last_updated_by_username
        )

    @property
    def component_copyright_last_updated_at(self):
        """Gets the component_copyright_last_updated_at of this ApiLicenseLegalDataDTO.  # noqa: E501


        :return: The component_copyright_last_updated_at of this ApiLicenseLegalDataDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._component_copyright_last_updated_at

    @component_copyright_last_updated_at.setter
    def component_copyright_last_updated_at(self, component_copyright_last_updated_at):
        """Sets the component_copyright_last_updated_at of this ApiLicenseLegalDataDTO.


        :param component_copyright_last_updated_at: The component_copyright_last_updated_at of this ApiLicenseLegalDataDTO.  # noqa: E501
        :type: datetime
        """

        self._component_copyright_last_updated_at = component_copyright_last_updated_at

    @property
    def component_licenses_id(self):
        """Gets the component_licenses_id of this ApiLicenseLegalDataDTO.  # noqa: E501


        :return: The component_licenses_id of this ApiLicenseLegalDataDTO.  # noqa: E501
        :rtype: str
        """
        return self._component_licenses_id

    @component_licenses_id.setter
    def component_licenses_id(self, component_licenses_id):
        """Sets the component_licenses_id of this ApiLicenseLegalDataDTO.


        :param component_licenses_id: The component_licenses_id of this ApiLicenseLegalDataDTO.  # noqa: E501
        :type: str
        """

        self._component_licenses_id = component_licenses_id

    @property
    def component_licenses_scope_owner_id(self):
        """Gets the component_licenses_scope_owner_id of this ApiLicenseLegalDataDTO.  # noqa: E501


        :return: The component_licenses_scope_owner_id of this ApiLicenseLegalDataDTO.  # noqa: E501
        :rtype: str
        """
        return self._component_licenses_scope_owner_id

    @component_licenses_scope_owner_id.setter
    def component_licenses_scope_owner_id(self, component_licenses_scope_owner_id):
        """Sets the component_licenses_scope_owner_id of this ApiLicenseLegalDataDTO.


        :param component_licenses_scope_owner_id: The component_licenses_scope_owner_id of this ApiLicenseLegalDataDTO.  # noqa: E501
        :type: str
        """

        self._component_licenses_scope_owner_id = component_licenses_scope_owner_id

    @property
    def component_licenses_last_updated_by_username(self):
        """Gets the component_licenses_last_updated_by_username of this ApiLicenseLegalDataDTO.  # noqa: E501


        :return: The component_licenses_last_updated_by_username of this ApiLicenseLegalDataDTO.  # noqa: E501
        :rtype: str
        """
        return self._component_licenses_last_updated_by_username

    @component_licenses_last_updated_by_username.setter
    def component_licenses_last_updated_by_username(
        self, component_licenses_last_updated_by_username
    ):
        """Sets the component_licenses_last_updated_by_username of this ApiLicenseLegalDataDTO.


        :param component_licenses_last_updated_by_username: The component_licenses_last_updated_by_username of this ApiLicenseLegalDataDTO.  # noqa: E501
        :type: str
        """

        self._component_licenses_last_updated_by_username = (
            component_licenses_last_updated_by_username
        )

    @property
    def component_licenses_last_updated_at(self):
        """Gets the component_licenses_last_updated_at of this ApiLicenseLegalDataDTO.  # noqa: E501


        :return: The component_licenses_last_updated_at of this ApiLicenseLegalDataDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._component_licenses_last_updated_at

    @component_licenses_last_updated_at.setter
    def component_licenses_last_updated_at(self, component_licenses_last_updated_at):
        """Sets the component_licenses_last_updated_at of this ApiLicenseLegalDataDTO.


        :param component_licenses_last_updated_at: The component_licenses_last_updated_at of this ApiLicenseLegalDataDTO.  # noqa: E501
        :type: datetime
        """

        self._component_licenses_last_updated_at = component_licenses_last_updated_at

    @property
    def component_notices_id(self):
        """Gets the component_notices_id of this ApiLicenseLegalDataDTO.  # noqa: E501


        :return: The component_notices_id of this ApiLicenseLegalDataDTO.  # noqa: E501
        :rtype: str
        """
        return self._component_notices_id

    @component_notices_id.setter
    def component_notices_id(self, component_notices_id):
        """Sets the component_notices_id of this ApiLicenseLegalDataDTO.


        :param component_notices_id: The component_notices_id of this ApiLicenseLegalDataDTO.  # noqa: E501
        :type: str
        """

        self._component_notices_id = component_notices_id

    @property
    def component_notices_scope_owner_id(self):
        """Gets the component_notices_scope_owner_id of this ApiLicenseLegalDataDTO.  # noqa: E501


        :return: The component_notices_scope_owner_id of this ApiLicenseLegalDataDTO.  # noqa: E501
        :rtype: str
        """
        return self._component_notices_scope_owner_id

    @component_notices_scope_owner_id.setter
    def component_notices_scope_owner_id(self, component_notices_scope_owner_id):
        """Sets the component_notices_scope_owner_id of this ApiLicenseLegalDataDTO.


        :param component_notices_scope_owner_id: The component_notices_scope_owner_id of this ApiLicenseLegalDataDTO.  # noqa: E501
        :type: str
        """

        self._component_notices_scope_owner_id = component_notices_scope_owner_id

    @property
    def component_notices_last_updated_by_username(self):
        """Gets the component_notices_last_updated_by_username of this ApiLicenseLegalDataDTO.  # noqa: E501


        :return: The component_notices_last_updated_by_username of this ApiLicenseLegalDataDTO.  # noqa: E501
        :rtype: str
        """
        return self._component_notices_last_updated_by_username

    @component_notices_last_updated_by_username.setter
    def component_notices_last_updated_by_username(
        self, component_notices_last_updated_by_username
    ):
        """Sets the component_notices_last_updated_by_username of this ApiLicenseLegalDataDTO.


        :param component_notices_last_updated_by_username: The component_notices_last_updated_by_username of this ApiLicenseLegalDataDTO.  # noqa: E501
        :type: str
        """

        self._component_notices_last_updated_by_username = (
            component_notices_last_updated_by_username
        )

    @property
    def component_notices_last_updated_at(self):
        """Gets the component_notices_last_updated_at of this ApiLicenseLegalDataDTO.  # noqa: E501


        :return: The component_notices_last_updated_at of this ApiLicenseLegalDataDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._component_notices_last_updated_at

    @component_notices_last_updated_at.setter
    def component_notices_last_updated_at(self, component_notices_last_updated_at):
        """Sets the component_notices_last_updated_at of this ApiLicenseLegalDataDTO.


        :param component_notices_last_updated_at: The component_notices_last_updated_at of this ApiLicenseLegalDataDTO.  # noqa: E501
        :type: datetime
        """

        self._component_notices_last_updated_at = component_notices_last_updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ApiLicenseLegalDataDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiLicenseLegalDataDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
