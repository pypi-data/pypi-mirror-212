# coding: utf-8

"""
    Sonatype Nexus IQ Server

    This documents the available APIs into [Sonatype Nexus IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management) (also knwon as Nexus Lifecycle).   # noqa: E501

    OpenAPI spec version: 156
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiLicenseLegalObligationDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "name": "str",
        "status": "str",
        "comment": "str",
        "component_identifier": "ApiComponentIdentifierDTOV2",
        "package_url": "str",
        "owner_id": "str",
        "last_updated_at": "datetime",
        "last_updated_by_username": "str",
    }

    attribute_map = {
        "id": "id",
        "name": "name",
        "status": "status",
        "comment": "comment",
        "component_identifier": "componentIdentifier",
        "package_url": "packageUrl",
        "owner_id": "ownerId",
        "last_updated_at": "lastUpdatedAt",
        "last_updated_by_username": "lastUpdatedByUsername",
    }

    def __init__(
        self,
        id=None,
        name=None,
        status=None,
        comment=None,
        component_identifier=None,
        package_url=None,
        owner_id=None,
        last_updated_at=None,
        last_updated_by_username=None,
    ):  # noqa: E501
        """ApiLicenseLegalObligationDTO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._status = None
        self._comment = None
        self._component_identifier = None
        self._package_url = None
        self._owner_id = None
        self._last_updated_at = None
        self._last_updated_by_username = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if comment is not None:
            self.comment = comment
        if component_identifier is not None:
            self.component_identifier = component_identifier
        if package_url is not None:
            self.package_url = package_url
        if owner_id is not None:
            self.owner_id = owner_id
        if last_updated_at is not None:
            self.last_updated_at = last_updated_at
        if last_updated_by_username is not None:
            self.last_updated_by_username = last_updated_by_username

    @property
    def id(self):
        """Gets the id of this ApiLicenseLegalObligationDTO.  # noqa: E501


        :return: The id of this ApiLicenseLegalObligationDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiLicenseLegalObligationDTO.


        :param id: The id of this ApiLicenseLegalObligationDTO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ApiLicenseLegalObligationDTO.  # noqa: E501


        :return: The name of this ApiLicenseLegalObligationDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiLicenseLegalObligationDTO.


        :param name: The name of this ApiLicenseLegalObligationDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this ApiLicenseLegalObligationDTO.  # noqa: E501


        :return: The status of this ApiLicenseLegalObligationDTO.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApiLicenseLegalObligationDTO.


        :param status: The status of this ApiLicenseLegalObligationDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["OPEN", "IGNORED", "FLAGGED", "FULFILLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}".format(  # noqa: E501
                    status, allowed_values
                )
            )

        self._status = status

    @property
    def comment(self):
        """Gets the comment of this ApiLicenseLegalObligationDTO.  # noqa: E501


        :return: The comment of this ApiLicenseLegalObligationDTO.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ApiLicenseLegalObligationDTO.


        :param comment: The comment of this ApiLicenseLegalObligationDTO.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def component_identifier(self):
        """Gets the component_identifier of this ApiLicenseLegalObligationDTO.  # noqa: E501


        :return: The component_identifier of this ApiLicenseLegalObligationDTO.  # noqa: E501
        :rtype: ApiComponentIdentifierDTOV2
        """
        return self._component_identifier

    @component_identifier.setter
    def component_identifier(self, component_identifier):
        """Sets the component_identifier of this ApiLicenseLegalObligationDTO.


        :param component_identifier: The component_identifier of this ApiLicenseLegalObligationDTO.  # noqa: E501
        :type: ApiComponentIdentifierDTOV2
        """

        self._component_identifier = component_identifier

    @property
    def package_url(self):
        """Gets the package_url of this ApiLicenseLegalObligationDTO.  # noqa: E501


        :return: The package_url of this ApiLicenseLegalObligationDTO.  # noqa: E501
        :rtype: str
        """
        return self._package_url

    @package_url.setter
    def package_url(self, package_url):
        """Sets the package_url of this ApiLicenseLegalObligationDTO.


        :param package_url: The package_url of this ApiLicenseLegalObligationDTO.  # noqa: E501
        :type: str
        """

        self._package_url = package_url

    @property
    def owner_id(self):
        """Gets the owner_id of this ApiLicenseLegalObligationDTO.  # noqa: E501


        :return: The owner_id of this ApiLicenseLegalObligationDTO.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this ApiLicenseLegalObligationDTO.


        :param owner_id: The owner_id of this ApiLicenseLegalObligationDTO.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this ApiLicenseLegalObligationDTO.  # noqa: E501


        :return: The last_updated_at of this ApiLicenseLegalObligationDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this ApiLicenseLegalObligationDTO.


        :param last_updated_at: The last_updated_at of this ApiLicenseLegalObligationDTO.  # noqa: E501
        :type: datetime
        """

        self._last_updated_at = last_updated_at

    @property
    def last_updated_by_username(self):
        """Gets the last_updated_by_username of this ApiLicenseLegalObligationDTO.  # noqa: E501


        :return: The last_updated_by_username of this ApiLicenseLegalObligationDTO.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by_username

    @last_updated_by_username.setter
    def last_updated_by_username(self, last_updated_by_username):
        """Sets the last_updated_by_username of this ApiLicenseLegalObligationDTO.


        :param last_updated_by_username: The last_updated_by_username of this ApiLicenseLegalObligationDTO.  # noqa: E501
        :type: str
        """

        self._last_updated_by_username = last_updated_by_username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ApiLicenseLegalObligationDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiLicenseLegalObligationDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
