# coding: utf-8

"""
    Sonatype Nexus IQ Server

    This documents the available APIs into [Sonatype Nexus IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management) (also knwon as Nexus Lifecycle).   # noqa: E501

    OpenAPI spec version: 156
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AttributionReportTemplateDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "template_name": "str",
        "document_title": "str",
        "header": "str",
        "footer": "str",
        "include_table_of_contents": "bool",
        "include_appendix": "bool",
        "include_standard_license_texts": "bool",
        "include_sonatype_special_licenses": "bool",
        "last_updated_at": "datetime",
        "include_inner_source": "bool",
    }

    attribute_map = {
        "id": "id",
        "template_name": "templateName",
        "document_title": "documentTitle",
        "header": "header",
        "footer": "footer",
        "include_table_of_contents": "includeTableOfContents",
        "include_appendix": "includeAppendix",
        "include_standard_license_texts": "includeStandardLicenseTexts",
        "include_sonatype_special_licenses": "includeSonatypeSpecialLicenses",
        "last_updated_at": "lastUpdatedAt",
        "include_inner_source": "includeInnerSource",
    }

    def __init__(
        self,
        id=None,
        template_name=None,
        document_title=None,
        header=None,
        footer=None,
        include_table_of_contents=None,
        include_appendix=None,
        include_standard_license_texts=None,
        include_sonatype_special_licenses=None,
        last_updated_at=None,
        include_inner_source=None,
    ):  # noqa: E501
        """AttributionReportTemplateDTO - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._template_name = None
        self._document_title = None
        self._header = None
        self._footer = None
        self._include_table_of_contents = None
        self._include_appendix = None
        self._include_standard_license_texts = None
        self._include_sonatype_special_licenses = None
        self._last_updated_at = None
        self._include_inner_source = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if template_name is not None:
            self.template_name = template_name
        if document_title is not None:
            self.document_title = document_title
        if header is not None:
            self.header = header
        if footer is not None:
            self.footer = footer
        if include_table_of_contents is not None:
            self.include_table_of_contents = include_table_of_contents
        if include_appendix is not None:
            self.include_appendix = include_appendix
        if include_standard_license_texts is not None:
            self.include_standard_license_texts = include_standard_license_texts
        if include_sonatype_special_licenses is not None:
            self.include_sonatype_special_licenses = include_sonatype_special_licenses
        if last_updated_at is not None:
            self.last_updated_at = last_updated_at
        if include_inner_source is not None:
            self.include_inner_source = include_inner_source

    @property
    def id(self):
        """Gets the id of this AttributionReportTemplateDTO.  # noqa: E501


        :return: The id of this AttributionReportTemplateDTO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AttributionReportTemplateDTO.


        :param id: The id of this AttributionReportTemplateDTO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def template_name(self):
        """Gets the template_name of this AttributionReportTemplateDTO.  # noqa: E501


        :return: The template_name of this AttributionReportTemplateDTO.  # noqa: E501
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this AttributionReportTemplateDTO.


        :param template_name: The template_name of this AttributionReportTemplateDTO.  # noqa: E501
        :type: str
        """

        self._template_name = template_name

    @property
    def document_title(self):
        """Gets the document_title of this AttributionReportTemplateDTO.  # noqa: E501


        :return: The document_title of this AttributionReportTemplateDTO.  # noqa: E501
        :rtype: str
        """
        return self._document_title

    @document_title.setter
    def document_title(self, document_title):
        """Sets the document_title of this AttributionReportTemplateDTO.


        :param document_title: The document_title of this AttributionReportTemplateDTO.  # noqa: E501
        :type: str
        """

        self._document_title = document_title

    @property
    def header(self):
        """Gets the header of this AttributionReportTemplateDTO.  # noqa: E501


        :return: The header of this AttributionReportTemplateDTO.  # noqa: E501
        :rtype: str
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this AttributionReportTemplateDTO.


        :param header: The header of this AttributionReportTemplateDTO.  # noqa: E501
        :type: str
        """

        self._header = header

    @property
    def footer(self):
        """Gets the footer of this AttributionReportTemplateDTO.  # noqa: E501


        :return: The footer of this AttributionReportTemplateDTO.  # noqa: E501
        :rtype: str
        """
        return self._footer

    @footer.setter
    def footer(self, footer):
        """Sets the footer of this AttributionReportTemplateDTO.


        :param footer: The footer of this AttributionReportTemplateDTO.  # noqa: E501
        :type: str
        """

        self._footer = footer

    @property
    def include_table_of_contents(self):
        """Gets the include_table_of_contents of this AttributionReportTemplateDTO.  # noqa: E501


        :return: The include_table_of_contents of this AttributionReportTemplateDTO.  # noqa: E501
        :rtype: bool
        """
        return self._include_table_of_contents

    @include_table_of_contents.setter
    def include_table_of_contents(self, include_table_of_contents):
        """Sets the include_table_of_contents of this AttributionReportTemplateDTO.


        :param include_table_of_contents: The include_table_of_contents of this AttributionReportTemplateDTO.  # noqa: E501
        :type: bool
        """

        self._include_table_of_contents = include_table_of_contents

    @property
    def include_appendix(self):
        """Gets the include_appendix of this AttributionReportTemplateDTO.  # noqa: E501


        :return: The include_appendix of this AttributionReportTemplateDTO.  # noqa: E501
        :rtype: bool
        """
        return self._include_appendix

    @include_appendix.setter
    def include_appendix(self, include_appendix):
        """Sets the include_appendix of this AttributionReportTemplateDTO.


        :param include_appendix: The include_appendix of this AttributionReportTemplateDTO.  # noqa: E501
        :type: bool
        """

        self._include_appendix = include_appendix

    @property
    def include_standard_license_texts(self):
        """Gets the include_standard_license_texts of this AttributionReportTemplateDTO.  # noqa: E501


        :return: The include_standard_license_texts of this AttributionReportTemplateDTO.  # noqa: E501
        :rtype: bool
        """
        return self._include_standard_license_texts

    @include_standard_license_texts.setter
    def include_standard_license_texts(self, include_standard_license_texts):
        """Sets the include_standard_license_texts of this AttributionReportTemplateDTO.


        :param include_standard_license_texts: The include_standard_license_texts of this AttributionReportTemplateDTO.  # noqa: E501
        :type: bool
        """

        self._include_standard_license_texts = include_standard_license_texts

    @property
    def include_sonatype_special_licenses(self):
        """Gets the include_sonatype_special_licenses of this AttributionReportTemplateDTO.  # noqa: E501


        :return: The include_sonatype_special_licenses of this AttributionReportTemplateDTO.  # noqa: E501
        :rtype: bool
        """
        return self._include_sonatype_special_licenses

    @include_sonatype_special_licenses.setter
    def include_sonatype_special_licenses(self, include_sonatype_special_licenses):
        """Sets the include_sonatype_special_licenses of this AttributionReportTemplateDTO.


        :param include_sonatype_special_licenses: The include_sonatype_special_licenses of this AttributionReportTemplateDTO.  # noqa: E501
        :type: bool
        """

        self._include_sonatype_special_licenses = include_sonatype_special_licenses

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this AttributionReportTemplateDTO.  # noqa: E501


        :return: The last_updated_at of this AttributionReportTemplateDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this AttributionReportTemplateDTO.


        :param last_updated_at: The last_updated_at of this AttributionReportTemplateDTO.  # noqa: E501
        :type: datetime
        """

        self._last_updated_at = last_updated_at

    @property
    def include_inner_source(self):
        """Gets the include_inner_source of this AttributionReportTemplateDTO.  # noqa: E501


        :return: The include_inner_source of this AttributionReportTemplateDTO.  # noqa: E501
        :rtype: bool
        """
        return self._include_inner_source

    @include_inner_source.setter
    def include_inner_source(self, include_inner_source):
        """Sets the include_inner_source of this AttributionReportTemplateDTO.


        :param include_inner_source: The include_inner_source of this AttributionReportTemplateDTO.  # noqa: E501
        :type: bool
        """

        self._include_inner_source = include_inner_source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(AttributionReportTemplateDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttributionReportTemplateDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
