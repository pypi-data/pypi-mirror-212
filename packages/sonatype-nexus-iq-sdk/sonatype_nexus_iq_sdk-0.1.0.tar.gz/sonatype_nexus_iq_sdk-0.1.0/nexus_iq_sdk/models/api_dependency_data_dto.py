# coding: utf-8

"""
    Sonatype Nexus IQ Server

    This documents the available APIs into [Sonatype Nexus IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management) (also knwon as Nexus Lifecycle).   # noqa: E501

    OpenAPI spec version: 156
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiDependencyDataDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "direct_dependency": "bool",
        "inner_source": "bool",
        "parent_component_purls": "list[str]",
        "inner_source_data": "list[InnerSourceData]",
    }

    attribute_map = {
        "direct_dependency": "directDependency",
        "inner_source": "innerSource",
        "parent_component_purls": "parentComponentPurls",
        "inner_source_data": "innerSourceData",
    }

    def __init__(
        self,
        direct_dependency=None,
        inner_source=None,
        parent_component_purls=None,
        inner_source_data=None,
    ):  # noqa: E501
        """ApiDependencyDataDTO - a model defined in Swagger"""  # noqa: E501
        self._direct_dependency = None
        self._inner_source = None
        self._parent_component_purls = None
        self._inner_source_data = None
        self.discriminator = None
        if direct_dependency is not None:
            self.direct_dependency = direct_dependency
        if inner_source is not None:
            self.inner_source = inner_source
        if parent_component_purls is not None:
            self.parent_component_purls = parent_component_purls
        if inner_source_data is not None:
            self.inner_source_data = inner_source_data

    @property
    def direct_dependency(self):
        """Gets the direct_dependency of this ApiDependencyDataDTO.  # noqa: E501


        :return: The direct_dependency of this ApiDependencyDataDTO.  # noqa: E501
        :rtype: bool
        """
        return self._direct_dependency

    @direct_dependency.setter
    def direct_dependency(self, direct_dependency):
        """Sets the direct_dependency of this ApiDependencyDataDTO.


        :param direct_dependency: The direct_dependency of this ApiDependencyDataDTO.  # noqa: E501
        :type: bool
        """

        self._direct_dependency = direct_dependency

    @property
    def inner_source(self):
        """Gets the inner_source of this ApiDependencyDataDTO.  # noqa: E501


        :return: The inner_source of this ApiDependencyDataDTO.  # noqa: E501
        :rtype: bool
        """
        return self._inner_source

    @inner_source.setter
    def inner_source(self, inner_source):
        """Sets the inner_source of this ApiDependencyDataDTO.


        :param inner_source: The inner_source of this ApiDependencyDataDTO.  # noqa: E501
        :type: bool
        """

        self._inner_source = inner_source

    @property
    def parent_component_purls(self):
        """Gets the parent_component_purls of this ApiDependencyDataDTO.  # noqa: E501


        :return: The parent_component_purls of this ApiDependencyDataDTO.  # noqa: E501
        :rtype: list[str]
        """
        return self._parent_component_purls

    @parent_component_purls.setter
    def parent_component_purls(self, parent_component_purls):
        """Sets the parent_component_purls of this ApiDependencyDataDTO.


        :param parent_component_purls: The parent_component_purls of this ApiDependencyDataDTO.  # noqa: E501
        :type: list[str]
        """

        self._parent_component_purls = parent_component_purls

    @property
    def inner_source_data(self):
        """Gets the inner_source_data of this ApiDependencyDataDTO.  # noqa: E501


        :return: The inner_source_data of this ApiDependencyDataDTO.  # noqa: E501
        :rtype: list[InnerSourceData]
        """
        return self._inner_source_data

    @inner_source_data.setter
    def inner_source_data(self, inner_source_data):
        """Sets the inner_source_data of this ApiDependencyDataDTO.


        :param inner_source_data: The inner_source_data of this ApiDependencyDataDTO.  # noqa: E501
        :type: list[InnerSourceData]
        """

        self._inner_source_data = inner_source_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ApiDependencyDataDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiDependencyDataDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
