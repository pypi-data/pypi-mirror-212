# coding: utf-8

"""
    Sonatype Nexus IQ Server

    This documents the available APIs into [Sonatype Nexus IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management) (also knwon as Nexus Lifecycle).   # noqa: E501

    OpenAPI spec version: 156
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SecurityVulnerabilityData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "identifier": "str",
        "vuln_ids": "list[str]",
        "vulnerability_link": "str",
        "source": "VulnerabilitySource",
        "main_severity": "SecurityVulnerabilitySeverity",
        "severity_scores": "list[SecurityVulnerabilitySeverity]",
        "weakness": "SecurityVulnerabilityWeakness",
        "categories": "list[str]",
        "description": "str",
        "explanation_markdown": "str",
        "component_explanation_markdown": "str",
        "detection_markdown": "str",
        "component_detection_markdown": "str",
        "recommendation_markdown": "str",
        "component_recommendation_markdown": "str",
        "root_causes": "list[RootCause]",
        "advisories": "list[ReferenceLink]",
        "vulnerable_version_ranges": "list[str]",
        "research_type": "str",
        "is_advanced_vulnerability_detection": "bool",
    }

    attribute_map = {
        "identifier": "identifier",
        "vuln_ids": "vulnIds",
        "vulnerability_link": "vulnerabilityLink",
        "source": "source",
        "main_severity": "mainSeverity",
        "severity_scores": "severityScores",
        "weakness": "weakness",
        "categories": "categories",
        "description": "description",
        "explanation_markdown": "explanationMarkdown",
        "component_explanation_markdown": "componentExplanationMarkdown",
        "detection_markdown": "detectionMarkdown",
        "component_detection_markdown": "componentDetectionMarkdown",
        "recommendation_markdown": "recommendationMarkdown",
        "component_recommendation_markdown": "componentRecommendationMarkdown",
        "root_causes": "rootCauses",
        "advisories": "advisories",
        "vulnerable_version_ranges": "vulnerableVersionRanges",
        "research_type": "researchType",
        "is_advanced_vulnerability_detection": "isAdvancedVulnerabilityDetection",
    }

    def __init__(
        self,
        identifier=None,
        vuln_ids=None,
        vulnerability_link=None,
        source=None,
        main_severity=None,
        severity_scores=None,
        weakness=None,
        categories=None,
        description=None,
        explanation_markdown=None,
        component_explanation_markdown=None,
        detection_markdown=None,
        component_detection_markdown=None,
        recommendation_markdown=None,
        component_recommendation_markdown=None,
        root_causes=None,
        advisories=None,
        vulnerable_version_ranges=None,
        research_type=None,
        is_advanced_vulnerability_detection=None,
    ):  # noqa: E501
        """SecurityVulnerabilityData - a model defined in Swagger"""  # noqa: E501
        self._identifier = None
        self._vuln_ids = None
        self._vulnerability_link = None
        self._source = None
        self._main_severity = None
        self._severity_scores = None
        self._weakness = None
        self._categories = None
        self._description = None
        self._explanation_markdown = None
        self._component_explanation_markdown = None
        self._detection_markdown = None
        self._component_detection_markdown = None
        self._recommendation_markdown = None
        self._component_recommendation_markdown = None
        self._root_causes = None
        self._advisories = None
        self._vulnerable_version_ranges = None
        self._research_type = None
        self._is_advanced_vulnerability_detection = None
        self.discriminator = None
        if identifier is not None:
            self.identifier = identifier
        if vuln_ids is not None:
            self.vuln_ids = vuln_ids
        if vulnerability_link is not None:
            self.vulnerability_link = vulnerability_link
        if source is not None:
            self.source = source
        if main_severity is not None:
            self.main_severity = main_severity
        if severity_scores is not None:
            self.severity_scores = severity_scores
        if weakness is not None:
            self.weakness = weakness
        if categories is not None:
            self.categories = categories
        if description is not None:
            self.description = description
        if explanation_markdown is not None:
            self.explanation_markdown = explanation_markdown
        if component_explanation_markdown is not None:
            self.component_explanation_markdown = component_explanation_markdown
        if detection_markdown is not None:
            self.detection_markdown = detection_markdown
        if component_detection_markdown is not None:
            self.component_detection_markdown = component_detection_markdown
        if recommendation_markdown is not None:
            self.recommendation_markdown = recommendation_markdown
        if component_recommendation_markdown is not None:
            self.component_recommendation_markdown = component_recommendation_markdown
        if root_causes is not None:
            self.root_causes = root_causes
        if advisories is not None:
            self.advisories = advisories
        if vulnerable_version_ranges is not None:
            self.vulnerable_version_ranges = vulnerable_version_ranges
        if research_type is not None:
            self.research_type = research_type
        if is_advanced_vulnerability_detection is not None:
            self.is_advanced_vulnerability_detection = (
                is_advanced_vulnerability_detection
            )

    @property
    def identifier(self):
        """Gets the identifier of this SecurityVulnerabilityData.  # noqa: E501


        :return: The identifier of this SecurityVulnerabilityData.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this SecurityVulnerabilityData.


        :param identifier: The identifier of this SecurityVulnerabilityData.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def vuln_ids(self):
        """Gets the vuln_ids of this SecurityVulnerabilityData.  # noqa: E501


        :return: The vuln_ids of this SecurityVulnerabilityData.  # noqa: E501
        :rtype: list[str]
        """
        return self._vuln_ids

    @vuln_ids.setter
    def vuln_ids(self, vuln_ids):
        """Sets the vuln_ids of this SecurityVulnerabilityData.


        :param vuln_ids: The vuln_ids of this SecurityVulnerabilityData.  # noqa: E501
        :type: list[str]
        """

        self._vuln_ids = vuln_ids

    @property
    def vulnerability_link(self):
        """Gets the vulnerability_link of this SecurityVulnerabilityData.  # noqa: E501


        :return: The vulnerability_link of this SecurityVulnerabilityData.  # noqa: E501
        :rtype: str
        """
        return self._vulnerability_link

    @vulnerability_link.setter
    def vulnerability_link(self, vulnerability_link):
        """Sets the vulnerability_link of this SecurityVulnerabilityData.


        :param vulnerability_link: The vulnerability_link of this SecurityVulnerabilityData.  # noqa: E501
        :type: str
        """

        self._vulnerability_link = vulnerability_link

    @property
    def source(self):
        """Gets the source of this SecurityVulnerabilityData.  # noqa: E501


        :return: The source of this SecurityVulnerabilityData.  # noqa: E501
        :rtype: VulnerabilitySource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SecurityVulnerabilityData.


        :param source: The source of this SecurityVulnerabilityData.  # noqa: E501
        :type: VulnerabilitySource
        """

        self._source = source

    @property
    def main_severity(self):
        """Gets the main_severity of this SecurityVulnerabilityData.  # noqa: E501


        :return: The main_severity of this SecurityVulnerabilityData.  # noqa: E501
        :rtype: SecurityVulnerabilitySeverity
        """
        return self._main_severity

    @main_severity.setter
    def main_severity(self, main_severity):
        """Sets the main_severity of this SecurityVulnerabilityData.


        :param main_severity: The main_severity of this SecurityVulnerabilityData.  # noqa: E501
        :type: SecurityVulnerabilitySeverity
        """

        self._main_severity = main_severity

    @property
    def severity_scores(self):
        """Gets the severity_scores of this SecurityVulnerabilityData.  # noqa: E501


        :return: The severity_scores of this SecurityVulnerabilityData.  # noqa: E501
        :rtype: list[SecurityVulnerabilitySeverity]
        """
        return self._severity_scores

    @severity_scores.setter
    def severity_scores(self, severity_scores):
        """Sets the severity_scores of this SecurityVulnerabilityData.


        :param severity_scores: The severity_scores of this SecurityVulnerabilityData.  # noqa: E501
        :type: list[SecurityVulnerabilitySeverity]
        """

        self._severity_scores = severity_scores

    @property
    def weakness(self):
        """Gets the weakness of this SecurityVulnerabilityData.  # noqa: E501


        :return: The weakness of this SecurityVulnerabilityData.  # noqa: E501
        :rtype: SecurityVulnerabilityWeakness
        """
        return self._weakness

    @weakness.setter
    def weakness(self, weakness):
        """Sets the weakness of this SecurityVulnerabilityData.


        :param weakness: The weakness of this SecurityVulnerabilityData.  # noqa: E501
        :type: SecurityVulnerabilityWeakness
        """

        self._weakness = weakness

    @property
    def categories(self):
        """Gets the categories of this SecurityVulnerabilityData.  # noqa: E501


        :return: The categories of this SecurityVulnerabilityData.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this SecurityVulnerabilityData.


        :param categories: The categories of this SecurityVulnerabilityData.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def description(self):
        """Gets the description of this SecurityVulnerabilityData.  # noqa: E501


        :return: The description of this SecurityVulnerabilityData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SecurityVulnerabilityData.


        :param description: The description of this SecurityVulnerabilityData.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def explanation_markdown(self):
        """Gets the explanation_markdown of this SecurityVulnerabilityData.  # noqa: E501


        :return: The explanation_markdown of this SecurityVulnerabilityData.  # noqa: E501
        :rtype: str
        """
        return self._explanation_markdown

    @explanation_markdown.setter
    def explanation_markdown(self, explanation_markdown):
        """Sets the explanation_markdown of this SecurityVulnerabilityData.


        :param explanation_markdown: The explanation_markdown of this SecurityVulnerabilityData.  # noqa: E501
        :type: str
        """

        self._explanation_markdown = explanation_markdown

    @property
    def component_explanation_markdown(self):
        """Gets the component_explanation_markdown of this SecurityVulnerabilityData.  # noqa: E501


        :return: The component_explanation_markdown of this SecurityVulnerabilityData.  # noqa: E501
        :rtype: str
        """
        return self._component_explanation_markdown

    @component_explanation_markdown.setter
    def component_explanation_markdown(self, component_explanation_markdown):
        """Sets the component_explanation_markdown of this SecurityVulnerabilityData.


        :param component_explanation_markdown: The component_explanation_markdown of this SecurityVulnerabilityData.  # noqa: E501
        :type: str
        """

        self._component_explanation_markdown = component_explanation_markdown

    @property
    def detection_markdown(self):
        """Gets the detection_markdown of this SecurityVulnerabilityData.  # noqa: E501


        :return: The detection_markdown of this SecurityVulnerabilityData.  # noqa: E501
        :rtype: str
        """
        return self._detection_markdown

    @detection_markdown.setter
    def detection_markdown(self, detection_markdown):
        """Sets the detection_markdown of this SecurityVulnerabilityData.


        :param detection_markdown: The detection_markdown of this SecurityVulnerabilityData.  # noqa: E501
        :type: str
        """

        self._detection_markdown = detection_markdown

    @property
    def component_detection_markdown(self):
        """Gets the component_detection_markdown of this SecurityVulnerabilityData.  # noqa: E501


        :return: The component_detection_markdown of this SecurityVulnerabilityData.  # noqa: E501
        :rtype: str
        """
        return self._component_detection_markdown

    @component_detection_markdown.setter
    def component_detection_markdown(self, component_detection_markdown):
        """Sets the component_detection_markdown of this SecurityVulnerabilityData.


        :param component_detection_markdown: The component_detection_markdown of this SecurityVulnerabilityData.  # noqa: E501
        :type: str
        """

        self._component_detection_markdown = component_detection_markdown

    @property
    def recommendation_markdown(self):
        """Gets the recommendation_markdown of this SecurityVulnerabilityData.  # noqa: E501


        :return: The recommendation_markdown of this SecurityVulnerabilityData.  # noqa: E501
        :rtype: str
        """
        return self._recommendation_markdown

    @recommendation_markdown.setter
    def recommendation_markdown(self, recommendation_markdown):
        """Sets the recommendation_markdown of this SecurityVulnerabilityData.


        :param recommendation_markdown: The recommendation_markdown of this SecurityVulnerabilityData.  # noqa: E501
        :type: str
        """

        self._recommendation_markdown = recommendation_markdown

    @property
    def component_recommendation_markdown(self):
        """Gets the component_recommendation_markdown of this SecurityVulnerabilityData.  # noqa: E501


        :return: The component_recommendation_markdown of this SecurityVulnerabilityData.  # noqa: E501
        :rtype: str
        """
        return self._component_recommendation_markdown

    @component_recommendation_markdown.setter
    def component_recommendation_markdown(self, component_recommendation_markdown):
        """Sets the component_recommendation_markdown of this SecurityVulnerabilityData.


        :param component_recommendation_markdown: The component_recommendation_markdown of this SecurityVulnerabilityData.  # noqa: E501
        :type: str
        """

        self._component_recommendation_markdown = component_recommendation_markdown

    @property
    def root_causes(self):
        """Gets the root_causes of this SecurityVulnerabilityData.  # noqa: E501


        :return: The root_causes of this SecurityVulnerabilityData.  # noqa: E501
        :rtype: list[RootCause]
        """
        return self._root_causes

    @root_causes.setter
    def root_causes(self, root_causes):
        """Sets the root_causes of this SecurityVulnerabilityData.


        :param root_causes: The root_causes of this SecurityVulnerabilityData.  # noqa: E501
        :type: list[RootCause]
        """

        self._root_causes = root_causes

    @property
    def advisories(self):
        """Gets the advisories of this SecurityVulnerabilityData.  # noqa: E501


        :return: The advisories of this SecurityVulnerabilityData.  # noqa: E501
        :rtype: list[ReferenceLink]
        """
        return self._advisories

    @advisories.setter
    def advisories(self, advisories):
        """Sets the advisories of this SecurityVulnerabilityData.


        :param advisories: The advisories of this SecurityVulnerabilityData.  # noqa: E501
        :type: list[ReferenceLink]
        """

        self._advisories = advisories

    @property
    def vulnerable_version_ranges(self):
        """Gets the vulnerable_version_ranges of this SecurityVulnerabilityData.  # noqa: E501


        :return: The vulnerable_version_ranges of this SecurityVulnerabilityData.  # noqa: E501
        :rtype: list[str]
        """
        return self._vulnerable_version_ranges

    @vulnerable_version_ranges.setter
    def vulnerable_version_ranges(self, vulnerable_version_ranges):
        """Sets the vulnerable_version_ranges of this SecurityVulnerabilityData.


        :param vulnerable_version_ranges: The vulnerable_version_ranges of this SecurityVulnerabilityData.  # noqa: E501
        :type: list[str]
        """

        self._vulnerable_version_ranges = vulnerable_version_ranges

    @property
    def research_type(self):
        """Gets the research_type of this SecurityVulnerabilityData.  # noqa: E501


        :return: The research_type of this SecurityVulnerabilityData.  # noqa: E501
        :rtype: str
        """
        return self._research_type

    @research_type.setter
    def research_type(self, research_type):
        """Sets the research_type of this SecurityVulnerabilityData.


        :param research_type: The research_type of this SecurityVulnerabilityData.  # noqa: E501
        :type: str
        """
        allowed_values = ["FAST_TRACK", "DEEP_DIVE"]  # noqa: E501
        if research_type not in allowed_values:
            raise ValueError(
                "Invalid value for `research_type` ({0}), must be one of {1}".format(  # noqa: E501
                    research_type, allowed_values
                )
            )

        self._research_type = research_type

    @property
    def is_advanced_vulnerability_detection(self):
        """Gets the is_advanced_vulnerability_detection of this SecurityVulnerabilityData.  # noqa: E501


        :return: The is_advanced_vulnerability_detection of this SecurityVulnerabilityData.  # noqa: E501
        :rtype: bool
        """
        return self._is_advanced_vulnerability_detection

    @is_advanced_vulnerability_detection.setter
    def is_advanced_vulnerability_detection(self, is_advanced_vulnerability_detection):
        """Sets the is_advanced_vulnerability_detection of this SecurityVulnerabilityData.


        :param is_advanced_vulnerability_detection: The is_advanced_vulnerability_detection of this SecurityVulnerabilityData.  # noqa: E501
        :type: bool
        """

        self._is_advanced_vulnerability_detection = is_advanced_vulnerability_detection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(SecurityVulnerabilityData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecurityVulnerabilityData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
