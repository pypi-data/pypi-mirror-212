# coding: utf-8

"""
    Sonatype Nexus IQ Server

    This documents the available APIs into [Sonatype Nexus IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management) (also knwon as Nexus Lifecycle).   # noqa: E501

    OpenAPI spec version: 156
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiSourceControlConfigurationDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "clone_directory": "str",
        "git_implementation": "str",
        "pr_comment_purge_window": "int",
        "pr_event_purge_window": "int",
        "git_executable": "str",
        "git_timeout_seconds": "int",
        "commit_username": "str",
        "commit_email": "str",
        "use_username_in_repository_clone_url": "bool",
        "default_branch_monitoring_start_time": "str",
        "default_branch_monitoring_interval_hours": "int",
        "pull_request_monitoring_interval_seconds": "int",
    }

    attribute_map = {
        "clone_directory": "cloneDirectory",
        "git_implementation": "gitImplementation",
        "pr_comment_purge_window": "prCommentPurgeWindow",
        "pr_event_purge_window": "prEventPurgeWindow",
        "git_executable": "gitExecutable",
        "git_timeout_seconds": "gitTimeoutSeconds",
        "commit_username": "commitUsername",
        "commit_email": "commitEmail",
        "use_username_in_repository_clone_url": "useUsernameInRepositoryCloneUrl",
        "default_branch_monitoring_start_time": "defaultBranchMonitoringStartTime",
        "default_branch_monitoring_interval_hours": "defaultBranchMonitoringIntervalHours",
        "pull_request_monitoring_interval_seconds": "pullRequestMonitoringIntervalSeconds",
    }

    def __init__(
        self,
        clone_directory=None,
        git_implementation=None,
        pr_comment_purge_window=None,
        pr_event_purge_window=None,
        git_executable=None,
        git_timeout_seconds=None,
        commit_username=None,
        commit_email=None,
        use_username_in_repository_clone_url=None,
        default_branch_monitoring_start_time=None,
        default_branch_monitoring_interval_hours=None,
        pull_request_monitoring_interval_seconds=None,
    ):  # noqa: E501
        """ApiSourceControlConfigurationDTO - a model defined in Swagger"""  # noqa: E501
        self._clone_directory = None
        self._git_implementation = None
        self._pr_comment_purge_window = None
        self._pr_event_purge_window = None
        self._git_executable = None
        self._git_timeout_seconds = None
        self._commit_username = None
        self._commit_email = None
        self._use_username_in_repository_clone_url = None
        self._default_branch_monitoring_start_time = None
        self._default_branch_monitoring_interval_hours = None
        self._pull_request_monitoring_interval_seconds = None
        self.discriminator = None
        if clone_directory is not None:
            self.clone_directory = clone_directory
        if git_implementation is not None:
            self.git_implementation = git_implementation
        if pr_comment_purge_window is not None:
            self.pr_comment_purge_window = pr_comment_purge_window
        if pr_event_purge_window is not None:
            self.pr_event_purge_window = pr_event_purge_window
        if git_executable is not None:
            self.git_executable = git_executable
        if git_timeout_seconds is not None:
            self.git_timeout_seconds = git_timeout_seconds
        if commit_username is not None:
            self.commit_username = commit_username
        if commit_email is not None:
            self.commit_email = commit_email
        if use_username_in_repository_clone_url is not None:
            self.use_username_in_repository_clone_url = (
                use_username_in_repository_clone_url
            )
        if default_branch_monitoring_start_time is not None:
            self.default_branch_monitoring_start_time = (
                default_branch_monitoring_start_time
            )
        if default_branch_monitoring_interval_hours is not None:
            self.default_branch_monitoring_interval_hours = (
                default_branch_monitoring_interval_hours
            )
        if pull_request_monitoring_interval_seconds is not None:
            self.pull_request_monitoring_interval_seconds = (
                pull_request_monitoring_interval_seconds
            )

    @property
    def clone_directory(self):
        """Gets the clone_directory of this ApiSourceControlConfigurationDTO.  # noqa: E501


        :return: The clone_directory of this ApiSourceControlConfigurationDTO.  # noqa: E501
        :rtype: str
        """
        return self._clone_directory

    @clone_directory.setter
    def clone_directory(self, clone_directory):
        """Sets the clone_directory of this ApiSourceControlConfigurationDTO.


        :param clone_directory: The clone_directory of this ApiSourceControlConfigurationDTO.  # noqa: E501
        :type: str
        """

        self._clone_directory = clone_directory

    @property
    def git_implementation(self):
        """Gets the git_implementation of this ApiSourceControlConfigurationDTO.  # noqa: E501


        :return: The git_implementation of this ApiSourceControlConfigurationDTO.  # noqa: E501
        :rtype: str
        """
        return self._git_implementation

    @git_implementation.setter
    def git_implementation(self, git_implementation):
        """Sets the git_implementation of this ApiSourceControlConfigurationDTO.


        :param git_implementation: The git_implementation of this ApiSourceControlConfigurationDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["native", "java"]  # noqa: E501
        if git_implementation not in allowed_values:
            raise ValueError(
                "Invalid value for `git_implementation` ({0}), must be one of {1}".format(  # noqa: E501
                    git_implementation, allowed_values
                )
            )

        self._git_implementation = git_implementation

    @property
    def pr_comment_purge_window(self):
        """Gets the pr_comment_purge_window of this ApiSourceControlConfigurationDTO.  # noqa: E501


        :return: The pr_comment_purge_window of this ApiSourceControlConfigurationDTO.  # noqa: E501
        :rtype: int
        """
        return self._pr_comment_purge_window

    @pr_comment_purge_window.setter
    def pr_comment_purge_window(self, pr_comment_purge_window):
        """Sets the pr_comment_purge_window of this ApiSourceControlConfigurationDTO.


        :param pr_comment_purge_window: The pr_comment_purge_window of this ApiSourceControlConfigurationDTO.  # noqa: E501
        :type: int
        """

        self._pr_comment_purge_window = pr_comment_purge_window

    @property
    def pr_event_purge_window(self):
        """Gets the pr_event_purge_window of this ApiSourceControlConfigurationDTO.  # noqa: E501


        :return: The pr_event_purge_window of this ApiSourceControlConfigurationDTO.  # noqa: E501
        :rtype: int
        """
        return self._pr_event_purge_window

    @pr_event_purge_window.setter
    def pr_event_purge_window(self, pr_event_purge_window):
        """Sets the pr_event_purge_window of this ApiSourceControlConfigurationDTO.


        :param pr_event_purge_window: The pr_event_purge_window of this ApiSourceControlConfigurationDTO.  # noqa: E501
        :type: int
        """

        self._pr_event_purge_window = pr_event_purge_window

    @property
    def git_executable(self):
        """Gets the git_executable of this ApiSourceControlConfigurationDTO.  # noqa: E501


        :return: The git_executable of this ApiSourceControlConfigurationDTO.  # noqa: E501
        :rtype: str
        """
        return self._git_executable

    @git_executable.setter
    def git_executable(self, git_executable):
        """Sets the git_executable of this ApiSourceControlConfigurationDTO.


        :param git_executable: The git_executable of this ApiSourceControlConfigurationDTO.  # noqa: E501
        :type: str
        """

        self._git_executable = git_executable

    @property
    def git_timeout_seconds(self):
        """Gets the git_timeout_seconds of this ApiSourceControlConfigurationDTO.  # noqa: E501


        :return: The git_timeout_seconds of this ApiSourceControlConfigurationDTO.  # noqa: E501
        :rtype: int
        """
        return self._git_timeout_seconds

    @git_timeout_seconds.setter
    def git_timeout_seconds(self, git_timeout_seconds):
        """Sets the git_timeout_seconds of this ApiSourceControlConfigurationDTO.


        :param git_timeout_seconds: The git_timeout_seconds of this ApiSourceControlConfigurationDTO.  # noqa: E501
        :type: int
        """

        self._git_timeout_seconds = git_timeout_seconds

    @property
    def commit_username(self):
        """Gets the commit_username of this ApiSourceControlConfigurationDTO.  # noqa: E501


        :return: The commit_username of this ApiSourceControlConfigurationDTO.  # noqa: E501
        :rtype: str
        """
        return self._commit_username

    @commit_username.setter
    def commit_username(self, commit_username):
        """Sets the commit_username of this ApiSourceControlConfigurationDTO.


        :param commit_username: The commit_username of this ApiSourceControlConfigurationDTO.  # noqa: E501
        :type: str
        """

        self._commit_username = commit_username

    @property
    def commit_email(self):
        """Gets the commit_email of this ApiSourceControlConfigurationDTO.  # noqa: E501


        :return: The commit_email of this ApiSourceControlConfigurationDTO.  # noqa: E501
        :rtype: str
        """
        return self._commit_email

    @commit_email.setter
    def commit_email(self, commit_email):
        """Sets the commit_email of this ApiSourceControlConfigurationDTO.


        :param commit_email: The commit_email of this ApiSourceControlConfigurationDTO.  # noqa: E501
        :type: str
        """

        self._commit_email = commit_email

    @property
    def use_username_in_repository_clone_url(self):
        """Gets the use_username_in_repository_clone_url of this ApiSourceControlConfigurationDTO.  # noqa: E501


        :return: The use_username_in_repository_clone_url of this ApiSourceControlConfigurationDTO.  # noqa: E501
        :rtype: bool
        """
        return self._use_username_in_repository_clone_url

    @use_username_in_repository_clone_url.setter
    def use_username_in_repository_clone_url(
        self, use_username_in_repository_clone_url
    ):
        """Sets the use_username_in_repository_clone_url of this ApiSourceControlConfigurationDTO.


        :param use_username_in_repository_clone_url: The use_username_in_repository_clone_url of this ApiSourceControlConfigurationDTO.  # noqa: E501
        :type: bool
        """

        self._use_username_in_repository_clone_url = (
            use_username_in_repository_clone_url
        )

    @property
    def default_branch_monitoring_start_time(self):
        """Gets the default_branch_monitoring_start_time of this ApiSourceControlConfigurationDTO.  # noqa: E501


        :return: The default_branch_monitoring_start_time of this ApiSourceControlConfigurationDTO.  # noqa: E501
        :rtype: str
        """
        return self._default_branch_monitoring_start_time

    @default_branch_monitoring_start_time.setter
    def default_branch_monitoring_start_time(
        self, default_branch_monitoring_start_time
    ):
        """Sets the default_branch_monitoring_start_time of this ApiSourceControlConfigurationDTO.


        :param default_branch_monitoring_start_time: The default_branch_monitoring_start_time of this ApiSourceControlConfigurationDTO.  # noqa: E501
        :type: str
        """

        self._default_branch_monitoring_start_time = (
            default_branch_monitoring_start_time
        )

    @property
    def default_branch_monitoring_interval_hours(self):
        """Gets the default_branch_monitoring_interval_hours of this ApiSourceControlConfigurationDTO.  # noqa: E501


        :return: The default_branch_monitoring_interval_hours of this ApiSourceControlConfigurationDTO.  # noqa: E501
        :rtype: int
        """
        return self._default_branch_monitoring_interval_hours

    @default_branch_monitoring_interval_hours.setter
    def default_branch_monitoring_interval_hours(
        self, default_branch_monitoring_interval_hours
    ):
        """Sets the default_branch_monitoring_interval_hours of this ApiSourceControlConfigurationDTO.


        :param default_branch_monitoring_interval_hours: The default_branch_monitoring_interval_hours of this ApiSourceControlConfigurationDTO.  # noqa: E501
        :type: int
        """

        self._default_branch_monitoring_interval_hours = (
            default_branch_monitoring_interval_hours
        )

    @property
    def pull_request_monitoring_interval_seconds(self):
        """Gets the pull_request_monitoring_interval_seconds of this ApiSourceControlConfigurationDTO.  # noqa: E501


        :return: The pull_request_monitoring_interval_seconds of this ApiSourceControlConfigurationDTO.  # noqa: E501
        :rtype: int
        """
        return self._pull_request_monitoring_interval_seconds

    @pull_request_monitoring_interval_seconds.setter
    def pull_request_monitoring_interval_seconds(
        self, pull_request_monitoring_interval_seconds
    ):
        """Sets the pull_request_monitoring_interval_seconds of this ApiSourceControlConfigurationDTO.


        :param pull_request_monitoring_interval_seconds: The pull_request_monitoring_interval_seconds of this ApiSourceControlConfigurationDTO.  # noqa: E501
        :type: int
        """

        self._pull_request_monitoring_interval_seconds = (
            pull_request_monitoring_interval_seconds
        )

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ApiSourceControlConfigurationDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiSourceControlConfigurationDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
