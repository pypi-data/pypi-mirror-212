# coding: utf-8

"""
    Sonatype Nexus IQ Server

    This documents the available APIs into [Sonatype Nexus IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management) (also knwon as Nexus Lifecycle).   # noqa: E501

    OpenAPI spec version: 156
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ApiWaiverOptionsDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "comment": "str",
        "apply_to_all_components": "bool",
        "matcher_strategy": "str",
        "expiry_time": "datetime",
    }

    attribute_map = {
        "comment": "comment",
        "apply_to_all_components": "applyToAllComponents",
        "matcher_strategy": "matcherStrategy",
        "expiry_time": "expiryTime",
    }

    def __init__(
        self,
        comment=None,
        apply_to_all_components=None,
        matcher_strategy=None,
        expiry_time=None,
    ):  # noqa: E501
        """ApiWaiverOptionsDTO - a model defined in Swagger"""  # noqa: E501
        self._comment = None
        self._apply_to_all_components = None
        self._matcher_strategy = None
        self._expiry_time = None
        self.discriminator = None
        if comment is not None:
            self.comment = comment
        if apply_to_all_components is not None:
            self.apply_to_all_components = apply_to_all_components
        if matcher_strategy is not None:
            self.matcher_strategy = matcher_strategy
        if expiry_time is not None:
            self.expiry_time = expiry_time

    @property
    def comment(self):
        """Gets the comment of this ApiWaiverOptionsDTO.  # noqa: E501


        :return: The comment of this ApiWaiverOptionsDTO.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ApiWaiverOptionsDTO.


        :param comment: The comment of this ApiWaiverOptionsDTO.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def apply_to_all_components(self):
        """Gets the apply_to_all_components of this ApiWaiverOptionsDTO.  # noqa: E501


        :return: The apply_to_all_components of this ApiWaiverOptionsDTO.  # noqa: E501
        :rtype: bool
        """
        return self._apply_to_all_components

    @apply_to_all_components.setter
    def apply_to_all_components(self, apply_to_all_components):
        """Sets the apply_to_all_components of this ApiWaiverOptionsDTO.


        :param apply_to_all_components: The apply_to_all_components of this ApiWaiverOptionsDTO.  # noqa: E501
        :type: bool
        """

        self._apply_to_all_components = apply_to_all_components

    @property
    def matcher_strategy(self):
        """Gets the matcher_strategy of this ApiWaiverOptionsDTO.  # noqa: E501


        :return: The matcher_strategy of this ApiWaiverOptionsDTO.  # noqa: E501
        :rtype: str
        """
        return self._matcher_strategy

    @matcher_strategy.setter
    def matcher_strategy(self, matcher_strategy):
        """Sets the matcher_strategy of this ApiWaiverOptionsDTO.


        :param matcher_strategy: The matcher_strategy of this ApiWaiverOptionsDTO.  # noqa: E501
        :type: str
        """
        allowed_values = [
            "DEFAULT",
            "EXACT_COMPONENT",
            "ALL_COMPONENTS",
            "ALL_VERSIONS",
        ]  # noqa: E501
        if matcher_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `matcher_strategy` ({0}), must be one of {1}".format(  # noqa: E501
                    matcher_strategy, allowed_values
                )
            )

        self._matcher_strategy = matcher_strategy

    @property
    def expiry_time(self):
        """Gets the expiry_time of this ApiWaiverOptionsDTO.  # noqa: E501


        :return: The expiry_time of this ApiWaiverOptionsDTO.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """Sets the expiry_time of this ApiWaiverOptionsDTO.


        :param expiry_time: The expiry_time of this ApiWaiverOptionsDTO.  # noqa: E501
        :type: datetime
        """

        self._expiry_time = expiry_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ApiWaiverOptionsDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiWaiverOptionsDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
