# coding: utf-8

"""
    Sonatype Nexus IQ Server

    This documents the available APIs into [Sonatype Nexus IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management) (also knwon as Nexus Lifecycle).   # noqa: E501

    OpenAPI spec version: 156
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from nexus_iq_sdk.api_client import ApiClient


class LicenseLegalMetadataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_attribution_report_template(self, id, **kwargs):  # noqa: E501
        """delete_attribution_report_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_attribution_report_template(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_attribution_report_template_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_attribution_report_template_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def delete_attribution_report_template_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """delete_attribution_report_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_attribution_report_template_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_attribution_report_template" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if "id" not in params or params["id"] is None:
            raise ValueError(
                "Missing the required parameter `id` when calling `delete_attribution_report_template`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["*/*"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/licenseLegalMetadata/report-template/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_all_attribution_report_templates(self, **kwargs):  # noqa: E501
        """get_all_attribution_report_templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_attribution_report_templates(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AttributionReportTemplateDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_all_attribution_report_templates_with_http_info(
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_all_attribution_report_templates_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def get_all_attribution_report_templates_with_http_info(
        self, **kwargs
    ):  # noqa: E501
        """get_all_attribution_report_templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_attribution_report_templates_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AttributionReportTemplateDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_attribution_report_templates" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/licenseLegalMetadata/report-template",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[AttributionReportTemplateDTO]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_attribution_report_template_by_id(self, id, **kwargs):  # noqa: E501
        """get_attribution_report_template_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_attribution_report_template_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: AttributionReportTemplateDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_attribution_report_template_by_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_attribution_report_template_by_id_with_http_info(
                id, **kwargs
            )  # noqa: E501
            return data

    def get_attribution_report_template_by_id_with_http_info(
        self, id, **kwargs
    ):  # noqa: E501
        """get_attribution_report_template_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_attribution_report_template_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: AttributionReportTemplateDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_attribution_report_template_by_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if "id" not in params or params["id"] is None:
            raise ValueError(
                "Missing the required parameter `id` when calling `get_attribution_report_template_by_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/licenseLegalMetadata/report-template/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AttributionReportTemplateDTO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_license_legal_application_html_report(
        self, application_id, stage_id, **kwargs
    ):  # noqa: E501
        """get_license_legal_application_html_report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_license_legal_application_html_report(application_id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: (required)
        :param str stage_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_license_legal_application_html_report_with_http_info(
                application_id, stage_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_license_legal_application_html_report_with_http_info(
                application_id, stage_id, **kwargs
            )  # noqa: E501
            return data

    def get_license_legal_application_html_report_with_http_info(
        self, application_id, stage_id, **kwargs
    ):  # noqa: E501
        """get_license_legal_application_html_report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_license_legal_application_html_report_with_http_info(application_id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: (required)
        :param str stage_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["application_id", "stage_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_license_legal_application_html_report" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'application_id' is set
        if "application_id" not in params or params["application_id"] is None:
            raise ValueError(
                "Missing the required parameter `application_id` when calling `get_license_legal_application_html_report`"
            )  # noqa: E501
        # verify the required parameter 'stage_id' is set
        if "stage_id" not in params or params["stage_id"] is None:
            raise ValueError(
                "Missing the required parameter `stage_id` when calling `get_license_legal_application_html_report`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "application_id" in params:
            path_params["applicationId"] = params["application_id"]  # noqa: E501
        if "stage_id" in params:
            path_params["stageId"] = params["stage_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/html"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/licenseLegalMetadata/application/{applicationId}/stage/{stageId}/report",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_license_legal_application_report(
        self, application_id, **kwargs
    ):  # noqa: E501
        """get_license_legal_application_report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_license_legal_application_report(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: (required)
        :return: ApiLicenseLegalApplicationReportDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_license_legal_application_report_with_http_info(
                application_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_license_legal_application_report_with_http_info(
                application_id, **kwargs
            )  # noqa: E501
            return data

    def get_license_legal_application_report_with_http_info(
        self, application_id, **kwargs
    ):  # noqa: E501
        """get_license_legal_application_report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_license_legal_application_report_with_http_info(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: (required)
        :return: ApiLicenseLegalApplicationReportDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["application_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_license_legal_application_report" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'application_id' is set
        if "application_id" not in params or params["application_id"] is None:
            raise ValueError(
                "Missing the required parameter `application_id` when calling `get_license_legal_application_report`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "application_id" in params:
            path_params["applicationId"] = params["application_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/licenseLegalMetadata/application/{applicationId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ApiLicenseLegalApplicationReportDTO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_license_legal_application_report1(
        self, application_id, stage_id, **kwargs
    ):  # noqa: E501
        """get_license_legal_application_report1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_license_legal_application_report1(application_id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: (required)
        :param str stage_id: (required)
        :return: ApiLicenseLegalApplicationReportDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_license_legal_application_report1_with_http_info(
                application_id, stage_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_license_legal_application_report1_with_http_info(
                application_id, stage_id, **kwargs
            )  # noqa: E501
            return data

    def get_license_legal_application_report1_with_http_info(
        self, application_id, stage_id, **kwargs
    ):  # noqa: E501
        """get_license_legal_application_report1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_license_legal_application_report1_with_http_info(application_id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: (required)
        :param str stage_id: (required)
        :return: ApiLicenseLegalApplicationReportDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["application_id", "stage_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_license_legal_application_report1" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'application_id' is set
        if "application_id" not in params or params["application_id"] is None:
            raise ValueError(
                "Missing the required parameter `application_id` when calling `get_license_legal_application_report1`"
            )  # noqa: E501
        # verify the required parameter 'stage_id' is set
        if "stage_id" not in params or params["stage_id"] is None:
            raise ValueError(
                "Missing the required parameter `stage_id` when calling `get_license_legal_application_report1`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "application_id" in params:
            path_params["applicationId"] = params["application_id"]  # noqa: E501
        if "stage_id" in params:
            path_params["stageId"] = params["stage_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/licenseLegalMetadata/application/{applicationId}/stage/{stageId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ApiLicenseLegalApplicationReportDTO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_license_legal_component_report(
        self, owner_type, owner_id, **kwargs
    ):  # noqa: E501
        """get_license_legal_component_report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_license_legal_component_report(owner_type, owner_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_type: (required)
        :param str owner_id: (required)
        :param ComponentIdentifier component_identifier:
        :param str package_url:
        :param str hash:
        :param str identification_source:
        :param str scan_id:
        :return: ApiLicenseLegalComponentReportDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_license_legal_component_report_with_http_info(
                owner_type, owner_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_license_legal_component_report_with_http_info(
                owner_type, owner_id, **kwargs
            )  # noqa: E501
            return data

    def get_license_legal_component_report_with_http_info(
        self, owner_type, owner_id, **kwargs
    ):  # noqa: E501
        """get_license_legal_component_report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_license_legal_component_report_with_http_info(owner_type, owner_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_type: (required)
        :param str owner_id: (required)
        :param ComponentIdentifier component_identifier:
        :param str package_url:
        :param str hash:
        :param str identification_source:
        :param str scan_id:
        :return: ApiLicenseLegalComponentReportDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "owner_type",
            "owner_id",
            "component_identifier",
            "package_url",
            "hash",
            "identification_source",
            "scan_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_license_legal_component_report" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'owner_type' is set
        if "owner_type" not in params or params["owner_type"] is None:
            raise ValueError(
                "Missing the required parameter `owner_type` when calling `get_license_legal_component_report`"
            )  # noqa: E501
        # verify the required parameter 'owner_id' is set
        if "owner_id" not in params or params["owner_id"] is None:
            raise ValueError(
                "Missing the required parameter `owner_id` when calling `get_license_legal_component_report`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "owner_type" in params:
            path_params["ownerType"] = params["owner_type"]  # noqa: E501
        if "owner_id" in params:
            path_params["ownerId"] = params["owner_id"]  # noqa: E501

        query_params = []
        if "component_identifier" in params:
            query_params.append(
                ("componentIdentifier", params["component_identifier"])
            )  # noqa: E501
        if "package_url" in params:
            query_params.append(("packageUrl", params["package_url"]))  # noqa: E501
        if "hash" in params:
            query_params.append(("hash", params["hash"]))  # noqa: E501
        if "identification_source" in params:
            query_params.append(
                ("identificationSource", params["identification_source"])
            )  # noqa: E501
        if "scan_id" in params:
            query_params.append(("scanId", params["scan_id"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/licenseLegalMetadata/{ownerType}/{ownerId}/component",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ApiLicenseLegalComponentReportDTO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_license_legal_custom_application_html_report(
        self, application_id, stage_id, **kwargs
    ):  # noqa: E501
        """get_license_legal_custom_application_html_report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_license_legal_custom_application_html_report(application_id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: (required)
        :param str stage_id: (required)
        :param FormDataMultiPart body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_license_legal_custom_application_html_report_with_http_info(
                application_id, stage_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_license_legal_custom_application_html_report_with_http_info(
                application_id, stage_id, **kwargs
            )  # noqa: E501
            return data

    def get_license_legal_custom_application_html_report_with_http_info(
        self, application_id, stage_id, **kwargs
    ):  # noqa: E501
        """get_license_legal_custom_application_html_report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_license_legal_custom_application_html_report_with_http_info(application_id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: (required)
        :param str stage_id: (required)
        :param FormDataMultiPart body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["application_id", "stage_id", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_license_legal_custom_application_html_report" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'application_id' is set
        if "application_id" not in params or params["application_id"] is None:
            raise ValueError(
                "Missing the required parameter `application_id` when calling `get_license_legal_custom_application_html_report`"
            )  # noqa: E501
        # verify the required parameter 'stage_id' is set
        if "stage_id" not in params or params["stage_id"] is None:
            raise ValueError(
                "Missing the required parameter `stage_id` when calling `get_license_legal_custom_application_html_report`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "application_id" in params:
            path_params["applicationId"] = params["application_id"]  # noqa: E501
        if "stage_id" in params:
            path_params["stageId"] = params["stage_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/html"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["*/*"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/licenseLegalMetadata/application/{applicationId}/stage/{stageId}/report",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_license_legal_custom_application_html_report1(
        self, application_id, stage_id, template_id, **kwargs
    ):  # noqa: E501
        """get_license_legal_custom_application_html_report1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_license_legal_custom_application_html_report1(application_id, stage_id, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: (required)
        :param str stage_id: (required)
        :param str template_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return (
                self.get_license_legal_custom_application_html_report1_with_http_info(
                    application_id, stage_id, template_id, **kwargs
                )
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_license_legal_custom_application_html_report1_with_http_info(
                application_id, stage_id, template_id, **kwargs
            )  # noqa: E501
            return data

    def get_license_legal_custom_application_html_report1_with_http_info(
        self, application_id, stage_id, template_id, **kwargs
    ):  # noqa: E501
        """get_license_legal_custom_application_html_report1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_license_legal_custom_application_html_report1_with_http_info(application_id, stage_id, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: (required)
        :param str stage_id: (required)
        :param str template_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["application_id", "stage_id", "template_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_license_legal_custom_application_html_report1" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'application_id' is set
        if "application_id" not in params or params["application_id"] is None:
            raise ValueError(
                "Missing the required parameter `application_id` when calling `get_license_legal_custom_application_html_report1`"
            )  # noqa: E501
        # verify the required parameter 'stage_id' is set
        if "stage_id" not in params or params["stage_id"] is None:
            raise ValueError(
                "Missing the required parameter `stage_id` when calling `get_license_legal_custom_application_html_report1`"
            )  # noqa: E501
        # verify the required parameter 'template_id' is set
        if "template_id" not in params or params["template_id"] is None:
            raise ValueError(
                "Missing the required parameter `template_id` when calling `get_license_legal_custom_application_html_report1`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "application_id" in params:
            path_params["applicationId"] = params["application_id"]  # noqa: E501
        if "stage_id" in params:
            path_params["stageId"] = params["stage_id"]  # noqa: E501
        if "template_id" in params:
            path_params["templateId"] = params["template_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/html"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/licenseLegalMetadata/application/{applicationId}/stage/{stageId}/report/templateId/{templateId}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_license_legal_custom_multi_application_html_report1(
        self, template_id, **kwargs
    ):  # noqa: E501
        """get_license_legal_custom_multi_application_html_report1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_license_legal_custom_multi_application_html_report1(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_license_legal_custom_multi_application_html_report1_with_http_info(
                template_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_license_legal_custom_multi_application_html_report1_with_http_info(
                template_id, **kwargs
            )  # noqa: E501
            return data

    def get_license_legal_custom_multi_application_html_report1_with_http_info(
        self, template_id, **kwargs
    ):  # noqa: E501
        """get_license_legal_custom_multi_application_html_report1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_license_legal_custom_multi_application_html_report1_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["template_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_license_legal_custom_multi_application_html_report1"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'template_id' is set
        if "template_id" not in params or params["template_id"] is None:
            raise ValueError(
                "Missing the required parameter `template_id` when calling `get_license_legal_custom_multi_application_html_report1`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "template_id" in params:
            path_params["templateId"] = params["template_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/html"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/licenseLegalMetadata/multiApplication/report/templateId/{templateId}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_license_legal_multi_application_html_report(self, **kwargs):  # noqa: E501
        """get_license_legal_multi_application_html_report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_license_legal_multi_application_html_report(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_license_legal_multi_application_html_report_with_http_info(
                **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_license_legal_multi_application_html_report_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def get_license_legal_multi_application_html_report_with_http_info(
        self, **kwargs
    ):  # noqa: E501
        """get_license_legal_multi_application_html_report  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_license_legal_multi_application_html_report_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_license_legal_multi_application_html_report" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/html"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/licenseLegalMetadata/multiApplication/report",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_license_legal_multi_application_report_from_active_user_filter(
        self, template_id, **kwargs
    ):  # noqa: E501
        """get_license_legal_multi_application_report_from_active_user_filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_license_legal_multi_application_report_from_active_user_filter(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_license_legal_multi_application_report_from_active_user_filter_with_http_info(
                template_id, **kwargs
            )  # noqa: E501
        else:
            (
                data
            ) = self.get_license_legal_multi_application_report_from_active_user_filter_with_http_info(
                template_id, **kwargs
            )  # noqa: E501
            return data

    def get_license_legal_multi_application_report_from_active_user_filter_with_http_info(
        self, template_id, **kwargs
    ):  # noqa: E501
        """get_license_legal_multi_application_report_from_active_user_filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_license_legal_multi_application_report_from_active_user_filter_with_http_info(template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["template_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_license_legal_multi_application_report_from_active_user_filter"
                    % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'template_id' is set
        if "template_id" not in params or params["template_id"] is None:
            raise ValueError(
                "Missing the required parameter `template_id` when calling `get_license_legal_multi_application_report_from_active_user_filter`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "template_id" in params:
            path_params["templateId"] = params["template_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["text/html"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/licenseLegalMetadata/multiApplication/activeUserFilter/report/templateId/{templateId}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="str",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def save_attribution_report_template(self, **kwargs):  # noqa: E501
        """save_attribution_report_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_attribution_report_template(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttributionReportTemplateDTO body:
        :return: AttributionReportTemplateDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.save_attribution_report_template_with_http_info(
                **kwargs
            )  # noqa: E501
        else:
            (data) = self.save_attribution_report_template_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def save_attribution_report_template_with_http_info(self, **kwargs):  # noqa: E501
        """save_attribution_report_template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_attribution_report_template_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AttributionReportTemplateDTO body:
        :return: AttributionReportTemplateDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_attribution_report_template" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/licenseLegalMetadata/report-template",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="AttributionReportTemplateDTO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
