# coding: utf-8

"""
    Sonatype Nexus IQ Server

    This documents the available APIs into [Sonatype Nexus IQ Server](https://www.sonatype.com/products/open-source-security-dependency-management) (also knwon as Nexus Lifecycle).   # noqa: E501

    OpenAPI spec version: 156
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from nexus_iq_sdk.api_client import ApiClient


class ApplicationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_application(self, **kwargs):  # noqa: E501
        """add_application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_application(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiApplicationDTO body:
        :return: ApiApplicationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.add_application_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_application_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_application_with_http_info(self, **kwargs):  # noqa: E501
        """add_application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_application_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiApplicationDTO body:
        :return: ApiApplicationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_application" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/applications",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ApiApplicationDTO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def clone_application(self, source_application_id, **kwargs):  # noqa: E501
        """clone_application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clone_application(source_application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_application_id: (required)
        :param str cloned_application_name:
        :param str cloned_application_public_id:
        :return: ApiApplicationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.clone_application_with_http_info(
                source_application_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.clone_application_with_http_info(
                source_application_id, **kwargs
            )  # noqa: E501
            return data

    def clone_application_with_http_info(
        self, source_application_id, **kwargs
    ):  # noqa: E501
        """clone_application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clone_application_with_http_info(source_application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_application_id: (required)
        :param str cloned_application_name:
        :param str cloned_application_public_id:
        :return: ApiApplicationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "source_application_id",
            "cloned_application_name",
            "cloned_application_public_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clone_application" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'source_application_id' is set
        if (
            "source_application_id" not in params
            or params["source_application_id"] is None
        ):
            raise ValueError(
                "Missing the required parameter `source_application_id` when calling `clone_application`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "source_application_id" in params:
            path_params["sourceApplicationId"] = params[
                "source_application_id"
            ]  # noqa: E501

        query_params = []
        if "cloned_application_name" in params:
            query_params.append(
                ("clonedApplicationName", params["cloned_application_name"])
            )  # noqa: E501
        if "cloned_application_public_id" in params:
            query_params.append(
                ("clonedApplicationPublicId", params["cloned_application_public_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/applications/{sourceApplicationId}/clone",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ApiApplicationDTO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_application(self, application_id, **kwargs):  # noqa: E501
        """delete_application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_application_with_http_info(
                application_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_application_with_http_info(
                application_id, **kwargs
            )  # noqa: E501
            return data

    def delete_application_with_http_info(self, application_id, **kwargs):  # noqa: E501
        """delete_application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_application_with_http_info(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["application_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_application" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'application_id' is set
        if "application_id" not in params or params["application_id"] is None:
            raise ValueError(
                "Missing the required parameter `application_id` when calling `delete_application`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "application_id" in params:
            path_params["applicationId"] = params["application_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["*/*"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/applications/{applicationId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_application(self, application_id, **kwargs):  # noqa: E501
        """get_application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: (required)
        :return: ApiApplicationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_application_with_http_info(
                application_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_application_with_http_info(
                application_id, **kwargs
            )  # noqa: E501
            return data

    def get_application_with_http_info(self, application_id, **kwargs):  # noqa: E501
        """get_application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_application_with_http_info(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: (required)
        :return: ApiApplicationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["application_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'application_id' is set
        if "application_id" not in params or params["application_id"] is None:
            raise ValueError(
                "Missing the required parameter `application_id` when calling `get_application`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "application_id" in params:
            path_params["applicationId"] = params["application_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/applications/{applicationId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ApiApplicationDTO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_applications(self, **kwargs):  # noqa: E501
        """get_applications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_applications(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] public_id:
        :param bool include_categories:
        :return: list[ApiApplicationDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_applications_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_applications_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_applications_with_http_info(self, **kwargs):  # noqa: E501
        """get_applications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_applications_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] public_id:
        :param bool include_categories:
        :return: list[ApiApplicationDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["public_id", "include_categories"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_applications" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "public_id" in params:
            query_params.append(("publicId", params["public_id"]))  # noqa: E501
            collection_formats["publicId"] = "multi"  # noqa: E501
        if "include_categories" in params:
            query_params.append(
                ("includeCategories", params["include_categories"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/applications",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[ApiApplicationDTO]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_applications_by_organization_id(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """get_applications_by_organization_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_applications_by_organization_id(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: (required)
        :return: ApiApplicationListDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_applications_by_organization_id_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_applications_by_organization_id_with_http_info(
                organization_id, **kwargs
            )  # noqa: E501
            return data

    def get_applications_by_organization_id_with_http_info(
        self, organization_id, **kwargs
    ):  # noqa: E501
        """get_applications_by_organization_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_applications_by_organization_id_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: (required)
        :return: ApiApplicationListDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_applications_by_organization_id" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'organization_id' is set
        if "organization_id" not in params or params["organization_id"] is None:
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `get_applications_by_organization_id`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "organization_id" in params:
            path_params["organizationId"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/applications/organization/{organizationId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ApiApplicationListDTO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_data(self, application_public_id, scan_id, **kwargs):  # noqa: E501
        """get_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data(application_public_id, scan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_public_id: (required)
        :param str scan_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_data_with_http_info(
                application_public_id, scan_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_data_with_http_info(
                application_public_id, scan_id, **kwargs
            )  # noqa: E501
            return data

    def get_data_with_http_info(
        self, application_public_id, scan_id, **kwargs
    ):  # noqa: E501
        """get_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data_with_http_info(application_public_id, scan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_public_id: (required)
        :param str scan_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["application_public_id", "scan_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_data" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'application_public_id' is set
        if (
            "application_public_id" not in params
            or params["application_public_id"] is None
        ):
            raise ValueError(
                "Missing the required parameter `application_public_id` when calling `get_data`"
            )  # noqa: E501
        # verify the required parameter 'scan_id' is set
        if "scan_id" not in params or params["scan_id"] is None:
            raise ValueError(
                "Missing the required parameter `scan_id` when calling `get_data`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "application_public_id" in params:
            path_params["applicationPublicId"] = params[
                "application_public_id"
            ]  # noqa: E501
        if "scan_id" in params:
            path_params["scanId"] = params["scan_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["*/*"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/applications/{applicationPublicId}/reports/{scanId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_dependency_tree(
        self, application_public_id, scan_id, **kwargs
    ):  # noqa: E501
        """get_dependency_tree  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dependency_tree(application_public_id, scan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_public_id: (required)
        :param str scan_id: (required)
        :return: ApiDependencyTreeResponseDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_dependency_tree_with_http_info(
                application_public_id, scan_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_dependency_tree_with_http_info(
                application_public_id, scan_id, **kwargs
            )  # noqa: E501
            return data

    def get_dependency_tree_with_http_info(
        self, application_public_id, scan_id, **kwargs
    ):  # noqa: E501
        """get_dependency_tree  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dependency_tree_with_http_info(application_public_id, scan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_public_id: (required)
        :param str scan_id: (required)
        :return: ApiDependencyTreeResponseDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["application_public_id", "scan_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dependency_tree" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'application_public_id' is set
        if (
            "application_public_id" not in params
            or params["application_public_id"] is None
        ):
            raise ValueError(
                "Missing the required parameter `application_public_id` when calling `get_dependency_tree`"
            )  # noqa: E501
        # verify the required parameter 'scan_id' is set
        if "scan_id" not in params or params["scan_id"] is None:
            raise ValueError(
                "Missing the required parameter `scan_id` when calling `get_dependency_tree`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "application_public_id" in params:
            path_params["applicationPublicId"] = params[
                "application_public_id"
            ]  # noqa: E501
        if "scan_id" in params:
            path_params["scanId"] = params["scan_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/applications/{applicationPublicId}/reports/{scanId}/dependencyTree",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ApiDependencyTreeResponseDTO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_policy_violation_diff(self, application_public_id, **kwargs):  # noqa: E501
        """get_policy_violation_diff  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_policy_violation_diff(application_public_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_public_id: (required)
        :param str from_commit:
        :param str to_commit:
        :param str from_policy_evaluation_id:
        :param str to_policy_evaluation_id:
        :return: ApiPolicyViolationDiffDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_policy_violation_diff_with_http_info(
                application_public_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_policy_violation_diff_with_http_info(
                application_public_id, **kwargs
            )  # noqa: E501
            return data

    def get_policy_violation_diff_with_http_info(
        self, application_public_id, **kwargs
    ):  # noqa: E501
        """get_policy_violation_diff  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_policy_violation_diff_with_http_info(application_public_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_public_id: (required)
        :param str from_commit:
        :param str to_commit:
        :param str from_policy_evaluation_id:
        :param str to_policy_evaluation_id:
        :return: ApiPolicyViolationDiffDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "application_public_id",
            "from_commit",
            "to_commit",
            "from_policy_evaluation_id",
            "to_policy_evaluation_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy_violation_diff" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'application_public_id' is set
        if (
            "application_public_id" not in params
            or params["application_public_id"] is None
        ):
            raise ValueError(
                "Missing the required parameter `application_public_id` when calling `get_policy_violation_diff`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "application_public_id" in params:
            path_params["applicationPublicId"] = params[
                "application_public_id"
            ]  # noqa: E501

        query_params = []
        if "from_commit" in params:
            query_params.append(("fromCommit", params["from_commit"]))  # noqa: E501
        if "to_commit" in params:
            query_params.append(("toCommit", params["to_commit"]))  # noqa: E501
        if "from_policy_evaluation_id" in params:
            query_params.append(
                ("fromPolicyEvaluationId", params["from_policy_evaluation_id"])
            )  # noqa: E501
        if "to_policy_evaluation_id" in params:
            query_params.append(
                ("toPolicyEvaluationId", params["to_policy_evaluation_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/applications/{applicationPublicId}/reports/policyViolations/diff",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ApiPolicyViolationDiffDTO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_policy_violations1(
        self, application_public_id, scan_id, **kwargs
    ):  # noqa: E501
        """get_policy_violations1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_policy_violations1(application_public_id, scan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_public_id: (required)
        :param str scan_id: (required)
        :return: ApiReportPolicyDataDTOV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_policy_violations1_with_http_info(
                application_public_id, scan_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_policy_violations1_with_http_info(
                application_public_id, scan_id, **kwargs
            )  # noqa: E501
            return data

    def get_policy_violations1_with_http_info(
        self, application_public_id, scan_id, **kwargs
    ):  # noqa: E501
        """get_policy_violations1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_policy_violations1_with_http_info(application_public_id, scan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_public_id: (required)
        :param str scan_id: (required)
        :return: ApiReportPolicyDataDTOV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["application_public_id", "scan_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy_violations1" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'application_public_id' is set
        if (
            "application_public_id" not in params
            or params["application_public_id"] is None
        ):
            raise ValueError(
                "Missing the required parameter `application_public_id` when calling `get_policy_violations1`"
            )  # noqa: E501
        # verify the required parameter 'scan_id' is set
        if "scan_id" not in params or params["scan_id"] is None:
            raise ValueError(
                "Missing the required parameter `scan_id` when calling `get_policy_violations1`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "application_public_id" in params:
            path_params["applicationPublicId"] = params[
                "application_public_id"
            ]  # noqa: E501
        if "scan_id" in params:
            path_params["scanId"] = params["scan_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/applications/{applicationPublicId}/reports/{scanId}/policy",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ApiReportPolicyDataDTOV2",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_raw_data(self, application_public_id, scan_id, **kwargs):  # noqa: E501
        """get_raw_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_raw_data(application_public_id, scan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_public_id: (required)
        :param str scan_id: (required)
        :return: ApiReportRawDataDTOV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_raw_data_with_http_info(
                application_public_id, scan_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_raw_data_with_http_info(
                application_public_id, scan_id, **kwargs
            )  # noqa: E501
            return data

    def get_raw_data_with_http_info(
        self, application_public_id, scan_id, **kwargs
    ):  # noqa: E501
        """get_raw_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_raw_data_with_http_info(application_public_id, scan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_public_id: (required)
        :param str scan_id: (required)
        :return: ApiReportRawDataDTOV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["application_public_id", "scan_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_raw_data" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'application_public_id' is set
        if (
            "application_public_id" not in params
            or params["application_public_id"] is None
        ):
            raise ValueError(
                "Missing the required parameter `application_public_id` when calling `get_raw_data`"
            )  # noqa: E501
        # verify the required parameter 'scan_id' is set
        if "scan_id" not in params or params["scan_id"] is None:
            raise ValueError(
                "Missing the required parameter `scan_id` when calling `get_raw_data`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "application_public_id" in params:
            path_params["applicationPublicId"] = params[
                "application_public_id"
            ]  # noqa: E501
        if "scan_id" in params:
            path_params["scanId"] = params["scan_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/applications/{applicationPublicId}/reports/{scanId}/raw",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ApiReportRawDataDTOV2",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def move_application(self, application_id, organization_id, **kwargs):  # noqa: E501
        """move_application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_application(application_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: (required)
        :param str organization_id: (required)
        :return: ApiMoveApplicationResponseDTOV2
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.move_application_with_http_info(
                application_id, organization_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.move_application_with_http_info(
                application_id, organization_id, **kwargs
            )  # noqa: E501
            return data

    def move_application_with_http_info(
        self, application_id, organization_id, **kwargs
    ):  # noqa: E501
        """move_application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_application_with_http_info(application_id, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: (required)
        :param str organization_id: (required)
        :return: ApiMoveApplicationResponseDTOV2
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["application_id", "organization_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method move_application" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'application_id' is set
        if "application_id" not in params or params["application_id"] is None:
            raise ValueError(
                "Missing the required parameter `application_id` when calling `move_application`"
            )  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if "organization_id" not in params or params["organization_id"] is None:
            raise ValueError(
                "Missing the required parameter `organization_id` when calling `move_application`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "application_id" in params:
            path_params["applicationId"] = params["application_id"]  # noqa: E501
        if "organization_id" in params:
            path_params["organizationId"] = params["organization_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/applications/{applicationId}/move/organization/{organizationId}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ApiMoveApplicationResponseDTOV2",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_application(self, application_id, **kwargs):  # noqa: E501
        """update_application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: (required)
        :param ApiApplicationDTO body:
        :return: ApiApplicationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_application_with_http_info(
                application_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_application_with_http_info(
                application_id, **kwargs
            )  # noqa: E501
            return data

    def update_application_with_http_info(self, application_id, **kwargs):  # noqa: E501
        """update_application  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_application_with_http_info(application_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application_id: (required)
        :param ApiApplicationDTO body:
        :return: ApiApplicationDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["application_id", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_application" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'application_id' is set
        if "application_id" not in params or params["application_id"] is None:
            raise ValueError(
                "Missing the required parameter `application_id` when calling `update_application`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "application_id" in params:
            path_params["applicationId"] = params["application_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/applications/{applicationId}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ApiApplicationDTO",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
