# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import pulsestreamer.grpc.pulse_streamer_pb2 as pulse__streamer__pb2


class PulseStreamerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.reset = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/reset',
                request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
                )
        self.reboot = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/reboot',
                request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
                )
        self.constant = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/constant',
                request_serializer=pulse__streamer__pb2.PulseMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
                )
        self.forceFinal = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/forceFinal',
                request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
                )
        self.stream = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/stream',
                request_serializer=pulse__streamer__pb2.SequenceMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
                )
        self.startNow = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/startNow',
                request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
                )
        self.setTrigger = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/setTrigger',
                request_serializer=pulse__streamer__pb2.TriggerMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
                )
        self.getTriggerStart = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/getTriggerStart',
                request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
                )
        self.getTriggerRearm = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/getTriggerRearm',
                request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
                )
        self.rearm = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/rearm',
                request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
                )
        self.selectClock = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/selectClock',
                request_serializer=pulse__streamer__pb2.ClockMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
                )
        self.getClock = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/getClock',
                request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
                )
        self.setClkParam = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/setClkParam',
                request_serializer=pulse__streamer__pb2.DrpClkSetMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
                )
        self.isStreaming = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/isStreaming',
                request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
                )
        self.hasSequence = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/hasSequence',
                request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
                )
        self.hasFinished = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/hasFinished',
                request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
                )
        self.getFirmwareVersion = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/getFirmwareVersion',
                request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerStringReply.FromString,
                )
        self.getSerial = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/getSerial',
                request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerStringReply.FromString,
                )
        self.getFPGAID = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/getFPGAID',
                request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerStringReply.FromString,
                )
        self.flash_lic = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/flash_lic',
                request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerStringReply.FromString,
                )
        self.setNetworkConfiguration = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/setNetworkConfiguration',
                request_serializer=pulse__streamer__pb2.SetNetworkMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
                )
        self.getNetworkConfiguration = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/getNetworkConfiguration',
                request_serializer=pulse__streamer__pb2.GetNetworkMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.GetNetworkReply.FromString,
                )
        self.applyNetworkConfiguration = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/applyNetworkConfiguration',
                request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
                )
        self.setHostname = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/setHostname',
                request_serializer=pulse__streamer__pb2.HostnameMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerIntReply.FromString,
                )
        self.getHostname = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/getHostname',
                request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerStringReply.FromString,
                )
        self.getTemperature = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/getTemperature',
                request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerStringReply.FromString,
                )
        self.getUnderflow = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/getUnderflow',
                request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
                )
        self.getStatusRegister = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/getStatusRegister',
                request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
                )
        self.setDebugRegister = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/setDebugRegister',
                request_serializer=pulse__streamer__pb2.RegisterMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
                )
        self.setAnalogCalibration = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/setAnalogCalibration',
                request_serializer=pulse__streamer__pb2.AnalogCalibrationData.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
                )
        self.getAnalogCalibration = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/getAnalogCalibration',
                request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.AnalogCalibrationData.FromString,
                )
        self.getHardwareVersion = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/getHardwareVersion',
                request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerStringReply.FromString,
                )
        self.getSupplyState = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/getSupplyState',
                request_serializer=pulse__streamer__pb2.VoidMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.SupplyStatusData.FromString,
                )
        self.setSquareWave125MHz = channel.unary_unary(
                '/pulse_streamer.PulseStreamer/setSquareWave125MHz',
                request_serializer=pulse__streamer__pb2.SetSquareWaveMessage.SerializeToString,
                response_deserializer=pulse__streamer__pb2.PulseStreamerReply.FromString,
                )


class PulseStreamerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def reset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def reboot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def constant(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def forceFinal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startNow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTriggerStart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTriggerRearm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rearm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def selectClock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getClock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setClkParam(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isStreaming(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hasSequence(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def hasFinished(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFirmwareVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSerial(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getFPGAID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def flash_lic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setNetworkConfiguration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getNetworkConfiguration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def applyNetworkConfiguration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setHostname(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getHostname(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTemperature(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getUnderflow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getStatusRegister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setDebugRegister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setAnalogCalibration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAnalogCalibration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getHardwareVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSupplyState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setSquareWave125MHz(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PulseStreamerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'reset': grpc.unary_unary_rpc_method_handler(
                    servicer.reset,
                    request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
            ),
            'reboot': grpc.unary_unary_rpc_method_handler(
                    servicer.reboot,
                    request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
            ),
            'constant': grpc.unary_unary_rpc_method_handler(
                    servicer.constant,
                    request_deserializer=pulse__streamer__pb2.PulseMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
            ),
            'forceFinal': grpc.unary_unary_rpc_method_handler(
                    servicer.forceFinal,
                    request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
            ),
            'stream': grpc.unary_unary_rpc_method_handler(
                    servicer.stream,
                    request_deserializer=pulse__streamer__pb2.SequenceMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
            ),
            'startNow': grpc.unary_unary_rpc_method_handler(
                    servicer.startNow,
                    request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
            ),
            'setTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.setTrigger,
                    request_deserializer=pulse__streamer__pb2.TriggerMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
            ),
            'getTriggerStart': grpc.unary_unary_rpc_method_handler(
                    servicer.getTriggerStart,
                    request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
            ),
            'getTriggerRearm': grpc.unary_unary_rpc_method_handler(
                    servicer.getTriggerRearm,
                    request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
            ),
            'rearm': grpc.unary_unary_rpc_method_handler(
                    servicer.rearm,
                    request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
            ),
            'selectClock': grpc.unary_unary_rpc_method_handler(
                    servicer.selectClock,
                    request_deserializer=pulse__streamer__pb2.ClockMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
            ),
            'getClock': grpc.unary_unary_rpc_method_handler(
                    servicer.getClock,
                    request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
            ),
            'setClkParam': grpc.unary_unary_rpc_method_handler(
                    servicer.setClkParam,
                    request_deserializer=pulse__streamer__pb2.DrpClkSetMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
            ),
            'isStreaming': grpc.unary_unary_rpc_method_handler(
                    servicer.isStreaming,
                    request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
            ),
            'hasSequence': grpc.unary_unary_rpc_method_handler(
                    servicer.hasSequence,
                    request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
            ),
            'hasFinished': grpc.unary_unary_rpc_method_handler(
                    servicer.hasFinished,
                    request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
            ),
            'getFirmwareVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.getFirmwareVersion,
                    request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerStringReply.SerializeToString,
            ),
            'getSerial': grpc.unary_unary_rpc_method_handler(
                    servicer.getSerial,
                    request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerStringReply.SerializeToString,
            ),
            'getFPGAID': grpc.unary_unary_rpc_method_handler(
                    servicer.getFPGAID,
                    request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerStringReply.SerializeToString,
            ),
            'flash_lic': grpc.unary_unary_rpc_method_handler(
                    servicer.flash_lic,
                    request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerStringReply.SerializeToString,
            ),
            'setNetworkConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.setNetworkConfiguration,
                    request_deserializer=pulse__streamer__pb2.SetNetworkMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
            ),
            'getNetworkConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.getNetworkConfiguration,
                    request_deserializer=pulse__streamer__pb2.GetNetworkMessage.FromString,
                    response_serializer=pulse__streamer__pb2.GetNetworkReply.SerializeToString,
            ),
            'applyNetworkConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.applyNetworkConfiguration,
                    request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
            ),
            'setHostname': grpc.unary_unary_rpc_method_handler(
                    servicer.setHostname,
                    request_deserializer=pulse__streamer__pb2.HostnameMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerIntReply.SerializeToString,
            ),
            'getHostname': grpc.unary_unary_rpc_method_handler(
                    servicer.getHostname,
                    request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerStringReply.SerializeToString,
            ),
            'getTemperature': grpc.unary_unary_rpc_method_handler(
                    servicer.getTemperature,
                    request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerStringReply.SerializeToString,
            ),
            'getUnderflow': grpc.unary_unary_rpc_method_handler(
                    servicer.getUnderflow,
                    request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
            ),
            'getStatusRegister': grpc.unary_unary_rpc_method_handler(
                    servicer.getStatusRegister,
                    request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
            ),
            'setDebugRegister': grpc.unary_unary_rpc_method_handler(
                    servicer.setDebugRegister,
                    request_deserializer=pulse__streamer__pb2.RegisterMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
            ),
            'setAnalogCalibration': grpc.unary_unary_rpc_method_handler(
                    servicer.setAnalogCalibration,
                    request_deserializer=pulse__streamer__pb2.AnalogCalibrationData.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
            ),
            'getAnalogCalibration': grpc.unary_unary_rpc_method_handler(
                    servicer.getAnalogCalibration,
                    request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
                    response_serializer=pulse__streamer__pb2.AnalogCalibrationData.SerializeToString,
            ),
            'getHardwareVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.getHardwareVersion,
                    request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerStringReply.SerializeToString,
            ),
            'getSupplyState': grpc.unary_unary_rpc_method_handler(
                    servicer.getSupplyState,
                    request_deserializer=pulse__streamer__pb2.VoidMessage.FromString,
                    response_serializer=pulse__streamer__pb2.SupplyStatusData.SerializeToString,
            ),
            'setSquareWave125MHz': grpc.unary_unary_rpc_method_handler(
                    servicer.setSquareWave125MHz,
                    request_deserializer=pulse__streamer__pb2.SetSquareWaveMessage.FromString,
                    response_serializer=pulse__streamer__pb2.PulseStreamerReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pulse_streamer.PulseStreamer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PulseStreamer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/reset',
            pulse__streamer__pb2.VoidMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def reboot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/reboot',
            pulse__streamer__pb2.VoidMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def constant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/constant',
            pulse__streamer__pb2.PulseMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def forceFinal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/forceFinal',
            pulse__streamer__pb2.VoidMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/stream',
            pulse__streamer__pb2.SequenceMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startNow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/startNow',
            pulse__streamer__pb2.VoidMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/setTrigger',
            pulse__streamer__pb2.TriggerMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTriggerStart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/getTriggerStart',
            pulse__streamer__pb2.VoidMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTriggerRearm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/getTriggerRearm',
            pulse__streamer__pb2.VoidMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rearm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/rearm',
            pulse__streamer__pb2.VoidMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def selectClock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/selectClock',
            pulse__streamer__pb2.ClockMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getClock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/getClock',
            pulse__streamer__pb2.VoidMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setClkParam(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/setClkParam',
            pulse__streamer__pb2.DrpClkSetMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def isStreaming(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/isStreaming',
            pulse__streamer__pb2.VoidMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def hasSequence(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/hasSequence',
            pulse__streamer__pb2.VoidMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def hasFinished(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/hasFinished',
            pulse__streamer__pb2.VoidMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getFirmwareVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/getFirmwareVersion',
            pulse__streamer__pb2.VoidMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerStringReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSerial(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/getSerial',
            pulse__streamer__pb2.VoidMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerStringReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getFPGAID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/getFPGAID',
            pulse__streamer__pb2.VoidMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerStringReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def flash_lic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/flash_lic',
            pulse__streamer__pb2.VoidMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerStringReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setNetworkConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/setNetworkConfiguration',
            pulse__streamer__pb2.SetNetworkMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getNetworkConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/getNetworkConfiguration',
            pulse__streamer__pb2.GetNetworkMessage.SerializeToString,
            pulse__streamer__pb2.GetNetworkReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def applyNetworkConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/applyNetworkConfiguration',
            pulse__streamer__pb2.VoidMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setHostname(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/setHostname',
            pulse__streamer__pb2.HostnameMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerIntReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getHostname(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/getHostname',
            pulse__streamer__pb2.VoidMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerStringReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTemperature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/getTemperature',
            pulse__streamer__pb2.VoidMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerStringReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getUnderflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/getUnderflow',
            pulse__streamer__pb2.VoidMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getStatusRegister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/getStatusRegister',
            pulse__streamer__pb2.VoidMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setDebugRegister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/setDebugRegister',
            pulse__streamer__pb2.RegisterMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setAnalogCalibration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/setAnalogCalibration',
            pulse__streamer__pb2.AnalogCalibrationData.SerializeToString,
            pulse__streamer__pb2.PulseStreamerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAnalogCalibration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/getAnalogCalibration',
            pulse__streamer__pb2.VoidMessage.SerializeToString,
            pulse__streamer__pb2.AnalogCalibrationData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getHardwareVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/getHardwareVersion',
            pulse__streamer__pb2.VoidMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerStringReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSupplyState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/getSupplyState',
            pulse__streamer__pb2.VoidMessage.SerializeToString,
            pulse__streamer__pb2.SupplyStatusData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setSquareWave125MHz(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pulse_streamer.PulseStreamer/setSquareWave125MHz',
            pulse__streamer__pb2.SetSquareWaveMessage.SerializeToString,
            pulse__streamer__pb2.PulseStreamerReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
