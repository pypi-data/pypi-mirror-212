# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetAstraDatabasesResult',
    'AwaitableGetAstraDatabasesResult',
    'get_astra_databases',
    'get_astra_databases_output',
]

@pulumi.output_type
class GetAstraDatabasesResult:
    """
    A collection of values returned by getAstraDatabases.
    """
    def __init__(__self__, cloud_provider=None, id=None, results=None, status=None):
        if cloud_provider and not isinstance(cloud_provider, str):
            raise TypeError("Expected argument 'cloud_provider' to be a str")
        pulumi.set(__self__, "cloud_provider", cloud_provider)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        pulumi.set(__self__, "results", results)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[str]:
        """
        The cloud provider
        """
        return pulumi.get(self, "cloud_provider")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def results(self) -> Sequence['outputs.GetAstraDatabasesResultResult']:
        """
        The list of Astra databases that match the search criteria.
        """
        return pulumi.get(self, "results")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Status flter. Only return databases with matching status, if supplied. Otherwise return all databases matching other requirements
        """
        return pulumi.get(self, "status")


class AwaitableGetAstraDatabasesResult(GetAstraDatabasesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAstraDatabasesResult(
            cloud_provider=self.cloud_provider,
            id=self.id,
            results=self.results,
            status=self.status)


def get_astra_databases(cloud_provider: Optional[str] = None,
                        status: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAstraDatabasesResult:
    """
    `get_astra_databases` provides a datasource for a list of Astra databases. This can be used to select databases within your Astra Organization.


    :param str cloud_provider: The cloud provider
    :param str status: Status flter. Only return databases with matching status, if supplied. Otherwise return all databases matching other requirements
    """
    __args__ = dict()
    __args__['cloudProvider'] = cloud_provider
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('astra:index/getAstraDatabases:getAstraDatabases', __args__, opts=opts, typ=GetAstraDatabasesResult).value

    return AwaitableGetAstraDatabasesResult(
        cloud_provider=__ret__.cloud_provider,
        id=__ret__.id,
        results=__ret__.results,
        status=__ret__.status)


@_utilities.lift_output_func(get_astra_databases)
def get_astra_databases_output(cloud_provider: Optional[pulumi.Input[Optional[str]]] = None,
                               status: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAstraDatabasesResult]:
    """
    `get_astra_databases` provides a datasource for a list of Astra databases. This can be used to select databases within your Astra Organization.


    :param str cloud_provider: The cloud provider
    :param str status: Status flter. Only return databases with matching status, if supplied. Otherwise return all databases matching other requirements
    """
    ...
