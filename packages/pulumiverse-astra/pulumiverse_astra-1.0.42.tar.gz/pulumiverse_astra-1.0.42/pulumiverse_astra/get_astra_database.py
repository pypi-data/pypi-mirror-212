# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAstraDatabaseResult',
    'AwaitableGetAstraDatabaseResult',
    'get_astra_database',
    'get_astra_database_output',
]

@pulumi.output_type
class GetAstraDatabaseResult:
    """
    A collection of values returned by getAstraDatabase.
    """
    def __init__(__self__, additional_keyspaces=None, cloud_provider=None, cqlsh_url=None, data_endpoint_url=None, database_id=None, datacenters=None, grafana_url=None, graphql_url=None, id=None, keyspace=None, name=None, node_count=None, organization_id=None, owner_id=None, regions=None, replication_factor=None, status=None, total_storage=None):
        if additional_keyspaces and not isinstance(additional_keyspaces, list):
            raise TypeError("Expected argument 'additional_keyspaces' to be a list")
        pulumi.set(__self__, "additional_keyspaces", additional_keyspaces)
        if cloud_provider and not isinstance(cloud_provider, str):
            raise TypeError("Expected argument 'cloud_provider' to be a str")
        pulumi.set(__self__, "cloud_provider", cloud_provider)
        if cqlsh_url and not isinstance(cqlsh_url, str):
            raise TypeError("Expected argument 'cqlsh_url' to be a str")
        pulumi.set(__self__, "cqlsh_url", cqlsh_url)
        if data_endpoint_url and not isinstance(data_endpoint_url, str):
            raise TypeError("Expected argument 'data_endpoint_url' to be a str")
        pulumi.set(__self__, "data_endpoint_url", data_endpoint_url)
        if database_id and not isinstance(database_id, str):
            raise TypeError("Expected argument 'database_id' to be a str")
        pulumi.set(__self__, "database_id", database_id)
        if datacenters and not isinstance(datacenters, dict):
            raise TypeError("Expected argument 'datacenters' to be a dict")
        pulumi.set(__self__, "datacenters", datacenters)
        if grafana_url and not isinstance(grafana_url, str):
            raise TypeError("Expected argument 'grafana_url' to be a str")
        pulumi.set(__self__, "grafana_url", grafana_url)
        if graphql_url and not isinstance(graphql_url, str):
            raise TypeError("Expected argument 'graphql_url' to be a str")
        pulumi.set(__self__, "graphql_url", graphql_url)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if keyspace and not isinstance(keyspace, str):
            raise TypeError("Expected argument 'keyspace' to be a str")
        pulumi.set(__self__, "keyspace", keyspace)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if node_count and not isinstance(node_count, int):
            raise TypeError("Expected argument 'node_count' to be a int")
        pulumi.set(__self__, "node_count", node_count)
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        pulumi.set(__self__, "organization_id", organization_id)
        if owner_id and not isinstance(owner_id, str):
            raise TypeError("Expected argument 'owner_id' to be a str")
        pulumi.set(__self__, "owner_id", owner_id)
        if regions and not isinstance(regions, list):
            raise TypeError("Expected argument 'regions' to be a list")
        pulumi.set(__self__, "regions", regions)
        if replication_factor and not isinstance(replication_factor, int):
            raise TypeError("Expected argument 'replication_factor' to be a int")
        pulumi.set(__self__, "replication_factor", replication_factor)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if total_storage and not isinstance(total_storage, int):
            raise TypeError("Expected argument 'total_storage' to be a int")
        pulumi.set(__self__, "total_storage", total_storage)

    @property
    @pulumi.getter(name="additionalKeyspaces")
    def additional_keyspaces(self) -> Sequence[str]:
        """
        Additional keyspaces
        """
        return pulumi.get(self, "additional_keyspaces")

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> str:
        """
        Cloud provider (AWS, GCP, AZURE)
        """
        return pulumi.get(self, "cloud_provider")

    @property
    @pulumi.getter(name="cqlshUrl")
    def cqlsh_url(self) -> str:
        """
        URL for cqlsh web
        """
        return pulumi.get(self, "cqlsh_url")

    @property
    @pulumi.getter(name="dataEndpointUrl")
    def data_endpoint_url(self) -> str:
        """
        REST API URL
        """
        return pulumi.get(self, "data_endpoint_url")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> str:
        """
        Astra Database ID (system generated)
        """
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter
    def datacenters(self) -> Mapping[str, str]:
        """
        Map of Datacenter IDs. The map key is "cloud_provider.region". Example: "GCP.us-east4".
        """
        return pulumi.get(self, "datacenters")

    @property
    @pulumi.getter(name="grafanaUrl")
    def grafana_url(self) -> str:
        """
        URL for the grafana dashboard for this database
        """
        return pulumi.get(self, "grafana_url")

    @property
    @pulumi.getter(name="graphqlUrl")
    def graphql_url(self) -> str:
        """
        Graphql URL
        """
        return pulumi.get(self, "graphql_url")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def keyspace(self) -> str:
        """
        Initial keyspace
        """
        return pulumi.get(self, "keyspace")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Database name (user provided)
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        """
        Node count (not relevant for serverless databases)
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> str:
        """
        Ordg id (system generated)
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> str:
        """
        Owner id (system generated)
        """
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter
    def regions(self) -> Sequence[str]:
        """
        Cloud provider region. Get list of supported regions from regions data-source
        """
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="replicationFactor")
    def replication_factor(self) -> int:
        """
        Replication Factor (not relevant for serverless databases)
        """
        return pulumi.get(self, "replication_factor")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Database status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="totalStorage")
    def total_storage(self) -> int:
        """
        Storage Capacity (not relevant for serverelss databases)
        """
        return pulumi.get(self, "total_storage")


class AwaitableGetAstraDatabaseResult(GetAstraDatabaseResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAstraDatabaseResult(
            additional_keyspaces=self.additional_keyspaces,
            cloud_provider=self.cloud_provider,
            cqlsh_url=self.cqlsh_url,
            data_endpoint_url=self.data_endpoint_url,
            database_id=self.database_id,
            datacenters=self.datacenters,
            grafana_url=self.grafana_url,
            graphql_url=self.graphql_url,
            id=self.id,
            keyspace=self.keyspace,
            name=self.name,
            node_count=self.node_count,
            organization_id=self.organization_id,
            owner_id=self.owner_id,
            regions=self.regions,
            replication_factor=self.replication_factor,
            status=self.status,
            total_storage=self.total_storage)


def get_astra_database(database_id: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAstraDatabaseResult:
    """
    `Database` provides a datasource for Astra an Astra database. This can be used to select an existing database within your Astra Organization.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_astra as astra

    db = astra.get_astra_database(database_id="8d356587-73b3-430a-9c0e-d780332e2afb")
    ```


    :param str database_id: Astra Database ID (system generated)
    """
    __args__ = dict()
    __args__['databaseId'] = database_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('astra:index/getAstraDatabase:getAstraDatabase', __args__, opts=opts, typ=GetAstraDatabaseResult).value

    return AwaitableGetAstraDatabaseResult(
        additional_keyspaces=__ret__.additional_keyspaces,
        cloud_provider=__ret__.cloud_provider,
        cqlsh_url=__ret__.cqlsh_url,
        data_endpoint_url=__ret__.data_endpoint_url,
        database_id=__ret__.database_id,
        datacenters=__ret__.datacenters,
        grafana_url=__ret__.grafana_url,
        graphql_url=__ret__.graphql_url,
        id=__ret__.id,
        keyspace=__ret__.keyspace,
        name=__ret__.name,
        node_count=__ret__.node_count,
        organization_id=__ret__.organization_id,
        owner_id=__ret__.owner_id,
        regions=__ret__.regions,
        replication_factor=__ret__.replication_factor,
        status=__ret__.status,
        total_storage=__ret__.total_storage)


@_utilities.lift_output_func(get_astra_database)
def get_astra_database_output(database_id: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAstraDatabaseResult]:
    """
    `Database` provides a datasource for Astra an Astra database. This can be used to select an existing database within your Astra Organization.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_astra as astra

    db = astra.get_astra_database(database_id="8d356587-73b3-430a-9c0e-d780332e2afb")
    ```


    :param str database_id: Astra Database ID (system generated)
    """
    ...
