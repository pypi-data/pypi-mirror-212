# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['TableArgs', 'Table']

@pulumi.input_type
class TableArgs:
    def __init__(__self__, *,
                 clustering_columns: pulumi.Input[str],
                 column_definitions: pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]],
                 database_id: pulumi.Input[str],
                 keyspace: pulumi.Input[str],
                 partition_keys: pulumi.Input[str],
                 region: pulumi.Input[str],
                 table: pulumi.Input[str]):
        """
        The set of arguments for constructing a Table resource.
        :param pulumi.Input[str] clustering_columns: Clustering column(s), separated by :
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] column_definitions: A list of table Definitions
        :param pulumi.Input[str] database_id: Astra database to create the keyspace.
        :param pulumi.Input[str] keyspace: Keyspace name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
        :param pulumi.Input[str] partition_keys: Partition key(s), separated by :
        :param pulumi.Input[str] region: region.
        :param pulumi.Input[str] table: Table name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
        """
        pulumi.set(__self__, "clustering_columns", clustering_columns)
        pulumi.set(__self__, "column_definitions", column_definitions)
        pulumi.set(__self__, "database_id", database_id)
        pulumi.set(__self__, "keyspace", keyspace)
        pulumi.set(__self__, "partition_keys", partition_keys)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "table", table)

    @property
    @pulumi.getter(name="clusteringColumns")
    def clustering_columns(self) -> pulumi.Input[str]:
        """
        Clustering column(s), separated by :
        """
        return pulumi.get(self, "clustering_columns")

    @clustering_columns.setter
    def clustering_columns(self, value: pulumi.Input[str]):
        pulumi.set(self, "clustering_columns", value)

    @property
    @pulumi.getter(name="columnDefinitions")
    def column_definitions(self) -> pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]:
        """
        A list of table Definitions
        """
        return pulumi.get(self, "column_definitions")

    @column_definitions.setter
    def column_definitions(self, value: pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]):
        pulumi.set(self, "column_definitions", value)

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> pulumi.Input[str]:
        """
        Astra database to create the keyspace.
        """
        return pulumi.get(self, "database_id")

    @database_id.setter
    def database_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_id", value)

    @property
    @pulumi.getter
    def keyspace(self) -> pulumi.Input[str]:
        """
        Keyspace name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
        """
        return pulumi.get(self, "keyspace")

    @keyspace.setter
    def keyspace(self, value: pulumi.Input[str]):
        pulumi.set(self, "keyspace", value)

    @property
    @pulumi.getter(name="partitionKeys")
    def partition_keys(self) -> pulumi.Input[str]:
        """
        Partition key(s), separated by :
        """
        return pulumi.get(self, "partition_keys")

    @partition_keys.setter
    def partition_keys(self, value: pulumi.Input[str]):
        pulumi.set(self, "partition_keys", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        """
        Table name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
        """
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)


@pulumi.input_type
class _TableState:
    def __init__(__self__, *,
                 clustering_columns: Optional[pulumi.Input[str]] = None,
                 column_definitions: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 database_id: Optional[pulumi.Input[str]] = None,
                 keyspace: Optional[pulumi.Input[str]] = None,
                 partition_keys: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 table: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Table resources.
        :param pulumi.Input[str] clustering_columns: Clustering column(s), separated by :
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] column_definitions: A list of table Definitions
        :param pulumi.Input[str] database_id: Astra database to create the keyspace.
        :param pulumi.Input[str] keyspace: Keyspace name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
        :param pulumi.Input[str] partition_keys: Partition key(s), separated by :
        :param pulumi.Input[str] region: region.
        :param pulumi.Input[str] table: Table name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
        """
        if clustering_columns is not None:
            pulumi.set(__self__, "clustering_columns", clustering_columns)
        if column_definitions is not None:
            pulumi.set(__self__, "column_definitions", column_definitions)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if keyspace is not None:
            pulumi.set(__self__, "keyspace", keyspace)
        if partition_keys is not None:
            pulumi.set(__self__, "partition_keys", partition_keys)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if table is not None:
            pulumi.set(__self__, "table", table)

    @property
    @pulumi.getter(name="clusteringColumns")
    def clustering_columns(self) -> Optional[pulumi.Input[str]]:
        """
        Clustering column(s), separated by :
        """
        return pulumi.get(self, "clustering_columns")

    @clustering_columns.setter
    def clustering_columns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clustering_columns", value)

    @property
    @pulumi.getter(name="columnDefinitions")
    def column_definitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        """
        A list of table Definitions
        """
        return pulumi.get(self, "column_definitions")

    @column_definitions.setter
    def column_definitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "column_definitions", value)

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[pulumi.Input[str]]:
        """
        Astra database to create the keyspace.
        """
        return pulumi.get(self, "database_id")

    @database_id.setter
    def database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_id", value)

    @property
    @pulumi.getter
    def keyspace(self) -> Optional[pulumi.Input[str]]:
        """
        Keyspace name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
        """
        return pulumi.get(self, "keyspace")

    @keyspace.setter
    def keyspace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyspace", value)

    @property
    @pulumi.getter(name="partitionKeys")
    def partition_keys(self) -> Optional[pulumi.Input[str]]:
        """
        Partition key(s), separated by :
        """
        return pulumi.get(self, "partition_keys")

    @partition_keys.setter
    def partition_keys(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "partition_keys", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def table(self) -> Optional[pulumi.Input[str]]:
        """
        Table name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
        """
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table", value)


class Table(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 clustering_columns: Optional[pulumi.Input[str]] = None,
                 column_definitions: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 database_id: Optional[pulumi.Input[str]] = None,
                 keyspace: Optional[pulumi.Input[str]] = None,
                 partition_keys: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 table: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        `Table` provides a table resource which represents a table in cassandra.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_astra as astra

        dev = astra.Database("dev",
            keyspace="puppies",
            cloud_provider="gcp",
            regions=["us-east1"])
        table_1 = astra.Table("table-1",
            table="mytable",
            keyspace="puppies",
            database_id=dev.id,
            region="us-east1",
            clustering_columns="a:b",
            partition_keys="c:d",
            column_definitions=[
                {
                    "Name": "a",
                    "Static": "false",
                    "TypeDefinition": "text",
                },
                {
                    "Name": "b",
                    "Static": "false",
                    "TypeDefinition": "text",
                },
                {
                    "Name": "c",
                    "Static": "false",
                    "TypeDefinition": "text",
                },
                {
                    "Name": "d",
                    "Static": "false",
                    "TypeDefinition": "text",
                },
                {
                    "Name": "e",
                    "Static": "false",
                    "TypeDefinition": "text",
                },
                {
                    "Name": "f",
                    "Static": "false",
                    "TypeDefinition": "text",
                },
            ])
        ```

        ## Import

        # the import id includes the database_id, keyspace name, and table name.

        ```sh
         $ pulumi import astra:index/table:Table example 48bfc13b-c1a5-48db-b70f-b6ef9709872b/kayspacename/tablename
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] clustering_columns: Clustering column(s), separated by :
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] column_definitions: A list of table Definitions
        :param pulumi.Input[str] database_id: Astra database to create the keyspace.
        :param pulumi.Input[str] keyspace: Keyspace name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
        :param pulumi.Input[str] partition_keys: Partition key(s), separated by :
        :param pulumi.Input[str] region: region.
        :param pulumi.Input[str] table: Table name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TableArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `Table` provides a table resource which represents a table in cassandra.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_astra as astra

        dev = astra.Database("dev",
            keyspace="puppies",
            cloud_provider="gcp",
            regions=["us-east1"])
        table_1 = astra.Table("table-1",
            table="mytable",
            keyspace="puppies",
            database_id=dev.id,
            region="us-east1",
            clustering_columns="a:b",
            partition_keys="c:d",
            column_definitions=[
                {
                    "Name": "a",
                    "Static": "false",
                    "TypeDefinition": "text",
                },
                {
                    "Name": "b",
                    "Static": "false",
                    "TypeDefinition": "text",
                },
                {
                    "Name": "c",
                    "Static": "false",
                    "TypeDefinition": "text",
                },
                {
                    "Name": "d",
                    "Static": "false",
                    "TypeDefinition": "text",
                },
                {
                    "Name": "e",
                    "Static": "false",
                    "TypeDefinition": "text",
                },
                {
                    "Name": "f",
                    "Static": "false",
                    "TypeDefinition": "text",
                },
            ])
        ```

        ## Import

        # the import id includes the database_id, keyspace name, and table name.

        ```sh
         $ pulumi import astra:index/table:Table example 48bfc13b-c1a5-48db-b70f-b6ef9709872b/kayspacename/tablename
        ```

        :param str resource_name: The name of the resource.
        :param TableArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TableArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 clustering_columns: Optional[pulumi.Input[str]] = None,
                 column_definitions: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 database_id: Optional[pulumi.Input[str]] = None,
                 keyspace: Optional[pulumi.Input[str]] = None,
                 partition_keys: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 table: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TableArgs.__new__(TableArgs)

            if clustering_columns is None and not opts.urn:
                raise TypeError("Missing required property 'clustering_columns'")
            __props__.__dict__["clustering_columns"] = clustering_columns
            if column_definitions is None and not opts.urn:
                raise TypeError("Missing required property 'column_definitions'")
            __props__.__dict__["column_definitions"] = column_definitions
            if database_id is None and not opts.urn:
                raise TypeError("Missing required property 'database_id'")
            __props__.__dict__["database_id"] = database_id
            if keyspace is None and not opts.urn:
                raise TypeError("Missing required property 'keyspace'")
            __props__.__dict__["keyspace"] = keyspace
            if partition_keys is None and not opts.urn:
                raise TypeError("Missing required property 'partition_keys'")
            __props__.__dict__["partition_keys"] = partition_keys
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            if table is None and not opts.urn:
                raise TypeError("Missing required property 'table'")
            __props__.__dict__["table"] = table
        super(Table, __self__).__init__(
            'astra:index/table:Table',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            clustering_columns: Optional[pulumi.Input[str]] = None,
            column_definitions: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
            database_id: Optional[pulumi.Input[str]] = None,
            keyspace: Optional[pulumi.Input[str]] = None,
            partition_keys: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            table: Optional[pulumi.Input[str]] = None) -> 'Table':
        """
        Get an existing Table resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] clustering_columns: Clustering column(s), separated by :
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] column_definitions: A list of table Definitions
        :param pulumi.Input[str] database_id: Astra database to create the keyspace.
        :param pulumi.Input[str] keyspace: Keyspace name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
        :param pulumi.Input[str] partition_keys: Partition key(s), separated by :
        :param pulumi.Input[str] region: region.
        :param pulumi.Input[str] table: Table name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TableState.__new__(_TableState)

        __props__.__dict__["clustering_columns"] = clustering_columns
        __props__.__dict__["column_definitions"] = column_definitions
        __props__.__dict__["database_id"] = database_id
        __props__.__dict__["keyspace"] = keyspace
        __props__.__dict__["partition_keys"] = partition_keys
        __props__.__dict__["region"] = region
        __props__.__dict__["table"] = table
        return Table(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusteringColumns")
    def clustering_columns(self) -> pulumi.Output[str]:
        """
        Clustering column(s), separated by :
        """
        return pulumi.get(self, "clustering_columns")

    @property
    @pulumi.getter(name="columnDefinitions")
    def column_definitions(self) -> pulumi.Output[Sequence[Mapping[str, str]]]:
        """
        A list of table Definitions
        """
        return pulumi.get(self, "column_definitions")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> pulumi.Output[str]:
        """
        Astra database to create the keyspace.
        """
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter
    def keyspace(self) -> pulumi.Output[str]:
        """
        Keyspace name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
        """
        return pulumi.get(self, "keyspace")

    @property
    @pulumi.getter(name="partitionKeys")
    def partition_keys(self) -> pulumi.Output[str]:
        """
        Partition key(s), separated by :
        """
        return pulumi.get(self, "partition_keys")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def table(self) -> pulumi.Output[str]:
        """
        Table name can have up to 48 alpha-numeric characters and contain underscores; only letters are supported as the first character.
        """
        return pulumi.get(self, "table")

