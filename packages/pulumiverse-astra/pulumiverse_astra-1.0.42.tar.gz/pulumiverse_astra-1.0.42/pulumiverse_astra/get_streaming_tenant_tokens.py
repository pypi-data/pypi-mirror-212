# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetStreamingTenantTokensResult',
    'AwaitableGetStreamingTenantTokensResult',
    'get_streaming_tenant_tokens',
    'get_streaming_tenant_tokens_output',
]

@pulumi.output_type
class GetStreamingTenantTokensResult:
    """
    A collection of values returned by getStreamingTenantTokens.
    """
    def __init__(__self__, cluster_name=None, id=None, tenant_name=None, tokens=None):
        if cluster_name and not isinstance(cluster_name, str):
            raise TypeError("Expected argument 'cluster_name' to be a str")
        pulumi.set(__self__, "cluster_name", cluster_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if tenant_name and not isinstance(tenant_name, str):
            raise TypeError("Expected argument 'tenant_name' to be a str")
        pulumi.set(__self__, "tenant_name", tenant_name)
        if tokens and not isinstance(tokens, list):
            raise TypeError("Expected argument 'tokens' to be a list")
        pulumi.set(__self__, "tokens", tokens)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Name of the Pulsar Cluster. Format: `pulsar-<cloud provider>-<cloud region>`. Example: `pulsar-gcp-useast1`
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> str:
        """
        Name of the streaming tenant for which to fetch tokens.
        """
        return pulumi.get(self, "tenant_name")

    @property
    @pulumi.getter
    def tokens(self) -> Sequence['outputs.GetStreamingTenantTokensTokenResult']:
        """
        The list of tokens for the specified tenant.
        """
        return pulumi.get(self, "tokens")


class AwaitableGetStreamingTenantTokensResult(GetStreamingTenantTokensResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStreamingTenantTokensResult(
            cluster_name=self.cluster_name,
            id=self.id,
            tenant_name=self.tenant_name,
            tokens=self.tokens)


def get_streaming_tenant_tokens(cluster_name: Optional[str] = None,
                                tenant_name: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStreamingTenantTokensResult:
    """
    `get_streaming_tenant_tokens` provides a datasource that lists streaming tenant tokens.


    :param str cluster_name: Name of the Pulsar Cluster. Format: `pulsar-<cloud provider>-<cloud region>`. Example: `pulsar-gcp-useast1`
    :param str tenant_name: Name of the streaming tenant for which to fetch tokens.
    """
    __args__ = dict()
    __args__['clusterName'] = cluster_name
    __args__['tenantName'] = tenant_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('astra:index/getStreamingTenantTokens:getStreamingTenantTokens', __args__, opts=opts, typ=GetStreamingTenantTokensResult).value

    return AwaitableGetStreamingTenantTokensResult(
        cluster_name=__ret__.cluster_name,
        id=__ret__.id,
        tenant_name=__ret__.tenant_name,
        tokens=__ret__.tokens)


@_utilities.lift_output_func(get_streaming_tenant_tokens)
def get_streaming_tenant_tokens_output(cluster_name: Optional[pulumi.Input[str]] = None,
                                       tenant_name: Optional[pulumi.Input[str]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetStreamingTenantTokensResult]:
    """
    `get_streaming_tenant_tokens` provides a datasource that lists streaming tenant tokens.


    :param str cluster_name: Name of the Pulsar Cluster. Format: `pulsar-<cloud provider>-<cloud region>`. Example: `pulsar-gcp-useast1`
    :param str tenant_name: Name of the streaming tenant for which to fetch tokens.
    """
    ...
