# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['DatabaseArgs', 'Database']

@pulumi.input_type
class DatabaseArgs:
    def __init__(__self__, *,
                 cloud_provider: pulumi.Input[str],
                 keyspace: pulumi.Input[str],
                 regions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Database resource.
        :param pulumi.Input[str] cloud_provider: The cloud provider to launch the database. (Currently supported: aws, azure, gcp)
        :param pulumi.Input[str] keyspace: Initial keyspace name. For additional keyspaces, use the Keyspace resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] regions: Cloud regions to launch the database. (see https://docs.datastax.com/en/astra/docs/database-regions.html for supported regions)
        :param pulumi.Input[bool] deletion_protection: Whether or not to allow Terraform to destroy the instance. Unless this field is set to false in Terraform state, a
               `terraform destroy` or `terraform apply` command that deletes the instance will fail. Defaults to `true`.
        :param pulumi.Input[str] name: Astra database name.
        """
        pulumi.set(__self__, "cloud_provider", cloud_provider)
        pulumi.set(__self__, "keyspace", keyspace)
        pulumi.set(__self__, "regions", regions)
        if deletion_protection is not None:
            pulumi.set(__self__, "deletion_protection", deletion_protection)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> pulumi.Input[str]:
        """
        The cloud provider to launch the database. (Currently supported: aws, azure, gcp)
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter
    def keyspace(self) -> pulumi.Input[str]:
        """
        Initial keyspace name. For additional keyspaces, use the Keyspace resource.
        """
        return pulumi.get(self, "keyspace")

    @keyspace.setter
    def keyspace(self, value: pulumi.Input[str]):
        pulumi.set(self, "keyspace", value)

    @property
    @pulumi.getter
    def regions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Cloud regions to launch the database. (see https://docs.datastax.com/en/astra/docs/database-regions.html for supported regions)
        """
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "regions", value)

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to allow Terraform to destroy the instance. Unless this field is set to false in Terraform state, a
        `terraform destroy` or `terraform apply` command that deletes the instance will fail. Defaults to `true`.
        """
        return pulumi.get(self, "deletion_protection")

    @deletion_protection.setter
    def deletion_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deletion_protection", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Astra database name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _DatabaseState:
    def __init__(__self__, *,
                 additional_keyspaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 cqlsh_url: Optional[pulumi.Input[str]] = None,
                 data_endpoint_url: Optional[pulumi.Input[str]] = None,
                 datacenters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 grafana_url: Optional[pulumi.Input[str]] = None,
                 graphql_url: Optional[pulumi.Input[str]] = None,
                 keyspace: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_count: Optional[pulumi.Input[int]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 replication_factor: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 total_storage: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Database resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_keyspaces: Additional keyspaces
        :param pulumi.Input[str] cloud_provider: The cloud provider to launch the database. (Currently supported: aws, azure, gcp)
        :param pulumi.Input[str] cqlsh_url: The cqlsh_url
        :param pulumi.Input[str] data_endpoint_url: The data*endpoint*url
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] datacenters: Map of Datacenter IDs. The map key is "cloud_provider.region". Example: "GCP.us-east4".
        :param pulumi.Input[bool] deletion_protection: Whether or not to allow Terraform to destroy the instance. Unless this field is set to false in Terraform state, a
               `terraform destroy` or `terraform apply` command that deletes the instance will fail. Defaults to `true`.
        :param pulumi.Input[str] grafana_url: The grafana_url
        :param pulumi.Input[str] graphql_url: The graphql_url
        :param pulumi.Input[str] keyspace: Initial keyspace name. For additional keyspaces, use the Keyspace resource.
        :param pulumi.Input[str] name: Astra database name.
        :param pulumi.Input[int] node_count: The node_count
        :param pulumi.Input[str] organization_id: The org id.
        :param pulumi.Input[str] owner_id: The owner id.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] regions: Cloud regions to launch the database. (see https://docs.datastax.com/en/astra/docs/database-regions.html for supported regions)
        :param pulumi.Input[int] replication_factor: The replication_factor
        :param pulumi.Input[str] status: The status
        :param pulumi.Input[int] total_storage: The total_storage
        """
        if additional_keyspaces is not None:
            pulumi.set(__self__, "additional_keyspaces", additional_keyspaces)
        if cloud_provider is not None:
            pulumi.set(__self__, "cloud_provider", cloud_provider)
        if cqlsh_url is not None:
            pulumi.set(__self__, "cqlsh_url", cqlsh_url)
        if data_endpoint_url is not None:
            pulumi.set(__self__, "data_endpoint_url", data_endpoint_url)
        if datacenters is not None:
            pulumi.set(__self__, "datacenters", datacenters)
        if deletion_protection is not None:
            pulumi.set(__self__, "deletion_protection", deletion_protection)
        if grafana_url is not None:
            pulumi.set(__self__, "grafana_url", grafana_url)
        if graphql_url is not None:
            pulumi.set(__self__, "graphql_url", graphql_url)
        if keyspace is not None:
            pulumi.set(__self__, "keyspace", keyspace)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_count is not None:
            pulumi.set(__self__, "node_count", node_count)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if replication_factor is not None:
            pulumi.set(__self__, "replication_factor", replication_factor)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if total_storage is not None:
            pulumi.set(__self__, "total_storage", total_storage)

    @property
    @pulumi.getter(name="additionalKeyspaces")
    def additional_keyspaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Additional keyspaces
        """
        return pulumi.get(self, "additional_keyspaces")

    @additional_keyspaces.setter
    def additional_keyspaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_keyspaces", value)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud provider to launch the database. (Currently supported: aws, azure, gcp)
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter(name="cqlshUrl")
    def cqlsh_url(self) -> Optional[pulumi.Input[str]]:
        """
        The cqlsh_url
        """
        return pulumi.get(self, "cqlsh_url")

    @cqlsh_url.setter
    def cqlsh_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cqlsh_url", value)

    @property
    @pulumi.getter(name="dataEndpointUrl")
    def data_endpoint_url(self) -> Optional[pulumi.Input[str]]:
        """
        The data*endpoint*url
        """
        return pulumi.get(self, "data_endpoint_url")

    @data_endpoint_url.setter
    def data_endpoint_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_endpoint_url", value)

    @property
    @pulumi.getter
    def datacenters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of Datacenter IDs. The map key is "cloud_provider.region". Example: "GCP.us-east4".
        """
        return pulumi.get(self, "datacenters")

    @datacenters.setter
    def datacenters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "datacenters", value)

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to allow Terraform to destroy the instance. Unless this field is set to false in Terraform state, a
        `terraform destroy` or `terraform apply` command that deletes the instance will fail. Defaults to `true`.
        """
        return pulumi.get(self, "deletion_protection")

    @deletion_protection.setter
    def deletion_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deletion_protection", value)

    @property
    @pulumi.getter(name="grafanaUrl")
    def grafana_url(self) -> Optional[pulumi.Input[str]]:
        """
        The grafana_url
        """
        return pulumi.get(self, "grafana_url")

    @grafana_url.setter
    def grafana_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grafana_url", value)

    @property
    @pulumi.getter(name="graphqlUrl")
    def graphql_url(self) -> Optional[pulumi.Input[str]]:
        """
        The graphql_url
        """
        return pulumi.get(self, "graphql_url")

    @graphql_url.setter
    def graphql_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "graphql_url", value)

    @property
    @pulumi.getter
    def keyspace(self) -> Optional[pulumi.Input[str]]:
        """
        Initial keyspace name. For additional keyspaces, use the Keyspace resource.
        """
        return pulumi.get(self, "keyspace")

    @keyspace.setter
    def keyspace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyspace", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Astra database name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[pulumi.Input[int]]:
        """
        The node_count
        """
        return pulumi.get(self, "node_count")

    @node_count.setter
    def node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_count", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[str]]:
        """
        The org id.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        """
        The owner id.
        """
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter
    def regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Cloud regions to launch the database. (see https://docs.datastax.com/en/astra/docs/database-regions.html for supported regions)
        """
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "regions", value)

    @property
    @pulumi.getter(name="replicationFactor")
    def replication_factor(self) -> Optional[pulumi.Input[int]]:
        """
        The replication_factor
        """
        return pulumi.get(self, "replication_factor")

    @replication_factor.setter
    def replication_factor(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replication_factor", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="totalStorage")
    def total_storage(self) -> Optional[pulumi.Input[int]]:
        """
        The total_storage
        """
        return pulumi.get(self, "total_storage")

    @total_storage.setter
    def total_storage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total_storage", value)


class Database(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 keyspace: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_astra as astra

        example = astra.Database("example",
            cloud_provider="gcp",
            keyspace="keyspace",
            regions=["us-east1"])
        ```

        ## Import

        ```sh
         $ pulumi import astra:index/database:Database example 48bfc13b-c1a5-48db-b70f-b6ef9709872b
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cloud_provider: The cloud provider to launch the database. (Currently supported: aws, azure, gcp)
        :param pulumi.Input[bool] deletion_protection: Whether or not to allow Terraform to destroy the instance. Unless this field is set to false in Terraform state, a
               `terraform destroy` or `terraform apply` command that deletes the instance will fail. Defaults to `true`.
        :param pulumi.Input[str] keyspace: Initial keyspace name. For additional keyspaces, use the Keyspace resource.
        :param pulumi.Input[str] name: Astra database name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] regions: Cloud regions to launch the database. (see https://docs.datastax.com/en/astra/docs/database-regions.html for supported regions)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DatabaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_astra as astra

        example = astra.Database("example",
            cloud_provider="gcp",
            keyspace="keyspace",
            regions=["us-east1"])
        ```

        ## Import

        ```sh
         $ pulumi import astra:index/database:Database example 48bfc13b-c1a5-48db-b70f-b6ef9709872b
        ```

        :param str resource_name: The name of the resource.
        :param DatabaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatabaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 keyspace: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatabaseArgs.__new__(DatabaseArgs)

            if cloud_provider is None and not opts.urn:
                raise TypeError("Missing required property 'cloud_provider'")
            __props__.__dict__["cloud_provider"] = cloud_provider
            __props__.__dict__["deletion_protection"] = deletion_protection
            if keyspace is None and not opts.urn:
                raise TypeError("Missing required property 'keyspace'")
            __props__.__dict__["keyspace"] = keyspace
            __props__.__dict__["name"] = name
            if regions is None and not opts.urn:
                raise TypeError("Missing required property 'regions'")
            __props__.__dict__["regions"] = regions
            __props__.__dict__["additional_keyspaces"] = None
            __props__.__dict__["cqlsh_url"] = None
            __props__.__dict__["data_endpoint_url"] = None
            __props__.__dict__["datacenters"] = None
            __props__.__dict__["grafana_url"] = None
            __props__.__dict__["graphql_url"] = None
            __props__.__dict__["node_count"] = None
            __props__.__dict__["organization_id"] = None
            __props__.__dict__["owner_id"] = None
            __props__.__dict__["replication_factor"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["total_storage"] = None
        super(Database, __self__).__init__(
            'astra:index/database:Database',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            additional_keyspaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            cloud_provider: Optional[pulumi.Input[str]] = None,
            cqlsh_url: Optional[pulumi.Input[str]] = None,
            data_endpoint_url: Optional[pulumi.Input[str]] = None,
            datacenters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            deletion_protection: Optional[pulumi.Input[bool]] = None,
            grafana_url: Optional[pulumi.Input[str]] = None,
            graphql_url: Optional[pulumi.Input[str]] = None,
            keyspace: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            node_count: Optional[pulumi.Input[int]] = None,
            organization_id: Optional[pulumi.Input[str]] = None,
            owner_id: Optional[pulumi.Input[str]] = None,
            regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            replication_factor: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[str]] = None,
            total_storage: Optional[pulumi.Input[int]] = None) -> 'Database':
        """
        Get an existing Database resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_keyspaces: Additional keyspaces
        :param pulumi.Input[str] cloud_provider: The cloud provider to launch the database. (Currently supported: aws, azure, gcp)
        :param pulumi.Input[str] cqlsh_url: The cqlsh_url
        :param pulumi.Input[str] data_endpoint_url: The data*endpoint*url
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] datacenters: Map of Datacenter IDs. The map key is "cloud_provider.region". Example: "GCP.us-east4".
        :param pulumi.Input[bool] deletion_protection: Whether or not to allow Terraform to destroy the instance. Unless this field is set to false in Terraform state, a
               `terraform destroy` or `terraform apply` command that deletes the instance will fail. Defaults to `true`.
        :param pulumi.Input[str] grafana_url: The grafana_url
        :param pulumi.Input[str] graphql_url: The graphql_url
        :param pulumi.Input[str] keyspace: Initial keyspace name. For additional keyspaces, use the Keyspace resource.
        :param pulumi.Input[str] name: Astra database name.
        :param pulumi.Input[int] node_count: The node_count
        :param pulumi.Input[str] organization_id: The org id.
        :param pulumi.Input[str] owner_id: The owner id.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] regions: Cloud regions to launch the database. (see https://docs.datastax.com/en/astra/docs/database-regions.html for supported regions)
        :param pulumi.Input[int] replication_factor: The replication_factor
        :param pulumi.Input[str] status: The status
        :param pulumi.Input[int] total_storage: The total_storage
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DatabaseState.__new__(_DatabaseState)

        __props__.__dict__["additional_keyspaces"] = additional_keyspaces
        __props__.__dict__["cloud_provider"] = cloud_provider
        __props__.__dict__["cqlsh_url"] = cqlsh_url
        __props__.__dict__["data_endpoint_url"] = data_endpoint_url
        __props__.__dict__["datacenters"] = datacenters
        __props__.__dict__["deletion_protection"] = deletion_protection
        __props__.__dict__["grafana_url"] = grafana_url
        __props__.__dict__["graphql_url"] = graphql_url
        __props__.__dict__["keyspace"] = keyspace
        __props__.__dict__["name"] = name
        __props__.__dict__["node_count"] = node_count
        __props__.__dict__["organization_id"] = organization_id
        __props__.__dict__["owner_id"] = owner_id
        __props__.__dict__["regions"] = regions
        __props__.__dict__["replication_factor"] = replication_factor
        __props__.__dict__["status"] = status
        __props__.__dict__["total_storage"] = total_storage
        return Database(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="additionalKeyspaces")
    def additional_keyspaces(self) -> pulumi.Output[Sequence[str]]:
        """
        Additional keyspaces
        """
        return pulumi.get(self, "additional_keyspaces")

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> pulumi.Output[str]:
        """
        The cloud provider to launch the database. (Currently supported: aws, azure, gcp)
        """
        return pulumi.get(self, "cloud_provider")

    @property
    @pulumi.getter(name="cqlshUrl")
    def cqlsh_url(self) -> pulumi.Output[str]:
        """
        The cqlsh_url
        """
        return pulumi.get(self, "cqlsh_url")

    @property
    @pulumi.getter(name="dataEndpointUrl")
    def data_endpoint_url(self) -> pulumi.Output[str]:
        """
        The data*endpoint*url
        """
        return pulumi.get(self, "data_endpoint_url")

    @property
    @pulumi.getter
    def datacenters(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Map of Datacenter IDs. The map key is "cloud_provider.region". Example: "GCP.us-east4".
        """
        return pulumi.get(self, "datacenters")

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether or not to allow Terraform to destroy the instance. Unless this field is set to false in Terraform state, a
        `terraform destroy` or `terraform apply` command that deletes the instance will fail. Defaults to `true`.
        """
        return pulumi.get(self, "deletion_protection")

    @property
    @pulumi.getter(name="grafanaUrl")
    def grafana_url(self) -> pulumi.Output[str]:
        """
        The grafana_url
        """
        return pulumi.get(self, "grafana_url")

    @property
    @pulumi.getter(name="graphqlUrl")
    def graphql_url(self) -> pulumi.Output[str]:
        """
        The graphql_url
        """
        return pulumi.get(self, "graphql_url")

    @property
    @pulumi.getter
    def keyspace(self) -> pulumi.Output[str]:
        """
        Initial keyspace name. For additional keyspaces, use the Keyspace resource.
        """
        return pulumi.get(self, "keyspace")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Astra database name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> pulumi.Output[int]:
        """
        The node_count
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[str]:
        """
        The org id.
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> pulumi.Output[str]:
        """
        The owner id.
        """
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter
    def regions(self) -> pulumi.Output[Sequence[str]]:
        """
        Cloud regions to launch the database. (see https://docs.datastax.com/en/astra/docs/database-regions.html for supported regions)
        """
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="replicationFactor")
    def replication_factor(self) -> pulumi.Output[int]:
        """
        The replication_factor
        """
        return pulumi.get(self, "replication_factor")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="totalStorage")
    def total_storage(self) -> pulumi.Output[int]:
        """
        The total_storage
        """
        return pulumi.get(self, "total_storage")

