# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PrivateLinkArgs', 'PrivateLink']

@pulumi.input_type
class PrivateLinkArgs:
    def __init__(__self__, *,
                 allowed_principals: pulumi.Input[Sequence[pulumi.Input[str]]],
                 database_id: pulumi.Input[str],
                 datacenter_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a PrivateLink resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_principals: List of service principals to apply to the Private Link (i.e. arn:aws:iam::123456789012:role/admin).
        :param pulumi.Input[str] database_id: Astra database where private link will be enabled.
        :param pulumi.Input[str] datacenter_id: Astra datacenter in the region where the private link will be created.
        """
        pulumi.set(__self__, "allowed_principals", allowed_principals)
        pulumi.set(__self__, "database_id", database_id)
        pulumi.set(__self__, "datacenter_id", datacenter_id)

    @property
    @pulumi.getter(name="allowedPrincipals")
    def allowed_principals(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of service principals to apply to the Private Link (i.e. arn:aws:iam::123456789012:role/admin).
        """
        return pulumi.get(self, "allowed_principals")

    @allowed_principals.setter
    def allowed_principals(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_principals", value)

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> pulumi.Input[str]:
        """
        Astra database where private link will be enabled.
        """
        return pulumi.get(self, "database_id")

    @database_id.setter
    def database_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_id", value)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Input[str]:
        """
        Astra datacenter in the region where the private link will be created.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "datacenter_id", value)


@pulumi.input_type
class _PrivateLinkState:
    def __init__(__self__, *,
                 allowed_principals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 database_id: Optional[pulumi.Input[str]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PrivateLink resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_principals: List of service principals to apply to the Private Link (i.e. arn:aws:iam::123456789012:role/admin).
        :param pulumi.Input[str] database_id: Astra database where private link will be enabled.
        :param pulumi.Input[str] datacenter_id: Astra datacenter in the region where the private link will be created.
        :param pulumi.Input[str] service_name: Name of the endpoint service for private link generated by the cloud provider.
        """
        if allowed_principals is not None:
            pulumi.set(__self__, "allowed_principals", allowed_principals)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if datacenter_id is not None:
            pulumi.set(__self__, "datacenter_id", datacenter_id)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="allowedPrincipals")
    def allowed_principals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of service principals to apply to the Private Link (i.e. arn:aws:iam::123456789012:role/admin).
        """
        return pulumi.get(self, "allowed_principals")

    @allowed_principals.setter
    def allowed_principals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_principals", value)

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[pulumi.Input[str]]:
        """
        Astra database where private link will be enabled.
        """
        return pulumi.get(self, "database_id")

    @database_id.setter
    def database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_id", value)

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> Optional[pulumi.Input[str]]:
        """
        Astra datacenter in the region where the private link will be created.
        """
        return pulumi.get(self, "datacenter_id")

    @datacenter_id.setter
    def datacenter_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datacenter_id", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the endpoint service for private link generated by the cloud provider.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)


class PrivateLink(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_principals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 database_id: Optional[pulumi.Input[str]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        `PrivateLink` provides a private link resource. Private Link is a private network endpoint that can be created to connect from your vpc to Astra without using a publicly routable IP address. `PrivateLink` resources are associated with a database id. Once the private_link resource is created in Astra it must be linked to an endpoint within your vpc, use `PrivateLinkEndpoint` to do this.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_astra as astra

        example = astra.PrivateLink("example",
            allowed_principals=["arn:aws:iam::111708290731:user/sebastian.estevez"],
            database_id="a6bc9c26-e7ce-424f-84c7-0a00afb12588",
            datacenter_id="a6bc9c26-e7ce-424f-84c7-0a00afb12588-1")
        ```

        ## Import

        ```sh
         $ pulumi import astra:index/privateLink:PrivateLink example a6bc9c26-e7ce-424f-84c7-0a00afb12588/datacenter/a6bc9c26-e7ce-424f-84c7-0a00afb12588/serviceNames/svc-name-here
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_principals: List of service principals to apply to the Private Link (i.e. arn:aws:iam::123456789012:role/admin).
        :param pulumi.Input[str] database_id: Astra database where private link will be enabled.
        :param pulumi.Input[str] datacenter_id: Astra datacenter in the region where the private link will be created.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PrivateLinkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `PrivateLink` provides a private link resource. Private Link is a private network endpoint that can be created to connect from your vpc to Astra without using a publicly routable IP address. `PrivateLink` resources are associated with a database id. Once the private_link resource is created in Astra it must be linked to an endpoint within your vpc, use `PrivateLinkEndpoint` to do this.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_astra as astra

        example = astra.PrivateLink("example",
            allowed_principals=["arn:aws:iam::111708290731:user/sebastian.estevez"],
            database_id="a6bc9c26-e7ce-424f-84c7-0a00afb12588",
            datacenter_id="a6bc9c26-e7ce-424f-84c7-0a00afb12588-1")
        ```

        ## Import

        ```sh
         $ pulumi import astra:index/privateLink:PrivateLink example a6bc9c26-e7ce-424f-84c7-0a00afb12588/datacenter/a6bc9c26-e7ce-424f-84c7-0a00afb12588/serviceNames/svc-name-here
        ```

        :param str resource_name: The name of the resource.
        :param PrivateLinkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PrivateLinkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_principals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 database_id: Optional[pulumi.Input[str]] = None,
                 datacenter_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PrivateLinkArgs.__new__(PrivateLinkArgs)

            if allowed_principals is None and not opts.urn:
                raise TypeError("Missing required property 'allowed_principals'")
            __props__.__dict__["allowed_principals"] = allowed_principals
            if database_id is None and not opts.urn:
                raise TypeError("Missing required property 'database_id'")
            __props__.__dict__["database_id"] = database_id
            if datacenter_id is None and not opts.urn:
                raise TypeError("Missing required property 'datacenter_id'")
            __props__.__dict__["datacenter_id"] = datacenter_id
            __props__.__dict__["service_name"] = None
        super(PrivateLink, __self__).__init__(
            'astra:index/privateLink:PrivateLink',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allowed_principals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            database_id: Optional[pulumi.Input[str]] = None,
            datacenter_id: Optional[pulumi.Input[str]] = None,
            service_name: Optional[pulumi.Input[str]] = None) -> 'PrivateLink':
        """
        Get an existing PrivateLink resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_principals: List of service principals to apply to the Private Link (i.e. arn:aws:iam::123456789012:role/admin).
        :param pulumi.Input[str] database_id: Astra database where private link will be enabled.
        :param pulumi.Input[str] datacenter_id: Astra datacenter in the region where the private link will be created.
        :param pulumi.Input[str] service_name: Name of the endpoint service for private link generated by the cloud provider.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PrivateLinkState.__new__(_PrivateLinkState)

        __props__.__dict__["allowed_principals"] = allowed_principals
        __props__.__dict__["database_id"] = database_id
        __props__.__dict__["datacenter_id"] = datacenter_id
        __props__.__dict__["service_name"] = service_name
        return PrivateLink(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowedPrincipals")
    def allowed_principals(self) -> pulumi.Output[Sequence[str]]:
        """
        List of service principals to apply to the Private Link (i.e. arn:aws:iam::123456789012:role/admin).
        """
        return pulumi.get(self, "allowed_principals")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> pulumi.Output[str]:
        """
        Astra database where private link will be enabled.
        """
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="datacenterId")
    def datacenter_id(self) -> pulumi.Output[str]:
        """
        Astra datacenter in the region where the private link will be created.
        """
        return pulumi.get(self, "datacenter_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Output[str]:
        """
        Name of the endpoint service for private link generated by the cloud provider.
        """
        return pulumi.get(self, "service_name")

