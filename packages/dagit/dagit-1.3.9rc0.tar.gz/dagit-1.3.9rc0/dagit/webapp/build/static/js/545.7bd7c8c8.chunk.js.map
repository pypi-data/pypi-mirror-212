{"version":3,"file":"static/js/545.7bd7c8c8.chunk.js","mappings":"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","sources":["../../core/src/asset-graph/layout.ts","../../../node_modules/lodash/_arrayAggregator.js","../../../node_modules/lodash/_baseAggregator.js","../../../node_modules/lodash/_createAggregator.js","../../../node_modules/lodash/groupBy.js","../../../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"sourcesContent":["import * as dagre from 'dagre';\nimport groupBy from 'lodash/groupBy';\n\nimport {IBounds, IPoint} from '../graph/common';\n\nimport {GraphData, GraphNode, GraphId} from './Utils';\n\nexport interface AssetLayout {\n  id: GraphId;\n  bounds: IBounds; // Overall frame of the box relative to 0,0 on the graph\n}\n\nexport interface GroupLayout {\n  id: GraphId;\n  groupName: string;\n  repositoryName: string;\n  repositoryLocationName: string;\n  repositoryDisambiguationRequired: boolean;\n  bounds: IBounds; // Overall frame of the box relative to 0,0 on the graph\n}\nexport type AssetLayoutEdge = {\n  from: IPoint;\n  fromId: string;\n  to: IPoint;\n  toId: string;\n};\n\nexport type AssetGraphLayout = {\n  width: number;\n  height: number;\n  edges: AssetLayoutEdge[];\n  nodes: {[id: string]: AssetLayout};\n  groups: {[name: string]: GroupLayout};\n};\n\nconst opts: {margin: number} = {\n  margin: 100,\n};\n\n// Prefix group nodes in the Dagre layout so that an asset and an asset\n// group cannot have the same name.\nconst GROUP_NODE_PREFIX = 'group__';\n\nexport const layoutAssetGraph = (graphData: GraphData): AssetGraphLayout => {\n  const g = new dagre.graphlib.Graph({compound: true});\n\n  g.setGraph({\n    rankdir: 'TB',\n    marginx: opts.margin,\n    marginy: opts.margin,\n    nodesep: 40,\n    edgesep: 10,\n    ranksep: 10,\n  });\n  g.setDefaultEdgeLabel(() => ({}));\n\n  const parentNodeIdForNode = (node: GraphNode) =>\n    [\n      GROUP_NODE_PREFIX,\n      node.definition.repository.location.name,\n      node.definition.repository.name,\n      node.definition.groupName,\n    ].join('__');\n\n  // const shouldRender = (node?: GraphNode) => node && node.definition.opNames.length > 0;\n  const shouldRender = (node?: GraphNode) => node;\n  const renderedNodes = Object.values(graphData.nodes).filter(shouldRender);\n\n  const groups: {[id: string]: GroupLayout} = {};\n  for (const node of renderedNodes) {\n    if (node.definition.groupName) {\n      const id = parentNodeIdForNode(node);\n      groups[id] = {\n        id,\n        groupName: node.definition.groupName,\n        repositoryName: node.definition.repository.name,\n        repositoryLocationName: node.definition.repository.location.name,\n        repositoryDisambiguationRequired: false,\n        bounds: {x: 0, y: 0, width: 0, height: 0},\n      };\n    }\n  }\n\n  // Add all the group boxes to the graph\n  const showGroups = Object.keys(groups).length > 1;\n  if (showGroups) {\n    Object.keys(groups).forEach((groupId) => g.setNode(groupId, {}));\n  }\n\n  // Add all the nodes to the graph\n  renderedNodes.forEach((node) => {\n    g.setNode(node.id, getAssetNodeDimensions(node.definition));\n    if (showGroups && node.definition.groupName) {\n      g.setParent(node.id, parentNodeIdForNode(node));\n    }\n  });\n\n  const linksToAssetsOutsideGraphedSet: {[id: string]: true} = {};\n\n  // Add the edges to the graph, and accumulate a set of \"foreign nodes\" (for which\n  // we have an inbound/outbound edge, but we don't have the `node` in the graphData).\n  Object.keys(graphData.downstream).forEach((upstreamId) => {\n    const downstreamIds = Object.keys(graphData.downstream[upstreamId]);\n    downstreamIds.forEach((downstreamId) => {\n      if (\n        !shouldRender(graphData.nodes[downstreamId]) &&\n        !shouldRender(graphData.nodes[upstreamId])\n      ) {\n        return;\n      }\n\n      g.setEdge({v: upstreamId, w: downstreamId}, {weight: 1});\n\n      if (!shouldRender(graphData.nodes[downstreamId])) {\n        (linksToAssetsOutsideGraphedSet as any)[downstreamId] = true;\n      } else if (!shouldRender(graphData.nodes[upstreamId])) {\n        (linksToAssetsOutsideGraphedSet as any)[upstreamId] = true;\n      }\n    });\n  });\n\n  // Add all the link nodes to the graph\n  Object.keys(linksToAssetsOutsideGraphedSet).forEach((id) => {\n    g.setNode(id, getAssetLinkDimensions());\n  });\n\n  dagre.layout(g);\n\n  let maxWidth = 0;\n  let maxHeight = 0;\n\n  const nodes: {[id: string]: AssetLayout} = {};\n\n  g.nodes().forEach((id) => {\n    const dagreNode = g.node(id);\n    if (!dagreNode) {\n      return;\n    }\n    const bounds = {\n      x: dagreNode.x - dagreNode.width / 2,\n      y: dagreNode.y - dagreNode.height / 2,\n      width: dagreNode.width,\n      height: dagreNode.height,\n    };\n    if (!id.startsWith(GROUP_NODE_PREFIX)) {\n      nodes[id] = {id, bounds};\n    }\n\n    maxWidth = Math.max(maxWidth, dagreNode.x + dagreNode.width / 2);\n    maxHeight = Math.max(maxHeight, dagreNode.y + dagreNode.height / 2);\n  });\n\n  // Apply bounds to the groups based on the nodes inside them\n  if (showGroups) {\n    for (const node of renderedNodes) {\n      if (node.definition.groupName) {\n        const groupId = parentNodeIdForNode(node);\n        groups[groupId].bounds =\n          groups[groupId].bounds.width === 0\n            ? nodes[node.id].bounds\n            : extendBounds(groups[groupId].bounds, nodes[node.id].bounds);\n      }\n    }\n    for (const group of Object.values(groups)) {\n      group.bounds = padBounds(group.bounds, {x: 15, top: 70, bottom: -10});\n    }\n  }\n\n  // Annotate groups that require disambiguation (same group name appears twice)\n  Object.values(groupBy(Object.values(groups), (g) => g.groupName))\n    .filter((set) => set.length > 1)\n    .flat()\n    .forEach((group) => {\n      group.bounds.y -= 18;\n      group.bounds.height += 18;\n      group.repositoryDisambiguationRequired = true;\n    });\n\n  const edges: AssetLayoutEdge[] = [];\n\n  g.edges().forEach((e) => {\n    const v = g.node(e.v);\n    const vXInset = !!linksToAssetsOutsideGraphedSet[e.v] ? 16 : 24;\n    const w = g.node(e.w);\n    const wXInset = !!linksToAssetsOutsideGraphedSet[e.w] ? 16 : 24;\n\n    // Ignore the coordinates from dagre and use the top left + bottom left of the\n    edges.push({\n      from: {x: v.x - v.width / 2 + vXInset, y: v.y - 30 + v.height / 2},\n      fromId: e.v,\n      to: {x: w.x - w.width / 2 + wXInset, y: w.y + 20 - w.height / 2},\n      toId: e.w,\n    });\n  });\n\n  return {\n    nodes,\n    edges,\n    width: maxWidth + opts.margin,\n    height: maxHeight + opts.margin,\n    groups: showGroups ? groups : {},\n  };\n};\n\nexport const ASSET_LINK_NAME_MAX_LENGTH = 10;\n\nexport const getAssetLinkDimensions = () => {\n  return {width: 106, height: 90};\n};\n\nexport const padBounds = (a: IBounds, padding: {x: number; top: number; bottom: number}) => {\n  return {\n    x: a.x - padding.x,\n    y: a.y - padding.top,\n    width: a.width + padding.x * 2,\n    height: a.height + padding.top + padding.bottom,\n  };\n};\n\nexport const extendBounds = (a: IBounds, b: IBounds) => {\n  const xmin = Math.min(a.x, b.x);\n  const ymin = Math.min(a.y, b.y);\n  const xmax = Math.max(a.x + a.width, b.x + b.width);\n  const ymax = Math.max(a.y + a.height, b.y + b.height);\n  return {x: xmin, y: ymin, width: xmax - xmin, height: ymax - ymin};\n};\n\nexport const ASSET_NODE_NAME_MAX_LENGTH = 28;\n\nexport const getAssetNodeDimensions = (def: {\n  assetKey: {path: string[]};\n  opNames: string[];\n  isSource: boolean;\n  isObservable: boolean;\n  isPartitioned: boolean;\n  graphName: string | null;\n  description?: string | null;\n  computeKind: string | null;\n}) => {\n  const width = 265;\n\n  if (def.isSource && !def.isObservable) {\n    return {width, height: 102};\n  } else {\n    let height = 100; // top tags area + name + description\n\n    if (def.isPartitioned) {\n      height += 40;\n    }\n    if (def.isSource) {\n      height += 30; // observed\n    } else {\n      height += 26; // status row\n    }\n\n    height += 30; // tag\n\n    return {width, height};\n  }\n};\n","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayAggregator;\n","var baseEach = require('./_baseEach');\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nmodule.exports = baseAggregator;\n","var arrayAggregator = require('./_arrayAggregator'),\n    baseAggregator = require('./_baseAggregator'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nmodule.exports = createAggregator;\n","var baseAssignValue = require('./_baseAssignValue'),\n    createAggregator = require('./_createAggregator');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The order of grouped values\n * is determined by the order they occur in `collection`. The corresponding\n * value of each key is an array of elements responsible for generating the\n * key. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': [4.2], '6': [6.1, 6.3] }\n *\n * // The `_.property` iteratee shorthand.\n * _.groupBy(['one', 'two', 'three'], 'length');\n * // => { '3': ['one', 'two'], '5': ['three'] }\n */\nvar groupBy = createAggregator(function(result, value, key) {\n  if (hasOwnProperty.call(result, key)) {\n    result[key].push(value);\n  } else {\n    baseAssignValue(result, key, [value]);\n  }\n});\n\nmodule.exports = groupBy;\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"names":["opts","GROUP_NODE_PREFIX","layoutAssetGraph","graphData","g","dagre","compound","setGraph","rankdir","marginx","marginy","nodesep","edgesep","ranksep","setDefaultEdgeLabel","_step","parentNodeIdForNode","node","definition","repository","location","name","groupName","join","shouldRender","renderedNodes","Object","values","nodes","filter","groups","_iterator","_createForOfIteratorHelper","s","n","done","value","id","repositoryName","repositoryLocationName","repositoryDisambiguationRequired","bounds","x","y","width","height","err","e","f","showGroups","keys","length","forEach","groupId","setNode","getAssetNodeDimensions","setParent","linksToAssetsOutsideGraphedSet","downstream","upstreamId","downstreamId","setEdge","v","w","weight","getAssetLinkDimensions","maxWidth","maxHeight","dagreNode","startsWith","Math","max","_step2","_iterator2","extendBounds","_i","_Object$values","group","padBounds","top","bottom","groupBy","set","flat","edges","vXInset","wXInset","push","from","fromId","to","toId","ASSET_LINK_NAME_MAX_LENGTH","a","padding","b","xmin","min","ymin","ASSET_NODE_NAME_MAX_LENGTH","def","isSource","isObservable","isPartitioned","module","exports","array","setter","iteratee","accumulator","index","baseEach","require","collection","key","arrayAggregator","baseAggregator","baseIteratee","isArray","initializer","func","baseAssignValue","createAggregator","hasOwnProperty","prototype","result","call","o","allowArrayLike","it","Symbol","iterator","Array","i","F","_e","TypeError","normalCompletion","didErr","step","next","_e2"],"sourceRoot":""}