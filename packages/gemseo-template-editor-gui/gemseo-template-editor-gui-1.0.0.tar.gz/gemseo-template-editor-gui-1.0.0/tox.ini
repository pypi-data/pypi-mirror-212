[tox]
minversion = 3.20.0
# For using setuptools_scm.
isolated_build = true

[testenv]
deps =
    -r requirements/test-{basepython}.txt
extras = test
setenv =
    # Workaround matplotlib on windows server 2012 and gitlab-runner,
    # matplotlib cannot access a registry key and falls back to the WINDIR var
    # https://matplotlib.org/stable/api/font_manager_api.html#matplotlib.font_manager.win32FontDirectory.
    WINDIR = {env:WINDIR:C:\Windows}
    # Use a non GUI rendering backend for matplotlib.
    MPLBACKEND = AGG
    # Define pytest options for using coverage.
    coverage: __COVERAGE_POSARGS=--cov --cov-config=setup.cfg --cov-report=xml --cov-report=html
passenv =
    # See dev docs.
    GEMSEO_KEEP_IMAGE_COMPARISONS
    # Those variables are necessary for opening the window.
    DISPLAY
    XAUTHORITY
    # This variable is used to disable the tests on the CI.
    CI
commands =
    pytest {env:__COVERAGE_POSARGS:} {posargs}

[testenv:check]
description = run code formatting and checking
basepython = python3.9
deps = -r requirements/check.txt
skip_install = true
whitelist_externals = pre-commit
commands =
    pre-commit install
    pre-commit run --all-files

[testenv:doc]
description = build documentation
basepython = python3.9
deps = -r requirements/doc.txt
extras = doc
passenv =
    # Required by matplotlib.
    HOME
    # Path to the directory that contains plantuml.jar.
    PLANTUML_DIR
commands =
    # Cross platform directory removal.
    python -c "import shutil; shutil.rmtree('doc_src/_modules', ignore_errors=True)"
    sphinx-build -n -j auto -b html doc_src {toxinidir}/doc {posargs:}

[testenv:dist]
description = create and check the pypi distribution
basepython = python3.9
deps = -r requirements/dist.txt
skip_install = true
whitelist_externals = rm
commands =
    rm -rf dist build
    python -m build
    twine check dist/*
    python setup.py check --metadata

[testenv:pypi-py{38,39,310}]
description = test the pypi distribution
deps = gemseo-template-editor-gui[test]
skip_install = true

[testenv:update-deps-{doc,dist,check}]
description = update the non test envs dependencies
basepython = python3.9
extras =
    doc: {[testenv:doc]extras}
setenv =
passenv =
deps = pip-tools
skip_install = true
whitelist_externals =
    pip-compile
    check: pre-commit
commands =
    doc: pip-compile --upgrade --extra doc -o requirements/doc.txt
    dist: pip-compile --upgrade requirements/dist.in
    check: pip-compile --upgrade requirements/check.in
    check: pre-commit autoupdate

[testenv:update-deps-test-py{38,39,310}]
description = update the test envs dependencies
extras = {[testenv]extras}
setenv =
passenv =
deps = pip-tools
skip_install = true
commands =
    pip-compile --upgrade --extra test -o requirements/test-{basepython}.txt
