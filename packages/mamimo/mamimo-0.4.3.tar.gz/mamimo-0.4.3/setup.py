# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['mamimo', 'mamimo.datasets']

package_data = \
{'': ['*']}

install_requires = \
['numpy>=1.22.3,<2.0.0', 'pandas>=1.4.2,<2.0.0', 'scikit-learn>=1.0.2,<2.0.0']

setup_kwargs = {
    'name': 'mamimo',
    'version': '0.4.3',
    'description': 'A package to create marketing mix models.',
    'long_description': '# MaMiMo\nThis is a small library that helps you with your everyday **Ma**rketing **Mi**x **Mo**delling. It contains a few saturation functions, carryovers and some utilities for creating with time features. You can also read my article about it here: [>>>Click<<<](https://towardsdatascience.com/a-small-python-library-for-marketing-mix-modeling-mamimo-100f31666e18).\n\nGive it a try via `pip install mamimo`!\n\n# Small Example\nYou can create a marketing mix model using different components from MaMiMo as well as [scikit-learn](https://scikit-learn.org/stable/). First, we can create a dataset via\n```python\nfrom mamimo.datasets import load_fake_mmm\n\ndata = load_fake_mmm()\n\nX = data.drop(columns=[\'Sales\'])\ny = data[\'Sales\']\n```\n\n`X` contains media spends only now, but you can enrich it with more information.\n\n## Feature Engineering\n\nMaMiMo lets you add time features, for example, via\n\n```python\nfrom mamimo.time_utils import add_time_features, add_date_indicators\n\n\nX = (X\n     .pipe(add_time_features, month=True)\n     .pipe(add_date_indicators, special_date=["2020-01-05"])\n     .assign(trend=range(200))\n)\n```\n\nThis adds\n\n- a month column (integers between 1 and 12),\n- a binary column named special_date that is 1 on the 5h of January 2020 and 0 everywhere else, and\n- a (so far linear) trend which is only counting up from 0 to 199.\n\n`X` looks like this now:\n\n![1_iPkUH70amWOZijv6LVhM3A](https://user-images.githubusercontent.com/932327/169354994-624c5608-8dcf-49ae-94e2-5195f019d596.png)\n\n## Building a Model\n\nWe can now build a final model like this:\n```python\nfrom mamimo.time_utils import PowerTrend\nfrom mamimo.carryover import ExponentialCarryover\nfrom mamimo.saturation import ExponentialSaturation\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\n\ncats =  [list(range(1, 13))] # different months, known beforehand\n\npreprocess = ColumnTransformer(\n    [\n     (\'tv_pipe\', Pipeline([\n            (\'carryover\', ExponentialCarryover()),\n            (\'saturation\', ExponentialSaturation())\n     ]), [\'TV\']),\n     (\'radio_pipe\', Pipeline([\n            (\'carryover\', ExponentialCarryover()),\n            (\'saturation\', ExponentialSaturation())\n     ]), [\'Radio\']),\n     (\'banners_pipe\', Pipeline([\n            (\'carryover\', ExponentialCarryover()),\n            (\'saturation\', ExponentialSaturation())\n     ]), [\'Banners\']),\n    (\'month\', OneHotEncoder(sparse=False, categories=cats), [\'month\']),\n    (\'trend\', PowerTrend(), [\'trend\']),\n    (\'special_date\', ExponentialCarryover(), [\'special_date\'])\n    ]\n)\n\nmodel = Pipeline([\n    (\'preprocess\', preprocess),\n    (\'regression\', LinearRegression(\n        positive=True,\n        fit_intercept=False # no intercept because of the months\n        ) \n    )\n])\n```\n\nThis builds a model that does the following:\n- the media channels are preprocessed using the [adstock transformation](https://en.wikipedia.org/wiki/Advertising_adstock), i.e. a carryover effect and a saturation is added\n- the month is one-hot (dummy) encoded\n- the trend is changed from linear to something like t^a, with some exponent a to be optimized\n- the special_date 2020-01-05 gets a carryover effect as well, meaning that not only on this special week there was some special effect on the sales, but also the weeks after it\n\n## Training The Model\nWe can then hyperparameter tune the model via\n```python\nfrom scipy.stats import randint, uniform\nfrom sklearn.model_selection import RandomizedSearchCV, TimeSeriesSplit\n\ntuned_model = RandomizedSearchCV(\n    model,\n    param_distributions={\n        \'preprocess__tv_pipe__carryover__window\': randint(1, 10),\n        \'preprocess__tv_pipe__carryover__strength\': uniform(0, 1),\n        \'preprocess__tv_pipe__saturation__exponent\': uniform(0, 1),\n        \'preprocess__radio_pipe__carryover__window\': randint(1, 10),\n        \'preprocess__radio_pipe__carryover__strength\': uniform(0, 1),\n        \'preprocess__radio_pipe__saturation__exponent\': uniform(0, 1),\n        \'preprocess__banners_pipe__carryover__window\': randint(1, 10),\n        \'preprocess__banners_pipe__carryover__strength\': uniform(0, 1),\n        \'preprocess__banners_pipe__saturation__exponent\': uniform(0, 1),\n        \'preprocess__trend__power\': uniform(0, 2),           \n        \'preprocess__special_date__window\': randint(1, 10),  \n        \'preprocess__special_date__strength\': uniform(0, 1), \n    },\n    cv=TimeSeriesSplit(),\n    random_state=0,\n    n_iter=1000, # can take some time, lower number for faster results\n)\n\ntuned_model.fit(X, y)\n```\n\nYou can also use `GridSearch`, Optuna, or other hyperparameter tune methods and packages here, as long as it is compatible to scikit-learn.\n\n## Analyzing\nWith `tuned_model.predict(X)` and some plotting, we get\n\n![1_Bf4NKiUPNVVH87-7PNNZGw](https://user-images.githubusercontent.com/932327/169356818-158a322e-c18c-4404-a32f-ee69778c4d22.png)\n\nYou can get the best found hyperparameters using `print(tuned_model.best_params_)`.\n\n### Plotting\nYou can compute the channel contributions via \n```python\nfrom mamimo.analysis import breakdown\n\ncontributions = breakdown(tuned_model.best_estimator_, X, y)\n```\n\nThis returns a dataframe with the contributions of each channel fo each time step, summing to the historical values present in `y`. You can get a nice plot via\n```python\nax = contributions.plot.area(\n    figsize=(16, 10),\n    linewidth=1,\n    title="Predicted Sales and Breakdown",\n    ylabel="Sales",\n    xlabel="Date",\n)\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(\n    handles[::-1],\n    labels[::-1],\n    title="Channels",\n    loc="center left",\n    bbox_to_anchor=(1.01, 0.5),\n)\n```\n\n![1_SIlnsYXxRjhSZf-1jE4aDQ](https://user-images.githubusercontent.com/932327/169357525-c4f79fa0-a2fd-46b2-8331-47e534737d81.png)\n\nWow, that\'s a lot of channels. Let us group some of them together.\n\n```python\ngroup_channels = {\'Baseline\': [f\'month__month_{i}\' for i in range(1, 13)] + [\'Base\', \'trend__trend\']} \n# read: \'Baseline consists of the months, base and trend.\'\n# You can add more groups!\n\ncontributions = breakdown(\n    tuned_model.best_estimator_,\n    X,\n    y,\n    group_channels\n)\n```\n\nIf we plot again, we get\n\n![1_xHzrUMMTKGxo7dvKpebjNg](https://user-images.githubusercontent.com/932327/169357648-13ae9097-d45b-4690-b3dd-63139da020b7.png)\n\nYay!\n\n-----------------\n[![ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/G2G7EBKVH)\n\n',
    'author': 'Robert KÃ¼bler',
    'author_email': 'xgarve@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/Garve/mamimo',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.9,<4.0',
}


setup(**setup_kwargs)
