{"version":3,"file":"lib_index_js.491961157af4b71eeed0.js","mappings":"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","sources":["webpack://jupyterlab-liveupdate/./src/index.ts","webpack://jupyterlab-liveupdate/./src/updater.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\n\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { updateWatchedFiles } from './updater';\n\nconst UPDATER_PLUGIN_NAME = 'jupyterlab-liveupdate:liveupdater';\n// import { requestAPI } from './handler';\n\n/**\n * Initialization data for the jupyterlab-liveupdate extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'jupyterlab-liveupdate:plugin',\n  autoStart: true,\n  requires: [IDocumentManager, ISettingRegistry],\n  activate: async (\n    app: JupyterFrontEnd,\n    docManager: IDocumentManager,\n    settingRegistry: ISettingRegistry\n  ) => {\n    // Define the file paths to watch\n    let watchedFiles: string[] = [];\n    const cm = docManager.services.contents;\n    updateWatchedFiles(\n      cm,\n      (await settingRegistry.get(UPDATER_PLUGIN_NAME, 'watchedFilesPatterns'))\n        .composite as string[],\n      (await settingRegistry.get(UPDATER_PLUGIN_NAME, 'watchedSpecificDirs'))\n        .composite as string[],\n      (await settingRegistry.get(UPDATER_PLUGIN_NAME, 'excludedDirs'))\n        .composite as string[],\n      (await settingRegistry.get(UPDATER_PLUGIN_NAME, 'excludedFiles'))\n        .composite as string[]\n    ).then((files: string[]) => {\n      watchedFiles = files;\n    });\n\n    settingRegistry.pluginChanged.connect(async (sender, plugin) => {\n      if (plugin === UPDATER_PLUGIN_NAME) {\n        watchedFiles = await updateWatchedFiles(\n          cm,\n          (\n            await sender.get(plugin, 'watchedFilesPatterns')\n          ).composite as string[],\n          (\n            await sender.get(plugin, 'watchedSpecificDirs')\n          ).composite as string[],\n          (\n            await sender.get(plugin, 'excludedDirs')\n          ).composite as string[],\n          (\n            await sender.get(plugin, 'excludedFiles')\n          ).composite as string[]\n        );\n      }\n    });\n\n    // Start the interval for watching the files\n    setInterval(() => {\n      const now = Date.now();\n      for (const file of watchedFiles) {\n        cm.get(file).then(model => {\n          const last_modif = Date.parse(model.last_modified);\n          if (last_modif >= now - 1000) {\n            eval(model.content);\n          }\n        });\n      }\n    }, 1000);\n  }\n};\n\nexport default plugin;\n","import { Contents } from '@jupyterlab/services';\n\nexport async function updateWatchedFiles(\n  cm: Contents.IManager,\n  regExList: string[],\n  lookupFolders: string[],\n  excludedFolders: string[],\n  excludedFiles: string[]\n): Promise<string[]> {\n  if (regExList === undefined) {\n    regExList = [];\n  }\n  if (lookupFolders === undefined) {\n    lookupFolders = [];\n  }\n  if (excludedFolders === undefined) {\n    excludedFolders = [];\n  }\n  if (excludedFiles === undefined) {\n    excludedFiles = [];\n  }\n  const regExes = regExList.map(regEx => patternToRegex(regEx));\n  let watchedFiles: string[] = [];\n  for (const folder of lookupFolders) {\n    watchedFiles = watchedFiles.concat(\n      await searchFolder(cm, folder, regExes, excludedFiles, excludedFolders)\n    );\n  }\n\n  if (lookupFolders.length === 0) {\n    const root = await cm.get('');\n    watchedFiles = watchedFiles.concat(\n      await searchFolder(cm, root.path, regExes, excludedFiles, excludedFolders)\n    );\n  }\n  return watchedFiles;\n}\n\nfunction patternToRegex(pattern: string): RegExp {\n  const regex =\n    '^' +\n    pattern\n      .replace(/([.?+^$[\\]\\\\(){}|-])/g, '\\\\$1')\n      .replace(/\\*/g, '.*')\n      .replace(/\\\\\\*/g, '\\\\*') +\n    '$';\n  return new RegExp(regex);\n}\n\nasync function searchFolder(\n  cm: Contents.IManager,\n  path: string,\n  regExes: RegExp[],\n  excludedFiles: string[],\n  excludedFolders: string[]\n): Promise<string[]> {\n  const folderContents = await cm.get(path);\n  let watchedFiles: string[] = [];\n  for (const file of folderContents.content) {\n    // dig more if the file is not an excluded folder\n    if (file.type === 'directory') {\n      if (\n        !excludedFolders.some(excludedFolder =>\n          file.path.startsWith(excludedFolder)\n        )\n      ) {\n        watchedFiles = watchedFiles.concat(\n          await searchFolder(\n            cm,\n            file.path,\n            regExes,\n            excludedFiles,\n            excludedFolders\n          )\n        );\n      }\n      continue;\n    }\n    // add the file if it matches the regex and is not an excluded file\n    if (\n      regExes.some(regEx => regEx.test(file.path)) &&\n      !excludedFiles.some(excludedFile => file.path === excludedFile)\n    ) {\n      watchedFiles.push(file.path);\n    }\n  }\n  return watchedFiles;\n}\n"],"names":[],"sourceRoot":""}